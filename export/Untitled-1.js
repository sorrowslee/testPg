(function () {
  'use strict';

  window.__require = function t(Z, R, K) {
    function T(D, k) {
      if (!R[D]) {
        if (!Z[D]) {
          var p = D.split("/");
          p = p[p.length - 1];
          if (!Z[p]) {
            var j = typeof __require == "function" && __require;
            if (!k && j) {
              return j(p, true);
            }
            if (x) {
              return x(p, true);
            }
            throw Error("Cannot find module '" + D + "'");
          }
          D = p;
        }
        var V = R[D] = {
          exports: {}
        };
        Z[D][0].call(V.exports, function (Q) {
          return T(Z[D][1][Q] || Q);
        }, V, V.exports, t, Z, R, K);
      }
      return R[D].exports;
    }
    var x = typeof __require == "function" && __require;
    for (var L = 0; L < K.length; L++) {
      T(K[L]);
    }
    return T;
  }({
    APIClient: [function (Z, I) {
      'use strict';

      if (!cc._RF.push(I, "d34ca2GoqVBUbdLTDYW//l7", "APIClient")) {
        var R = System.get("bvframework").APIClient;
        I.exports.default = R;
        I.exports.__esModule = true;
        cc._RF.pop();
      }
    }, {}],
    AdapterEventEmitter: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "4a843d9tZpBC5Aag4RGjJxr", "AdapterEventEmitter")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("Utils");
        I("AudioAdapterConstant");
        var x = function () {
          function D() {
            this._eventPool = Object.create(null);
            this._deferCallback = T.deferCallback(this);
          }
          D.prototype.once = function (k, C, u) {
            this.on(k, C, u, true);
          };
          D.prototype.emit = function (k, C, j, G = false) {
            var V = this._eventPool;
            var Q = V[k];
            Q ||= V[k] = [];
            var N = 0;
            var Y = function (z) {
              var f = Q[z];
              if (!f.id || f.id === C) {
                N = z;
                W._deferCallback(function () {
                  var A = f.fn;
                  if (A !== T.emptyFunc) {
                    if (f.once) {
                      this.off(k, A, f.id);
                    }
                    A(C, j);
                  }
                  if (z === N && C !== undefined && G) {
                    this.off(C);
                  }
                });
              }
            };
            var W = this;
            for (var q = 0, S = Q.length; q < S; q++) {
              Y(q);
            }
          };
          D.prototype.on = function (k, C, u, c) {
            var p = this._eventPool;
            var j = p[k];
            j ||= p[k] = [];
            for (var G = 0, V = j.length; G < V; G++) {
              var Q = j[G];
              if (Q.fn === C) {
                if (Q.id === u) {
                  return;
                }
                if (!u || !Q.id) {
                  return;
                }
              }
            }
            var N = {
              id: u,
              fn: C,
              once: !!c
            };
            j.push(N);
          };
          D.prototype.off = function (k, C, u) {
            if (k !== undefined) {
              switch (typeof k) {
                case "number":
                  return this._offByFunction(undefined, k);
                case "function":
                  return this._offByFunction(k, C);
                default:
                  if (typeof C == "number") {
                    u = C;
                    C = undefined;
                  }
                  return this._offByEvent(k, C, u);
              }
            } else {
              for (var c in this._eventPool) {
                this._eventPool[c].length = 0;
              }
            }
          };
          D.prototype._offByEvent = function (k, C, u) {
            var c = this._eventPool[k];
            if (c) {
              if (C !== undefined || u !== undefined) {
                this._eventPool[k] = c.filter(function (p) {
                  return L(p, C, u);
                });
              } else {
                c.length = 0;
              }
            }
          };
          D.prototype._offByFunction = function (k, C) {
            for (var u in this._eventPool) {
              this._eventPool[u] = this._eventPool[u].filter(function (c) {
                return L(c, k, C);
              });
            }
          };
          return D;
        }();
        K.default = x;
        cc._RF.pop();
      }
      function L(D, k, C) {
        return !!C && C !== D.id || !!k && k !== D.fn || (D.fn = T.emptyFunc, false);
      }
    }, {
      AudioAdapterConstant: "AudioAdapterConstant",
      Utils: "Utils"
    }],
    AnalyticsHelper: [function (Z, I) {
      'use strict';

      if (!cc._RF.push(I, "d1d41tYvBBPX6KJU88DFlLq", "AnalyticsHelper")) {
        var R = System.get("bvframework").AnalyticsHelper;
        for (var K in R) {
          I.exports[K] = R[K];
        }
        I.exports.__esModule = true;
        cc._RF.pop();
      }
    }, {}],
    AnimParticleSystemPoolHandler: [function (Z, I, R) {
      'use strict';

      if (!cc._RF.push(I, "90167wb5w5JpKAkqWQq6cj8", "AnimParticleSystemPoolHandler")) {
        R.__esModule = true;
        R.default = undefined;
        var K = cc.Class({
          extends: cc.Component,
          unuse: function () {
            var g = this.node.getComponent(cc.Animation);
            if (g) {
              g.stop();
            }
          }
        });
        R.default = K;
        I.exports = R.default;
        cc._RF.pop();
      }
    }, {}],
    AnimParticleSystemUtils: [function (Z, I, R) {
      'use strict';

      if (!cc._RF.push(I, "cbd06HrkTNFtbM/q+8lJvnc", "AnimParticleSystemUtils")) {
        R.__esModule = true;
        R.getAccelerationDistance = function (K, g) {
          return K * 0.5 * g * g;
        };
        R.getRandomFromRange = function (K, g) {
          return K + g * (Math.random() - 0.5) * 2;
        };
        cc._RF.pop();
      }
    }, {}],
    AnimParticleSystem: [function (R, K, g) {
      'use strict';

      if (!cc._RF.push(K, "3142aQR/shASo2uVaU35yUL", "AnimParticleSystem")) {
        g.__esModule = true;
        g.default = undefined;
        var L = R("AnimParticleSystemUtils");
        var D = cc.Enum({
          LINEAR: 0,
          GRAVITY: 1
        });
        var k = [undefined, {
          proto: cc.easeIn,
          needParam: true
        }, {
          proto: cc.easeOut,
          needParam: true
        }, {
          proto: cc.easeInOut,
          needParam: true
        }, {
          proto: cc.easeSineIn
        }, {
          proto: cc.easeSineOut
        }, {
          proto: cc.easeSineInOut
        }, {
          proto: cc.easeCubicActionIn
        }, {
          proto: cc.easeCubicActionOut
        }, {
          proto: cc.easeCubicActionInOut
        }, {
          proto: cc.easeQuinticActionIn
        }, {
          proto: cc.easeQuinticActionOut
        }, {
          proto: cc.easeQuinticActionInOut
        }, {
          proto: cc.easeCircleActionIn
        }, {
          proto: cc.easeCircleActionOut
        }, {
          proto: cc.easeCircleActionInOut
        }, {
          proto: cc.easeElasticIn,
          needParam: true
        }, {
          proto: cc.easeElasticOut,
          needParam: true
        }, {
          proto: cc.easeElasticInOut,
          needParam: true
        }, {
          proto: cc.easeQuadraticActionIn
        }, {
          proto: cc.easeQuadraticActionOut
        }, {
          proto: cc.easeQuadraticActionInOut
        }, {
          proto: cc.easeQuarticActionIn
        }, {
          proto: cc.easeQuarticActionOut
        }, {
          proto: cc.easeQuarticActionInOut
        }, {
          proto: cc.easeExponentialIn
        }, {
          proto: cc.easeExponentialOut
        }, {
          proto: cc.easeExponentialInOut
        }, {
          proto: cc.easeBackIn
        }, {
          proto: cc.easeBackOut
        }, {
          proto: cc.easeBackInOut
        }, {
          proto: cc.easeBounceIn
        }, {
          proto: cc.easeBounceOut
        }, {
          proto: cc.easeBounceInOut
        }];
        var C = cc.Enum({
          None: 0,
          EaseIn: 1,
          EaseOut: 2,
          EaseInOut: 3,
          EaseSineIn: 4,
          EaseSineOut: 5,
          EaseSineInOut: 6,
          EaseCubicActionIn: 7,
          EaseCubicActionOut: 8,
          EaseCubicActionInOut: 9,
          EaseQuinticActionIn: 10,
          EaseQuinticActionOut: 11,
          EaseQuinticActionInOut: 12,
          EaseCircleActionIn: 13,
          EaseCircleActionOut: 14,
          EaseCircleActionInOut: 15,
          EaseElasticIn: 16,
          EaseElasticOut: 17,
          EaseElasticInOut: 18,
          EaseQuadraticActionIn: 19,
          EaseQuadraticActionOut: 20,
          EaseQuadraticActionInOut: 21,
          EaseQuarticActionIn: 22,
          EaseQuarticActionOut: 23,
          EaseQuarticActionInOut: 24,
          EaseExponentialIn: 25,
          EaseExponentialOut: 26,
          EaseExponentialInOut: 27,
          EaseBackIn: 28,
          EaseBackOut: 29,
          EaseBackInOut: 30,
          EaseBounceIn: 31,
          EaseBounceOut: 32,
          EaseBounceInOut: 33
        });
        var u = false;
        var c = cc.Class({
          extends: cc.Component,
          properties: {
            particlePrefab: {
              type: cc.Prefab,
              tooltip: false,
              default: undefined
            },
            duration: {
              type: cc.Float,
              tooltip: false,
              default: -1
            },
            emissionRate: {
              type: cc.Float,
              tooltip: false,
              default: 20,
              min: 0.1
            },
            life: {
              type: cc.Float,
              tooltip: false,
              default: 1,
              min: 0.1
            },
            lifeVar: {
              type: cc.Float,
              tooltip: false,
              default: 0
            },
            particleCount: {
              type: cc.Integer,
              tooltip: false,
              default: 10,
              min: 1
            },
            particleMovementEasing: {
              type: C,
              tooltip: false,
              default: C.None
            },
            particleMovementParam: {
              visible: function () {
                var p;
                return ((p = k[this.particleMovementEasing]) == null ? undefined : p.needParam) === true;
              },
              type: cc.Float,
              tooltip: false,
              default: 0,
              min: 0
            },
            startColor: {
              tooltip: false,
              default: cc.Color.WHITE
            },
            startColorVar: {
              tooltip: false,
              default: cc.Color.BLACK
            },
            endColor: {
              tooltip: false,
              default: cc.Color.WHITE
            },
            endColorVar: {
              tooltip: false,
              default: cc.Color.BLACK
            },
            colorDelayRatio: {
              visible: function () {
                return !this.startColor.equals(this.endColor) || !this.startColorVar.equals(this.endColorVar);
              },
              type: cc.Float,
              tooltip: false,
              range: [0, 1, 0.01],
              default: 0
            },
            colorEasing: {
              visible: function () {
                return !this.startColor.equals(this.endColor) || !this.startColorVar.equals(this.endColorVar);
              },
              type: C,
              tooltip: false,
              default: C.None
            },
            colorEasingParam: {
              visible: function () {
                var p;
                return ((p = k[this.colorEasing]) == null ? undefined : p.needParam) === true;
              },
              type: cc.Float,
              tooltip: false,
              default: 0,
              min: 0
            },
            startAlpha: {
              type: cc.Float,
              tooltip: false,
              default: 255,
              min: 0
            },
            startAlphaVar: {
              type: cc.Float,
              tooltip: false,
              default: 0
            },
            endAlpha: {
              type: cc.Float,
              tooltip: false,
              default: 255,
              min: 0
            },
            endAlphaVar: {
              type: cc.Float,
              tooltip: false,
              default: 0
            },
            alphaDelayRatio: {
              visible: function () {
                return this.startAlpha !== this.endAlpha || this.startAlphaVar !== this.endAlphaVar;
              },
              type: cc.Float,
              tooltip: false,
              range: [0, 1, 0.01],
              default: 0
            },
            alphaEasing: {
              visible: function () {
                return this.startAlpha !== this.endAlpha || this.startAlphaVar !== this.endAlphaVar;
              },
              type: C,
              tooltip: false,
              default: C.None
            },
            alphaEasingParam: {
              visible: function () {
                var p;
                return ((p = k[this.alphaEasing]) == null ? undefined : p.needParam) === true;
              },
              type: cc.Float,
              tooltip: false,
              default: 0,
              min: 0
            },
            speed: {
              type: cc.Float,
              tooltip: false,
              default: 0
            },
            speedVar: {
              type: cc.Float,
              tooltip: false,
              default: 0
            },
            angle: {
              type: cc.Float,
              tooltip: false,
              default: 90
            },
            angleVar: {
              type: cc.Float,
              tooltip: false,
              default: 20
            },
            startScale: {
              type: cc.Float,
              tooltip: false,
              default: 1
            },
            startScaleVar: {
              type: cc.Float,
              tooltip: false,
              default: 0
            },
            endScale: {
              type: cc.Float,
              tooltip: false,
              default: 1
            },
            endScaleVar: {
              type: cc.Float,
              tooltip: false,
              default: 0
            },
            endScaleIsFactor: {
              visible: function () {
                return this.startScale !== this.endScale || this.startScaleVar !== this.endScaleVar;
              },
              default: false
            },
            scaleDelayRatio: {
              visible: function () {
                return this.startScale !== this.endScale || this.startScaleVar !== this.endScaleVar;
              },
              type: cc.Float,
              tooltip: false,
              range: [0, 1, 0.01],
              default: 0
            },
            scaleEasing: {
              visible: function () {
                return this.startScale !== this.endScale || this.startScaleVar !== this.endScaleVar;
              },
              type: C,
              tooltip: false,
              default: C.None
            },
            scaleEasingParam: {
              visible: function () {
                var p;
                return ((p = k[this.scaleEasing]) == null ? undefined : p.needParam) === true;
              },
              type: cc.Float,
              tooltip: false,
              default: 0,
              min: 0
            },
            startSpin: {
              type: cc.Float,
              tooltip: false,
              default: 0
            },
            startSpinVar: {
              type: cc.Float,
              tooltip: false,
              default: 0
            },
            endSpin: {
              type: cc.Float,
              tooltip: false,
              default: 0
            },
            endSpinVar: {
              type: cc.Float,
              tooltip: false,
              default: 0
            },
            endSpinLocked: {
              visible: function () {
                return this.startSpinVar !== 0;
              },
              default: false
            },
            spinDelayRatio: {
              visible: function () {
                return this.startSpin !== this.endSpin || this.startSpinVar !== this.endSpinVar;
              },
              type: cc.Float,
              tooltip: false,
              range: [0, 1, 0.01],
              default: 0
            },
            spinEasing: {
              visible: function () {
                return this.startSpin !== this.endSpin || this.startSpinVar !== this.endSpinVar;
              },
              type: C,
              tooltip: false,
              default: C.None
            },
            spinEasingParam: {
              visible: function () {
                var p;
                return ((p = k[this.spinEasing]) == null ? undefined : p.needParam) === true;
              },
              type: cc.Float,
              tooltip: false,
              default: 0,
              min: 0
            },
            sourcePos: {
              tooltip: false,
              default: cc.v2(0, 0)
            },
            sourcePosVar: {
              tooltip: false,
              default: cc.v2(0, 0)
            },
            emitterMode: {
              tooltip: false,
              default: D.LINEAR,
              type: D
            },
            gravityVec: {
              visible: function () {
                return this.emitterMode === D.GRAVITY;
              },
              tooltip: false,
              default: cc.v2(0, 0)
            },
            gravityVecVar: {
              visible: function () {
                return this.emitterMode === D.GRAVITY;
              },
              tooltip: false,
              default: cc.v2(0, 0)
            },
            nodePool: {
              visible: false,
              get: function () {
                this._nodePool ||= new cc.NodePool("AnimParticleSystemPoolHandler");
                return this._nodePool;
              }
            },
            _liveParticles: []
          },
          resetSystem: function (p = true) {
            if (p) {
              this.stopSystem(true);
            }
            var j = 1 / this.emissionRate;
            this.unschedule(this._spawnParticle);
            var G = this.duration;
            if (G !== 0) {
              this.schedule(this._spawnParticle, j);
              if (G > 0) {
                this.unschedule(this.stopSystem);
                this.scheduleOnce(this.stopSystem, G);
              }
            }
          },
          stopSystem: function (p) {
            var j = this;
            if (p === undefined) {
              p = false;
            }
            this.unschedule(this._spawnParticle);
            this.unschedule(this.stopSystem);
            if (p === true) {
              this._liveParticles.forEach(function (G) {
                G.stopAllActions();
                j.nodePool.put(G);
              });
              this._liveParticles = [];
            }
          },
          _spawnParticle: function () {
            if (!(this._liveParticles.length >= this.particleCount)) {
              var p = this.nodePool.get();
              p ||= cc.instantiate(this.particlePrefab);
              this._playParticleAction(p);
              p.getComponent(cc.Animation).play();
            }
          },
          getLife: function (p, j) {
            return (0, L.getRandomFromRange)(p, j);
          },
          getSpeed: function (p, j) {
            return (0, L.getRandomFromRange)(p, j);
          },
          getEmissionAngle: function (p, j) {
            return (0, L.getRandomFromRange)(p, j);
          },
          getSourceStartScale: function (p, j) {
            return (0, L.getRandomFromRange)(p, j);
          },
          getSourceStartSpinAngle: function (p, j) {
            return (0, L.getRandomFromRange)(p, j);
          },
          getSourceStartAlpha: function (p, j) {
            return (0, L.getRandomFromRange)(p, j);
          },
          getSourceStartColor: function (p, j) {
            if (j.equals(cc.Color.BLACK)) {
              return p;
            } else {
              return new cc.Color((0, L.getRandomFromRange)(p.getR(), j.getR()), (0, L.getRandomFromRange)(p.getG(), j.getG()), (0, L.getRandomFromRange)(p.getB(), j.getB()));
            }
          },
          getSourceStartPosition: function (p, j) {
            return cc.v2((0, L.getRandomFromRange)(p.x, j.x), (0, L.getRandomFromRange)(p.y, j.y));
          },
          getSourceEndScale: function (p, j, G, V) {
            return (V ? p : 1) * (0, L.getRandomFromRange)(j, G);
          },
          getSourceEndSpinAngle: function (p, j, G, V) {
            if (V) {
              return p;
            } else {
              return (0, L.getRandomFromRange)(j, G);
            }
          },
          getSourceEndAlpha: function (p, j, G) {
            return (0, L.getRandomFromRange)(j, G);
          },
          getSourceEndColor: function (p, j, G) {
            if (G.equals(cc.Color.BLACK)) {
              return j;
            } else {
              return new cc.Color((0, L.getRandomFromRange)(j.getR(), G.getR()), (0, L.getRandomFromRange)(j.getG(), G.getG()), (0, L.getRandomFromRange)(j.getB(), G.getB()));
            }
          },
          getSourceEndPositionLinear: function (p, j, G, V) {
            var Q = Math.cos(G / 180 * Math.PI) * j * V;
            var N = Math.sin(G / 180 * Math.PI) * j * V;
            return cc.v2(p.x + Q, p.y + N);
          },
          getSourceEndPositionGravity: function (j, G, V, Q, N, Y) {
            var W = Math.cos(V / 180 * Math.PI) * G * Q;
            var q = Math.sin(V / 180 * Math.PI) * G * Q;
            var z = (0, L.getRandomFromRange)(N.x, Y.x);
            var M = (0, L.getRandomFromRange)(N.y, Y.y);
            var E = j.x + W / 3;
            var F = j.y + q / 3;
            var H = j.x + W / 3 * 2;
            var w = j.y + q / 3 * 2;
            var U = j.x + W;
            var P = j.y + q;
            var X = Q * 60 / 3;
            var J = (0, L.getAccelerationDistance)(z, X);
            var Z0 = (0, L.getAccelerationDistance)(M, X);
            var Z1 = X * 2;
            var Z2 = (0, L.getAccelerationDistance)(z, Z1);
            var Z3 = (0, L.getAccelerationDistance)(M, Z1);
            var Z4 = X * 3;
            var Z5 = (0, L.getAccelerationDistance)(z, Z4);
            var Z6 = (0, L.getAccelerationDistance)(M, Z4);
            var Z7 = U > 0 ? 1 : -1;
            return [cc.v2(E - J * Z7, F - Z0), cc.v2(H - Z2 * Z7, w - Z3), cc.v2(U - Z5 * Z7, P - Z6)];
          },
          getMoveAction: function (p, j, G, V, Q) {
            var N = cc.moveTo(G, j);
            if (V) {
              return N.easing(V(Q));
            } else {
              return N;
            }
          },
          getBezierAction: function (p, j, G, V, Q) {
            var N = cc.bezierTo(G, j);
            if (V) {
              return N.easing(V(Q));
            } else {
              return N;
            }
          },
          getScaleAction: function (p, j, G, V, Q, N) {
            if (!Q) {
              if (V === 0) {
                return cc.scaleTo(G, j);
              } else {
                return cc.sequence(cc.delayTime(V * G), cc.scaleTo(G - V * G, j));
              }
            }
            var Y = Q(N);
            if (V === 0) {
              return cc.scaleTo(G, j).easing(Y);
            } else {
              return cc.sequence(cc.delayTime(V * G), cc.scaleTo(G - V * G, j).easing(Y));
            }
          },
          getRotateAction: function (p, j, G, V, Q, N) {
            if (!Q) {
              if (V === 0) {
                return cc.rotateTo(G, -j);
              } else {
                return cc.sequence(cc.delayTime(V * G), cc.rotateTo(G - V * G, -j));
              }
            }
            var Y = Q(N);
            if (V === 0) {
              return cc.rotateTo(G, -j).easing(Y);
            } else {
              return cc.sequence(cc.delayTime(V * G), cc.rotateTo(G - V * G, -j).easing(Y));
            }
          },
          getFadeAction: function (p, j, G, V, Q, N) {
            if (!Q) {
              if (V === 0) {
                return cc.fadeTo(G, j);
              } else {
                return cc.sequence(cc.delayTime(V * G), cc.fadeTo(G - V * G, j));
              }
            }
            var Y = Q(N);
            if (V === 0) {
              return cc.fadeTo(G, j).easing(Y);
            } else {
              return cc.sequence(cc.delayTime(V * G), cc.fadeTo(G - V * G, j).easing(Y));
            }
          },
          getTintAction: function (p, j, G, V, Q, N) {
            if (!Q) {
              if (V === 0) {
                return cc.tintTo(G, j);
              } else {
                return cc.sequence(cc.delayTime(V * G), cc.tintTo(G - V * G, j));
              }
            }
            var Y = Q(N);
            if (V === 0) {
              return cc.tintTo(G, j).easing(Y);
            } else {
              return cc.sequence(cc.delayTime(V * G), cc.tintTo(G - V * G, j).easing(Y));
            }
          },
          _playParticleAction: function (j) {
            var G = this;
            var V = this.getLife(this.life, this.lifeVar);
            var Q = this.getSourceStartPosition(this.sourcePos, this.sourcePosVar);
            j.setPosition(Q);
            var N = this.getSpeed(this.speed, this.speedVar);
            var Y = this.getEmissionAngle(this.angle, this.angleVar);
            var W = [];
            if (this.emitterMode === D.LINEAR) {
              var q;
              var z = this.getSourceEndPositionLinear(Q, N, Y, V);
              W.push(this.getMoveAction(j.position, z, V, (q = k[this.particleMovementEasing]) == null ? undefined : q.proto, this.particleMovementEasingParam));
            } else if (this.emitterMode === D.GRAVITY) {
              var M;
              var E = this.getSourceEndPositionGravity(Q, N, Y, V, this.gravityVec, this.gravityVecVar);
              W.push(this.getBezierAction(j.position, E, V, (M = k[this.particleMovementEasing]) == null ? undefined : M.proto, this.particleMovementEasingParam));
            }
            var F;
            var H = j.scale = this.getSourceStartScale(this.startScale, this.startScaleVar);
            var w = this.getSourceEndScale(H, this.endScale, this.endScaleVar, this.endScaleIsFactor);
            if (H !== w && this.scaleDelayRatio < 1) {
              W.push(this.getScaleAction(H, w, V, this.scaleDelayRatio, (F = k[this.scaleEasing]) == null ? undefined : F.proto, this.scaleEasingParam));
            }
            var U;
            var P = j.angle = this.getSourceStartSpinAngle(-this.startSpin, -this.startSpinVar);
            var X = this.getSourceEndSpinAngle(P, -this.endSpin, -this.endSpinVar, this.endSpinLocked);
            if (P !== X && this.spinDelayRatio < 1) {
              W.push(this.getRotateAction(P, X, V, this.spinDelayRatio, (U = k[this.spinEasing]) == null ? undefined : U.proto, this.spinEasingParam));
            }
            var J;
            var Z0 = j.opacity = this.getSourceStartAlpha(this.startAlpha, this.startAlphaVar);
            var Z1 = this.getSourceEndAlpha(Z0, this.endAlpha, this.endAlphaVar);
            if (Z0 !== Z1 && this.alphaDelayRatio < 1) {
              W.push(this.getFadeAction(Z0, Z1, V, this.alphaDelayRatio, (J = k[this.alphaEasing]) == null ? undefined : J.proto, this.alphaEasingParam));
            }
            if (!this.startColor.equals(cc.Color.WHITE) || !this.startColorVar.equals(cc.Color.BLACK) || !this.endColor.equals(cc.Color.WHITE) || !this.endColorVar.equals(cc.Color.BLACK)) {
              var Z2;
              var Z3 = j.color = this.getSourceStartColor(this.startColor, this.startColorVar);
              var Z4 = this.getSourceEndColor(Z3, this.endColor, this.endColorVar);
              if (!Z3.equals(Z4) && this.colorDelayRatio < 1) {
                W.push(this.getTintAction(Z3, Z4, V, this.colorDelayRatio, (Z2 = k[this.colorEasing]) == null ? undefined : Z2.proto, this.colorEasingParam));
              }
            }
            var Z5;
            var Z6 = W.length;
            if (Z6 > 1) {
              Z5 = cc.sequence(cc.spawn(W), cc.callFunc(function () {
                G._particleSelfDestruct(j);
              }, this));
            } else if (Z6 === 1) {
              Z5 = cc.sequence(W[0], cc.callFunc(function () {
                G._particleSelfDestruct(j);
              }, this));
            }
            this._liveParticles.push(j);
            this.node.addChild(j);
            j.runAction(Z5);
          },
          _accelerationDistance: function (p, j) {
            u ||= true;
            return p * 0.5 * j * j;
          },
          _particleSelfDestruct: function (p) {
            var j = this._liveParticles;
            var G = j.indexOf(p);
            if (G > -1) {
              j.splice(G, 1);
            }
            this.nodePool.put(p);
          }
        });
        g.default = c;
        K.exports = g.default;
        cc._RF.pop();
      }
    }, {
      AnimParticleSystemUtils: "AnimParticleSystemUtils"
    }],
    AppStateMachine: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "99b03/f499C5qBVb5FCdxDf", "AppStateMachine")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T;
        var x = I("AppState");
        (function (D) {
          D[D.Ready = 0] = "Ready";
          D[D.Running = 1] = "Running";
          D[D.Exiting = 2] = "Exiting";
          D[D.End = 3] = "End";
        })(T ||= {});
        var L = function () {
          function D(p) {
            this._previousAppState = undefined;
            this._currentAppState = undefined;
            this._stateMachineStatus = T.Ready;
            this._getNextAppState = p.getNextAppState;
            this._exitAppStateMachineCallback = p.exitAppStateMachineCallback;
          }
          var k = {
            get: function () {
              return this._previousAppState;
            },
            enumerable: false,
            configurable: true
          };
          var C = {
            get: function () {
              return this._currentAppState;
            },
            enumerable: false,
            configurable: true
          };
          var u = {
            get: function () {
              return this._stateMachineStatus === T.Ready;
            },
            enumerable: false,
            configurable: true
          };
          var c = {
            get: function () {
              return this._stateMachineStatus === T.Running;
            },
            enumerable: false,
            configurable: true
          };
          Object.defineProperty(D.prototype, "previousAppState", k);
          Object.defineProperty(D.prototype, "currentAppState", C);
          Object.defineProperty(D.prototype, "isStateReady", u);
          Object.defineProperty(D.prototype, "isStateRunning", c);
          Object.defineProperty(D.prototype, "isStateExiting", {
            get: function () {
              return this._stateMachineStatus === T.Exiting;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(D.prototype, "isStateEnd", {
            get: function () {
              return this._stateMachineStatus === T.End;
            },
            enumerable: false,
            configurable: true
          });
          D.prototype.setExitAppStateMachineCallback = function (p) {
            this._exitAppStateMachineCallback = p;
          };
          D.prototype.run = function () {
            if (this.isStateReady) {
              this._stateMachineStatus = T.Running;
              this._evaluateState();
            }
          };
          D.prototype.exit = function (p) {
            if (!this.isStateExiting && !this.isStateEnd) {
              this._stateMachineStatus = T.Exiting;
              var j = this.currentAppState;
              if (j) {
                j.setExitCallback(this._exit.bind(this));
                j.forceExit(p);
              }
            }
          };
          D.prototype.dispatchEvent = function (p, j) {
            if (this.isStateRunning) {
              var l = this.currentAppState;
              if (l && l.dispatchEvent) {
                l.dispatchEvent(p, j);
              }
            }
          };
          D.prototype.destroy = function () {
            this._exitAppStateMachineCallback = undefined;
            this._getNextAppState = undefined;
          };
          D.prototype._evaluateState = function () {
            var p = this;
            if (this.isStateRunning) {
              var j = this._getNextAppState();
              this._previousAppState = this.currentAppState;
              this._currentAppState = undefined;
              switch (true) {
                case j instanceof x.default:
                  var G = this._currentAppState = j;
                  G.setExitCallback(this._evaluateState.bind(this));
                  G.run();
                  break;
                case typeof j == "object":
                  var V = j;
                  var Q = V.nextState;
                  var N = V.enterStateTransition;
                  var Y = V.exitStateTransition;
                  this._currentAppState = Q;
                  Q.setExitCallback(function () {
                    if (Y) {
                      Y(function () {
                        if (p.isStateRunning) {
                          p._evaluateState();
                        }
                      });
                    } else {
                      p._evaluateState();
                    }
                  });
                  if (N) {
                    N(function () {
                      if (p.isStateRunning) {
                        Q.run();
                      }
                    });
                  } else {
                    Q.run();
                  }
                  break;
                case j === undefined:
                  this._stateMachineStatus = T.Exiting;
                  this._exit();
              }
            }
          };
          D.prototype._exit = function () {
            if (!this.isStateEnd) {
              this._stateMachineStatus = T.End;
              var p = this._exitAppStateMachineCallback;
              this._exitAppStateMachineCallback = undefined;
              if (p) {
                p();
              }
            }
          };
          return D;
        }();
        K.default = L;
        cc._RF.pop();
      }
    }, {
      AppState: "AppState"
    }],
    AppState: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "d2312uy7dZCAaD3zr1W6wqW", "AppState")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        K.APPStateStatus = undefined;
        var T;
        var x = I("Utils");
        var L = I("GeneralSlotTemplate");
        (function (k) {
          k[k.Ready = 0] = "Ready";
          k[k.Running = 1] = "Running";
          k[k.Exiting = 2] = "Exiting";
          k[k.End = 3] = "End";
        })(T = K.APPStateStatus ||= {});
        var D = function () {
          function k(p, j, l) {
            this.name = "App State";
            this.appStateStatus = T.Ready;
            this.setDataSource(p);
            this.setControllerPool(j);
            this.setExitCallback(l);
            this.onReady();
          }
          var C = {
            get: function () {
              return this.appStateStatus === T.Ready;
            },
            enumerable: false,
            configurable: true
          };
          var u = {
            get: function () {
              return this.appStateStatus === T.Running;
            },
            enumerable: false,
            configurable: true
          };
          var c = {
            get: function () {
              return this.appStateStatus === T.Exiting;
            },
            enumerable: false,
            configurable: true
          };
          k.prototype.eventListener = function () {};
          Object.defineProperty(k.prototype, "isStateReady", C);
          Object.defineProperty(k.prototype, "isStateRunning", u);
          Object.defineProperty(k.prototype, "isStateExiting", c);
          Object.defineProperty(k.prototype, "isStateEnd", {
            get: function () {
              return this.appStateStatus === T.End;
            },
            enumerable: false,
            configurable: true
          });
          k.prototype.setDataSource = function (p) {
            this.dataSource = p;
          };
          k.prototype.setControllerPool = function (p) {
            this.controllerPool = p;
          };
          k.prototype.setExitCallback = function (p) {
            this.finalCallback = p;
          };
          k.prototype.run = function () {
            this.appStateStatus = T.Running;
            this.onRun();
          };
          k.prototype.exit = function (p) {
            var j = this;
            if (!this.isStateExiting && !this.isStateEnd) {
              this.appStateStatus = T.Exiting;
              this.onExit(function () {
                if (p == null ? undefined : p.before) {
                  p.before();
                }
                var l = j.finalCallback;
                j.finalCallback = undefined;
                j.destroy();
                if (L.GSTConfig.disableStateExitDefer) {
                  j.appStateStatus = T.End;
                  if (l) {
                    l();
                  }
                  if (p == null ? undefined : p.after) {
                    p.after();
                  }
                } else {
                  x.deferCallback(true)(function () {
                    x.deferCallback(true)(function () {
                      j.appStateStatus = T.End;
                      if (l) {
                        l();
                      }
                      if (p == null ? undefined : p.after) {
                        p.after();
                      }
                    });
                  });
                }
              });
            }
          };
          k.prototype.forceExit = function (p) {
            var j = this;
            this.appStateStatus = T.Exiting;
            this.onForceExit(function () {
              if (p == null ? undefined : p.before) {
                p.before();
              }
              var l = j.finalCallback;
              j.finalCallback = undefined;
              j.destroy();
              if (L.GSTConfig.disableStateExitDefer) {
                j.appStateStatus = T.End;
                if (l) {
                  l();
                }
                if (p == null ? undefined : p.after) {
                  p.after();
                }
              } else {
                x.deferCallback(true)(function () {
                  x.deferCallback(true)(function () {
                    j.appStateStatus = T.End;
                    if (l) {
                      l();
                    }
                    if (p == null ? undefined : p.after) {
                      p.after();
                    }
                  });
                });
              }
            });
          };
          k.prototype.destroy = function () {
            var p = this;
            this.onDestroy(function () {
              p.dataSource = undefined;
              p.finalCallback = undefined;
              p.controllerPool = undefined;
            });
          };
          k.prototype.dispatchEvent = function (p, j) {
            this.eventListener(p, j);
          };
          return k;
        }();
        K.default = D;
        cc._RF.pop();
      }
    }, {
      GeneralSlotTemplate: "GeneralSlotTemplate",
      Utils: "Utils"
    }],
    Appearance: [function (Z, I) {
      'use strict';

      if (!cc._RF.push(I, "dec3c3clmFKpaYEDuWXqsW2", "Appearance")) {
        cc._RF.pop();
      }
    }, {}],
    AudioAdapterConstant: [function (K, g, T) {
      'use strict';

      if (!cc._RF.push(g, "a20c0AJc1VFmKnv1lBJKugX", "AudioAdapterConstant")) {
        Object.defineProperty(T, "__esModule", {
          value: true
        });
        T.MAX_INSTANCE_NUMBER = T.MAX_STACK_SOUND = T.DEFAULT_SPRITE = T.AUDIO_ADAPTER_STATE = T.AUDIO_ADAPTER_EVENT = undefined;
        T.AUDIO_ADAPTER_EVENT = {
          LOADED: "load",
          LOAD_ERROR: "loaderror",
          PLAY: "play",
          STOP: "stop",
          END: "end",
          PAUSE: "pause",
          RESUME: "resume",
          FADED: "fade",
          SEEK: "seek",
          PLAY_ERROR: "playerror",
          RATE: "rate",
          VOLUME: "volume",
          MUTE: "mute"
        };
        T.AUDIO_ADAPTER_STATE = {
          UNLOADED: "unloaded",
          LODING: "loading",
          LOADED: "loaded"
        };
        T.DEFAULT_SPRITE = "__default";
        T.MAX_STACK_SOUND = 50;
        T.MAX_INSTANCE_NUMBER = 24;
        cc._RF.pop();
      }
    }, {}],
    AudioAdapter: [function (R, K, g) {
      'use strict';

      if (!cc._RF.push(K, "5c3d2SrYLxJYqXl2p30apID", "AudioAdapter")) {
        Object.defineProperty(g, "__esModule", {
          value: true
        });
        var x;
        var L;
        var D = R("ResRC");
        var k = R("AudioAdapterConstant");
        var C = R("AdapterEventEmitter");
        var j = R("AudioFactory");
        x = 0;
        function G() {
          return ++x;
        }
        (function (Y) {
          Y._audio = "_audio";
        })(L ||= {});
        var V = {
          load: D.load,
          unload: D.release
        };
        var Q = V;
        var N = function () {
          function _Y(W) {
            var q = this;
            this._paused = false;
            this._sounds = Object.create(null);
            this._numberOfInstance = 0;
            this._state = k.AUDIO_ADAPTER_STATE.UNLOADED;
            this._pendingUnload = false;
            this.maxInstance = k.MAX_INSTANCE_NUMBER;
            this._src = W.src;
            this._volume = typeof W.volume == "number" ? W.volume : 1;
            this._rate = typeof W.rate == "number" ? W.rate : 1;
            this._mute = !!W.mute;
            this._loop = !!W.loop;
            this._sprite = W.sprite;
            this._loader = W.loader || Q;
            this.factory = W.soundFactory || new j.default();
            var S = W.eventEmitter || new C.default();
            this.on = function (z, f, A, M) {
              if (A == null || A in q._sounds != 0) {
                S.on(z, f, A, M);
              }
            };
            this.off = S.off.bind(S);
            this.once = function (z, f, A) {
              if (A == null || A in q._sounds != 0) {
                S.once(z, f, A);
              }
            };
            this._emit = S.emit.bind(S);
            if (W.preload) {
              setTimeout(this.load.bind(this), 0);
            }
          }
          _Y.prototype.load = function () {
            if (this._state !== k.AUDIO_ADAPTER_STATE.LOADED && this._state !== k.AUDIO_ADAPTER_STATE.LODING) {
              this._loader.load(this._src, this._onLoadComplete.bind(this));
              this._state = k.AUDIO_ADAPTER_STATE.LODING;
            }
          };
          _Y.prototype._onLoadComplete = function (W, q) {
            if (W) {
              this._emit(k.AUDIO_ADAPTER_EVENT.LOAD_ERROR, undefined, W.message || W);
              this._pendingUnload = false;
              this._state = k.AUDIO_ADAPTER_STATE.UNLOADED;
            } else {
              this._state = k.AUDIO_ADAPTER_STATE.LOADED;
              if (q) {
                this._clip = q[L._audio];
              }
              this._emit(k.AUDIO_ADAPTER_EVENT.LOADED);
              if (this._pendingUnload) {
                this.unload();
              }
            }
          };
          _Y.prototype.unload = function () {
            if (this._state !== k.AUDIO_ADAPTER_STATE.UNLOADED) {
              if (this._state !== k.AUDIO_ADAPTER_STATE.LODING) {
                if (this._numberOfInstance !== 0) {
                  this.stop();
                }
                this._clip = undefined;
                this._loader.unload(this._src);
                this._pendingUnload = false;
                this._state = k.AUDIO_ADAPTER_STATE.UNLOADED;
              } else {
                this._pendingUnload = true;
              }
            }
          };
          _Y.prototype.play = function (W) {
            var q = this;
            if (this._state !== k.AUDIO_ADAPTER_STATE.LOADED) {
              throw Error("Audio Adapter:: play : audio not yet loaded!");
            }
            var S = typeof W == "number";
            var z = !S && typeof W == "string";
            if (this._paused || S) {
              this.resume(W);
              if (S) {
                return W;
              } else {
                return -1;
              }
            }
            var A = this._sounds;
            if (this._numberOfInstance >= this.maxInstance) {
              var M = undefined;
              for (var E in A) {
                M = E;
                break;
              }
              var F = this._sounds[M];
              F.stop();
              delete this._sounds[M];
              this._numberOfInstance--;
              this.off(M);
              this.addAudioToPool(F);
            }
            var b = this.getAudioFromPool();
            var H = {
              loop: this._loop,
              muted: this._mute,
              volume: this._volume,
              rate: this._rate
            };
            b.reset(H);
            var w = z && this._sprite ? this._sprite[W] : undefined;
            var U = 0;
            var B = 0;
            if (w) {
              U = w.from;
              B = w.to - U;
            }
            var P = G();
            b.play(U, B);
            b.once(shell.WebAudioEvent.ENDED, function () {
              if (!q._sounds[P]) {
                throw Error("AudioAdapter :: play : audio doesn't exist on this adapter anymore");
              }
              delete q._sounds[P];
              q._numberOfInstance--;
              q._emit(k.AUDIO_ADAPTER_EVENT.END, P, undefined, true);
              q.addAudioToPool(b);
            });
            A[P] = b;
            this._numberOfInstance++;
            this._emit(k.AUDIO_ADAPTER_EVENT.PLAY, P);
            return P;
          };
          _Y.prototype.stop = function (W) {
            if (this._state !== k.AUDIO_ADAPTER_STATE.LOADED) {
              throw Error("Audio Adapter :: stop : Attemp to stop not loaded audio!");
            }
            if (this._numberOfInstance !== 0) {
              if (typeof W == "number") {
                if (S = this._sounds[W]) {
                  delete this._sounds[W];
                  this._numberOfInstance--;
                  S.stop();
                  this._emit(k.AUDIO_ADAPTER_EVENT.STOP, W, undefined, true);
                  this.addAudioToPool(S);
                }
              } else {
                for (var q in this._sounds) {
                  var S;
                  (S = this._sounds[q]).stop();
                  this._emit(k.AUDIO_ADAPTER_EVENT.STOP, +q, undefined, true);
                  this.addAudioToPool(S);
                }
                this._sounds = Object.create(null);
                this._numberOfInstance = 0;
              }
            }
          };
          _Y.prototype.pause = function (W) {
            if (typeof W == "number") {
              if ((S = this._sounds[W]) && S.playing) {
                S.pause();
                this._emit(k.AUDIO_ADAPTER_EVENT.PAUSE, W);
              }
            } else {
              this._paused = true;
              if (this._numberOfInstance === 0) {
                return;
              }
              for (var q in this._sounds) {
                var S;
                if ((S = this._sounds[q]).playing) {
                  S.pause();
                  this._emit(k.AUDIO_ADAPTER_EVENT.PAUSE, +q);
                }
              }
            }
          };
          _Y.prototype.resume = function (W) {
            if (typeof W == "number") {
              if ((S = this._sounds[W]) && S.paused) {
                S.resume();
                this._emit(k.AUDIO_ADAPTER_EVENT.RESUME, W);
              }
            } else {
              this._paused = false;
              if (this._numberOfInstance === 0) {
                return;
              }
              for (var q in this._sounds) {
                var S;
                if ((S = this._sounds[q]).paused) {
                  S.resume();
                  this._emit(k.AUDIO_ADAPTER_EVENT.RESUME, +q);
                }
              }
            }
          };
          _Y.prototype.setMute = function (W, q) {
            if (typeof q == "number") {
              if ((z = this._sounds[q]) && z.muted !== W) {
                z.muted = W;
                this._emit(k.AUDIO_ADAPTER_EVENT.MUTE, q);
              }
            } else {
              this._mute = W;
              if (this._numberOfInstance === 0) {
                return;
              }
              for (var S in this._sounds) {
                var z;
                if ((z = this._sounds[S]).muted !== W) {
                  z.muted = W;
                  this._emit(k.AUDIO_ADAPTER_EVENT.MUTE, +S);
                }
              }
            }
          };
          _Y.prototype.isMute = function (W) {
            if (typeof W == "number") {
              var q = this._sounds[W];
              return !!q && q.muted;
            }
            return this._mute;
          };
          _Y.prototype.setVolume = function (W, q) {
            if (typeof q == "number") {
              if ((z = this._sounds[q]) && z.volume !== W) {
                z.volume = W;
                this._emit(k.AUDIO_ADAPTER_EVENT.VOLUME, q);
              }
            } else {
              this._volume = W;
              if (this._numberOfInstance === 0) {
                return;
              }
              for (var S in this._sounds) {
                var z;
                if ((z = this._sounds[S]).volume !== W) {
                  z.volume = W;
                  this._emit(k.AUDIO_ADAPTER_EVENT.VOLUME, +S);
                }
              }
            }
          };
          _Y.prototype.getVolume = function (W) {
            if (typeof W == "number") {
              var q = this._sounds[W];
              if (q) {
                return q.volume;
              } else {
                return 0;
              }
            }
            return this._volume;
          };
          _Y.prototype.getInstantVolume = function (W) {
            var q = this._sounds[W];
            if (q) {
              return q.instantVolume;
            } else {
              return 0;
            }
          };
          _Y.prototype.fade = function (W, q, S, z) {
            var f = this;
            if (this._state !== k.AUDIO_ADAPTER_STATE.LOADED) {
              throw Error("Audio Adpater :: fade : Audio not loaded!");
            }
            if (this._numberOfInstance !== 0) {
              if (typeof z == "number") {
                var A = this._sounds[z];
                if (A) {
                  A.off(shell.WebAudioEvent.FADED);
                  A.once(shell.WebAudioEvent.FADED, function () {
                    f._emit(k.AUDIO_ADAPTER_EVENT.FADED, z);
                  });
                  A.fade(W, q, S);
                }
              } else {
                this._volume = q;
                function M(h) {
                  var b = E._sounds[h];
                  b.off(shell.WebAudioEvent.FADED);
                  b.once(shell.WebAudioEvent.FADED, function () {
                    f._emit(k.AUDIO_ADAPTER_EVENT.FADED, +h);
                  });
                  b.fade(W, q, S);
                }
                var E = this;
                for (var F in this._sounds) {
                  M(F);
                }
              }
            }
          };
          _Y.prototype.setLoop = function (W, q) {
            if (typeof q == "number") {
              if (z = this._sounds[q]) {
                z.loop = W;
              }
            } else {
              this._loop = W;
              if (this._numberOfInstance === 0) {
                return;
              }
              for (var S in this._sounds) {
                var z;
                (z = this._sounds[S]).loop = W;
              }
            }
          };
          _Y.prototype.isLoop = function (W) {
            if (typeof W == "number") {
              var q = this._sounds[W];
              return !!q && q.loop;
            }
            return this._loop;
          };
          _Y.prototype.setRate = function (W, q) {
            if (typeof q == "number") {
              if (z = this._sounds[q]) {
                z.rate = W;
              }
            } else {
              this._rate = W;
              if (this._numberOfInstance === 0) {
                return;
              }
              for (var S in this._sounds) {
                var z;
                (z = this._sounds[S]).rate = W;
              }
            }
          };
          _Y.prototype.getRate = function (W) {
            if (typeof W == "number") {
              var q = this._sounds[W];
              if (q) {
                return q.rate;
              }
            }
            return this._rate;
          };
          _Y.prototype.isPlaying = function (W) {
            if (typeof W == "number") {
              var q = this._sounds[W];
              return q !== undefined && q.playing;
            }
            return this._numberOfInstance > 0 && this._paused === false;
          };
          _Y.prototype.getDuration = function (W) {
            if (typeof W == "number") {
              var q = this._sounds[W];
              if (q) {
                return q.duration;
              }
            } else if (this._clip) {
              return this._clip.duration;
            }
            return 0;
          };
          _Y.prototype.getState = function () {
            return this._state;
          };
          _Y.prototype.getCurrentTime = function (W) {
            var q = this._sounds[W];
            if (q) {
              return q.currentTime;
            } else {
              return 0;
            }
          };
          _Y.prototype.seek = function (W, q) {
            var S = this;
            if (this._state !== k.AUDIO_ADAPTER_STATE.LOADED) {
              throw Error("Audio Adapter:: seek : audio not yet loaded!");
            }
            if (this._numberOfInstance !== 0) {
              if (typeof q == "number") {
                var z = this._sounds[q];
                if (z) {
                  z.once(shell.WebAudioEvent.SEEK, function () {
                    S._emit(k.AUDIO_ADAPTER_EVENT.SEEK, q);
                  });
                  z.seek(W);
                  z.off(shell.WebAudioEvent.SEEK);
                }
              } else {
                if (this._numberOfInstance === 0) {
                  return;
                }
                this._paused = false;
                var f = __assign({}, this._sounds);
                function A(E) {
                  var F = f[E];
                  F.once(shell.WebAudioEvent.SEEK, function () {
                    S._emit(k.AUDIO_ADAPTER_EVENT.SEEK, +E);
                  });
                  F.seek(W);
                  F.off(shell.WebAudioEvent.SEEK);
                }
                for (var M in f) {
                  A(M);
                }
              }
            }
          };
          _Y.prototype.getAudioFromPool = function () {
            return this.factory.get() || new shell.WebAudio(this._clip);
          };
          _Y.prototype.addAudioToPool = function (W) {
            W.reset();
            W.removeAll();
            if (!this.factory.put(W)) {
              W.destroy();
            }
          };
          _Y.prototype.stereo = function () {};
          _Y.getNewId = G;
          return _Y;
        }();
        g.default = N;
        cc._RF.pop();
      }
    }, {
      AdapterEventEmitter: "AdapterEventEmitter",
      AudioAdapterConstant: "AudioAdapterConstant",
      AudioFactory: "AudioFactory",
      ResRC: "ResRC"
    }],
    AudioAssetConfig: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "a2c0633AVRPK7FGJDEUOXcO", "AudioAssetConfig")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        K.getAudioAssetConfig = undefined;
        var T = I("ResourceLoader");
        var x = I("AudioManager");
        var L = [];
        K.getAudioAssetConfig = function () {
          if (L.length > 0) {
            return L;
          } else {
            Object.keys(x.GeneralAudioPool).forEach(function (D) {
              L.push({
                name: D,
                type: T.LoaderType.CUSTOM,
                loadFunc: function (k, C) {
                  x.loadAudio(x.GeneralAudioPool[D], function (u) {
                    if (u) {
                      C(u);
                    }
                    k(undefined);
                  });
                }
              });
            });
            L.push({
              name: "general_audio",
              type: T.LoaderType.CUSTOM,
              loadFunc: function (D, k) {
                x.loadAudio(x.generalGameAudio, function (C) {
                  if (C) {
                    k(C);
                  }
                  D(undefined);
                });
              }
            });
            return L;
          }
        };
        cc._RF.pop();
      }
    }, {
      AudioManager: "AudioManager",
      ResourceLoader: "ResourceLoader"
    }],
    AudioConstant: [function (Z3, Z4, Z5) {
      'use strict';

      if (!cc._RF.push(Z4, "2528cpWcqpNeZKX9ceo7MWe", "AudioConstant")) {
        Object.defineProperty(Z5, "__esModule", {
          value: true
        });
        Z5.GENERAL_AUDIO = undefined;
        Z5.GENERAL_AUDIO = {
          fastspinExit: {
            from: 0,
            to: 1.805375,
            key: "fastspinExit"
          },
          fastspinStart: {
            from: 2,
            to: 5.487,
            key: "fastspinStart"
          },
          fastspinStop: {
            from: 6,
            to: 6.875021,
            key: "fastspinStop"
          },
          featureBuyBtn: {
            from: 7,
            to: 7.838458,
            key: "featureBuyBtn"
          },
          featureBuyCancel: {
            from: 8,
            to: 8.449521,
            key: "featureBuyCancel"
          },
          featureBuyHover: {
            from: 9,
            to: 10.294271,
            key: "featureBuyHover"
          },
          featureBuyStart: {
            from: 11,
            to: 14.132854,
            key: "featureBuyStart"
          },
          fsIntroChange: {
            from: 15,
            to: 17.485458,
            key: "fsIntroChange"
          },
          fsIntroEnd: {
            from: 18,
            to: 19.007167,
            key: "fsIntroEnd"
          },
          fsIntroShift: {
            from: 20,
            to: 21.296979,
            key: "fsIntroShift"
          },
          fsIntroStart: {
            from: 22,
            to: 23.768917,
            key: "fsIntroStart"
          },
          fsSpin: {
            from: 24,
            to: 25.252146,
            key: "fsSpin"
          },
          fsTrans: {
            from: 26,
            to: 32.520854,
            key: "fsTrans"
          },
          fsWonRemainingIncrease: {
            from: 33,
            to: 34.048458,
            key: "fsWonRemainingIncrease"
          },
          fsWonTitle: {
            from: 35,
            to: 39.946354,
            key: "fsWonTitle"
          },
          heartBeat: {
            from: 40,
            to: 40.86675,
            key: "heartBeat"
          },
          heartBeatNoise: {
            from: 41,
            to: 44.515125,
            key: "heartBeatNoise"
          },
          heartBeatSlowdrop: {
            from: 45,
            to: 45.643229,
            key: "heartBeatSlowdrop"
          },
          multiFly: {
            from: 46,
            to: 47.290646,
            key: "multiFly"
          },
          multiFlyBig: {
            from: 48,
            to: 49.290646,
            key: "multiFlyBig"
          },
          multiUp1: {
            from: 50,
            to: 50.907042,
            key: "multiUp1"
          },
          multiUp2: {
            from: 51,
            to: 52.082042,
            key: "multiUp2"
          },
          multiUp3: {
            from: 53,
            to: 54.168271,
            key: "multiUp3"
          },
          multiUp4: {
            from: 55,
            to: 56.451583,
            key: "multiUp4"
          },
          prizeInfobarTotalwin: {
            from: 57,
            to: 58.260958,
            key: "prizeInfobarTotalwin"
          },
          prizeInfobarTotalwinMed: {
            from: 59,
            to: 63.666187,
            key: "prizeInfobarTotalwinMed"
          },
          prizeInfobarTotalwinMedCoins: {
            from: 64,
            to: 65.546375,
            key: "prizeInfobarTotalwinMedCoins"
          },
          prizeInfobarTotalwinMedEnd: {
            from: 66,
            to: 68.670875,
            key: "prizeInfobarTotalwinMedEnd"
          },
          prizeInfobarTotalwinMedMain: {
            from: 69,
            to: 71,
            key: "prizeInfobarTotalwinMedMain"
          },
          prizeInfobarUpgrade: {
            from: 71,
            to: 73.040979,
            key: "prizeInfobarUpgrade"
          },
          prizeSmallwin: {
            from: 74,
            to: 75.808354,
            key: "prizeSmallwin"
          },
          prizeSmallwinMultiplied: {
            from: 76,
            to: 78.321375,
            key: "prizeSmallwinMultiplied"
          },
          prizeSmallwinMultipliedCoins: {
            from: 79,
            to: 81.040979,
            key: "prizeSmallwinMultipliedCoins"
          },
          prizeSmallwinMultipliedCrowd1: {
            from: 82,
            to: 84.228667,
            key: "prizeSmallwinMultipliedCrowd1"
          },
          prizeSmallwinMultipliedCrowd2: {
            from: 85,
            to: 87.375,
            key: "prizeSmallwinMultipliedCrowd2"
          },
          prizeSmallwinMultipliedCrowd3: {
            from: 88,
            to: 90.187521,
            key: "prizeSmallwinMultipliedCrowd3"
          },
          scatterWinHighlight: {
            from: 91,
            to: 98.604167,
            key: "scatterWinHighlight"
          },
          spinActiveLoop: {
            from: 99,
            to: 99.083333,
            key: "spinActiveLoop"
          },
          spinBtn: {
            from: 100,
            to: 101,
            key: "spinBtn"
          },
          spinStop: {
            from: 101,
            to: 101.140125,
            key: "spinStop"
          },
          spinStopQuick: {
            from: 102,
            to: 102.729708,
            key: "spinStopQuick"
          },
          symCollapse: {
            from: 103,
            to: 103.154208,
            key: "symCollapse"
          },
          symScatter: {
            from: 104,
            to: 104.548958,
            key: "symScatter"
          },
          symShrink: {
            from: 105,
            to: 106.772937,
            key: "symShrink"
          },
          symWild: {
            from: 107,
            to: 107.916667,
            key: "symWild"
          },
          uiCollect: {
            from: 108,
            to: 109.038604,
            key: "uiCollect"
          },
          uiInfo: {
            from: 110,
            to: 110.125,
            key: "uiInfo"
          },
          uiStart: {
            from: 111,
            to: 112.026208,
            key: "uiStart"
          },
          __duration: 113.03999999999999
        };
        cc._RF.pop();
      }
    }, {}],
    AudioFactory: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "bf4b5cdVNdI7rQp2MPM3CWN", "AudioFactory")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("AudioAdapterConstant");
        var x = function () {
          function L() {
            this.maxStackSound = T.MAX_STACK_SOUND;
            this._pool = [];
          }
          L.prototype.put = function (D) {
            return this._pool.length < this.maxStackSound && (this._pool.push(D), true);
          };
          L.prototype.get = function () {
            return this._pool.pop();
          };
          L.prototype.size = function () {
            return this._pool.length;
          };
          L.prototype.destroy = function () {
            this._pool.forEach(function (D) {
              D.destroy();
            });
            this._pool = [];
          };
          return L;
        }();
        K.default = x;
        cc._RF.pop();
      }
    }, {
      AudioAdapterConstant: "AudioAdapterConstant"
    }],
    AudioManager: [function (x, L, D) {
      'use strict';

      if (!cc._RF.push(L, "9fcddj5MjVCo4eqgr0JYxNU", "AudioManager")) {
        Object.defineProperty(D, "__esModule", {
          value: true
        });
        D.setWinCount = D.getWinCount = D.fadeAudio = D.setAudioVolume = D.stopAudio = D.playAudio = D.audioId = D.isAudioPlaying = D.generalGameAudio = D.updatePlayRate = D.crossFadeAudio = D.toggleEffectMuted = D.toggleMusicMuted = D.GeneralAudioPool = D.releaseAudioPool = D.releaseAudio = D.loadAudio = D.toggleAudioGameStarted = D.unregisterAudio = D.registerAudio = D.init = D.AUDIO_TYPE = undefined;
        var j = x("SettingMenuHelper");
        var G = x("NoSoundAdapter");
        var V = x("GameAudioAdapter");
        var Q = x("AudioConstant");
        var N = x("RtConfig");
        var Y = Object.create(null);
        D.GeneralAudioPool = Y;
        var W = Object.create(null);
        var q = Object.create(null);
        D.audioId = q;
        var F = [];
        var H = {
          SOUND: 0,
          MUSIC: 1
        };
        D.AUDIO_TYPE = H;
        var w = false;
        var U = false;
        var X = 0;
        var J = "audio/";
        Y.bgm_mg = undefined;
        Y.bgm_fs = undefined;
        Y.bgm_bigwin_end = undefined;
        Y.bgm_bigwin_main = undefined;
        Y.bgm_totalwin_end = undefined;
        Y.bgm_totalwin_main = undefined;
        Y.bgm_intro = undefined;
        var Z0;
        var Z1 = ["bgm_mg", "bgm_fs"];
        D.generalGameAudio = Z0;
        D.init = function () {
          var ZR;
          Object.keys(ZR = Y).forEach(function (ZK) {
            var Zg = Z1.includes(ZK) ? H.MUSIC : H.SOUND;
            ZR[ZK] = Z2(ZK, Zg);
          });
          Y.bgm_mg.setLoop(true);
          Y.bgm_fs.setLoop(true);
          cc.game.on(cc.game.EVENT_HIDE, Zd);
          cc.game.on(cc.game.EVENT_SHOW, ZO);
          D.generalGameAudio = Z0 = Z3("general_audio", H.SOUND, Q.GENERAL_AUDIO);
          Z9(true);
          ZZ(true);
        };
        D.registerAudio = function (ZR, ZK) {
          var Zg = ZK ? H.MUSIC : H.SOUND;
          if (w) {
            var ZT = j.settingMenuHelper.soundEnable;
            ZR.setMute(ZT);
          }
          W[Zg] ||= [];
          W[Zg].push(ZR);
          return Zg;
        };
        D.unregisterAudio = function (ZR, ZK) {
          var Zg = W[ZK];
          var ZT = Zg.indexOf(ZR);
          if (ZT === -1) {
            throw Error("Audio Manager :: unRegisterAudio : audio not found");
          }
          Zg.splice(ZT, 1);
        };
        D.setAudioVolume = function (ZR, ZK) {
          if (!q[ZR] || !!Z0.isPlaying(q[ZR])) {
            if (Z0) {
              Z0.setVolume(ZK, q[ZR]);
            }
          }
        };
        D.fadeAudio = function (ZR, ZK, Zg, ZT) {
          if (!q[ZR] || !!Z0.isPlaying(q[ZR])) {
            if (Z0) {
              Z0.fade(ZK, Zg, ZT, q[ZR]);
            }
          }
        };
        D.isAudioPlaying = Z6;
        D.playAudio = Z7;
        D.stopAudio = function (ZR, ZK = Z0) {
          if (Z6(ZR, ZK) && ZK) {
            ZK.stop(q[ZR]);
          }
        };
        D.toggleAudioGameStarted = function () {
          w = true;
          Z9(!j.settingMenuHelper.soundEnable);
          ZZ(!j.settingMenuHelper.soundEnable);
        };
        D.toggleMusicMuted = Z9;
        D.toggleEffectMuted = ZZ;
        D.crossFadeAudio = function (ZR, ZK, Zg = 1) {
          ZK.setVolume(0);
          ZK.play();
          ZK.fade(0, Zg, 1000);
          if (ZR.getVolume() === 0) {
            ZR.stop();
          } else {
            ZR.fade(ZR.getVolume(), 0, 1000);
            ZR.once("fade", function () {
              ZR.stop();
            });
          }
        };
        D.updatePlayRate = function (ZR) {
          for (var ZK in W) {
            if (W[ZK]) {
              var Zg = W[ZK];
              for (var ZT = 0, Zx = Zg.length; ZT < Zx; ZT++) {
                Zg[ZT].setRate(ZR);
              }
            }
          }
        };
        D.loadAudio = function (ZR, ZK) {
          function Zg() {
            ZR.off("loaderror", ZT);
            if (ZK) {
              ZK();
            }
          }
          function ZT(Zx, ZL) {
            ZR.off("load", Zg);
            if (ZK) {
              ZK(ZL, Zx);
            }
          }
          ZR.once("load", Zg);
          ZR.once("loaderror", ZT);
          return ZR.load();
        };
        D.releaseAudioPool = function (ZR) {
          Object.keys(ZR).forEach(function (ZK) {
            ZI(ZR[ZK]);
          });
        };
        D.releaseAudio = ZI;
        D.setWinCount = function (ZR) {
          X = ZR;
        };
        D.getWinCount = function () {
          return X;
        };
        cc._RF.pop();
      }
      function Z2(ZR, ZK = H.SOUND) {
        var Zg = {
          preload: false,
          src: Z4("mp3/" + ZR),
          mute: true
        };
        if (N.cs_Launch.noAudio === "1") {
          return new G.default(Zg);
        } else {
          return new V.default(Zg, ZK);
        }
      }
      function Z3(ZR, ZK = H.SOUND, Zg) {
        var ZT = {
          preload: false,
          src: Z4("mp3/" + ZR),
          mute: true,
          sprite: Zg
        };
        if (N.cs_Launch.noAudio === "1") {
          return new G.default(ZT);
        } else {
          return new V.default(ZT, ZK);
        }
      }
      function Z4(ZR) {
        return J + ZR;
      }
      function Z5(ZR, ZK, Zg, ZT, Zx) {
        if (ZR.hasOwnProperty(Zg)) {
          if (Zx) {
            if (ZK) {
              ZK.play(q[Zg]);
            }
          } else {
            q[Zg] = ZK && ZK.play(Zg);
            if (ZT && ZK) {
              ZK.setLoop(true, q[Zg]);
            }
          }
        }
      }
      function Z6(ZR, ZK = Z0) {
        return q[ZR] && ZK.isPlaying(q[ZR]);
      }
      function Z7(ZR, ZK, Zg) {
        Z5(Q.GENERAL_AUDIO, Z0, ZR, ZK, Zg);
      }
      function Z8(ZR, ZK = Z0) {
        if (Z6(ZR, ZK) && ZK) {
          ZK.pause(q[ZR]);
        }
      }
      function Z9(ZR = false) {
        if (W[H.MUSIC]) {
          W[H.MUSIC].map(function (ZK) {
            ZK.setMute(ZR);
          });
        }
      }
      function ZZ(ZR = false) {
        if (W[H.SOUND]) {
          W[H.SOUND].map(function (ZK) {
            ZK.setMute(ZR);
          });
        }
      }
      function ZI(ZR) {
        return ZR.unload();
      }
      function Zd() {
        if (!U) {
          U = true;
          Object.keys(Y).forEach(function (ZR) {
            var ZK = Y[ZR];
            if (ZK.isPlaying()) {
              ZK.pause();
              F.push(ZK);
            }
          });
          Object.keys(Q.GENERAL_AUDIO).forEach(function (ZR) {
            if (Z6(ZR, Z0)) {
              Z8(ZR, Z0);
              F.push(ZR);
            }
          });
        }
      }
      function ZO() {
        if (U) {
          U = false;
          for (var ZR = 0, ZK = F.length; ZR < ZK; ZR++) {
            var Zg = F[ZR];
            if (Q.GENERAL_AUDIO.hasOwnProperty(Zg)) {
              Z7(Zg, false, true);
            } else if (Zg.play) {
              Zg.play();
            }
          }
          F.length = 0;
        }
      }
    }, {
      AudioConstant: "AudioConstant",
      GameAudioAdapter: "GameAudioAdapter",
      NoSoundAdapter: "NoSoundAdapter",
      RtConfig: "RtConfig",
      SettingMenuHelper: "SettingMenuHelper"
    }],
    AutoSpinHandler: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "6a62eVFmd1Ng5ghvfVXBlUq", "AutoSpinHandler")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        K.exitAutoSpin = K.decrementAutoSpinCount = K.resetAutoSpinCount = K.startAutoSpin = K.getAutoSpinCount = K.shouldAutoSpin = undefined;
        var T = I("GameEventHandler");
        var x = -1;
        K.shouldAutoSpin = function () {
          return x > 0;
        };
        K.getAutoSpinCount = function () {
          return x;
        };
        K.startAutoSpin = function (D, k, C) {
          x = D;
          k.enterAutoSpinMode(D, C);
          T.emitAutoplayStarted(function () {
            L(k);
          });
        };
        K.resetAutoSpinCount = function () {
          x = -1;
        };
        K.decrementAutoSpinCount = function (D) {
          x -= 1;
          D.updateAutoSpinCount(x);
        };
        K.exitAutoSpin = function (D) {
          L(D);
          T.emitAutoplayStopped();
        };
        cc._RF.pop();
      }
      function L(D) {
        x = -1;
        D.exitAutoSpinMode();
      }
    }, {
      GameEventHandler: "GameEventHandler"
    }],
    AutomationDecorator: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "607a1pUyWBLsphZz1avN+BH", "AutomationDecorator")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        K.automationDec = undefined;
        K.automationDec = function (T) {
          return function (x, L, D) {
            if (!D) {
              return D;
            }
            var k = D.value;
            D.value = function () {
              var C = [];
              for (var u = 0; u < arguments.length; u++) {
                C[u] = arguments[u];
              }
              var c = System.get("automation");
              if (c) {
                T.func.apply(T, __spread(C));
              }
              var p = k.apply(this, C);
              return p;
            };
            return D;
          };
        };
        cc._RF.pop();
      }
    }, {}],
    BACKUP_DATA: [function (R, K, g) {
      'use strict';

      if (!cc._RF.push(K, "4dc392lxVJArKflo+rU3j23", "BACKUP_DATA")) {
        Object.defineProperty(g, "__esModule", {
          value: true
        });
        var L = new cc.Color(255, 200, 36, 255);
        var D = new cc.Color(255, 255, 255, 255);
        var k = Object.freeze({
          game: {
            theme_color: L,
            theme_font_family: "Arial",
            white_color: D
          },
          game_title: {
            default_font: "Arial"
          },
          setting: {
            theme_color: L,
            theme_font: "Arial",
            slider_switch_color: {
              false: new cc.Color(144, 144, 150, 255),
              true: L
            },
            slider_line_color: {
              false: new cc.Color(144, 144, 150, 20),
              true: L
            },
            label_switch_color_a: {
              false: D,
              true: L
            },
            label_switch_color_b: {
              false: new cc.Color(144, 144, 150, 82),
              true: L
            },
            label_switch_color_c: {
              false: new cc.Color(255, 255, 255, 30),
              true: L
            },
            button_switch_color_a: {
              false: new cc.Color(D.r, D.g, D.b, 79),
              true: L
            },
            color_button_transition_a: {
              normal: L,
              pressed: new cc.Color(L.r, L.g, L.b, 128),
              hover: L,
              disabled: new cc.Color(L.r, L.g, L.b, 66)
            },
            white_button_transition_a: {
              normal: D,
              pressed: new cc.Color(D.r, D.g, D.b, 128),
              hover: D,
              disabled: new cc.Color(D.r, D.g, D.b, 66)
            },
            grey_button_transition_a: {
              normal: new cc.Color(D.r, D.g, D.b, 153),
              pressed: new cc.Color(133, 133, 133, 153),
              hover: new cc.Color(D.r, D.g, D.b, 153),
              disabled: new cc.Color(133, 133, 133, 153)
            },
            spin_start_label: new cc.Color(255, 255, 255, 201)
          },
          login: {
            theme_color: L,
            default_font: "Arial"
          },
          history: {
            grey_button_transition_b: {
              normal: D,
              pressed: new cc.Color(133, 133, 133),
              hover: D,
              disabled: new cc.Color(133, 133, 133)
            },
            white_button_transition_a: {
              normal: D,
              pressed: new cc.Color(255, 255, 255, 128),
              hover: D,
              disabled: new cc.Color(255, 255, 255, 66)
            },
            calendar_title_select: {
              true: L,
              false: new cc.Color(255, 255, 255, 77)
            },
            calendar_selection_line: new cc.Color(40, 40, 52, 235),
            calendar_title_bg: new cc.Color(48, 48, 60, 255),
            calendar_content_bg: new cc.Color(40, 40, 52, 235),
            calendar_custom_bg: new cc.Color(48, 48, 60, 255),
            calendar_custom_line_bg: new cc.Color(48, 48, 60, 255),
            calendar_custom_title: new cc.Color(255, 255, 255, 153),
            calendar_custom_dot: new cc.Color(255, 255, 255, 255),
            calendar_custom_btn: {
              normal: L,
              pressed: new cc.Color(119, 119, 119, 255),
              hover: L,
              disabled: new cc.Color(87, 87, 87, 255)
            },
            calendar_datepicker_default_font: new cc.Color(255, 255, 255, 77),
            calendar_datepicker_highlight_font: L,
            calendar_datepicker_highlight_bg: new cc.Color(48, 48, 60, 255),
            calendar_datepicker_line: new cc.Color(40, 40, 52, 255),
            theme_color: L,
            theme_font: "Arial",
            color_theme_opacity_a: new cc.Color(L.r, L.g, L.b, 153),
            navigator_bg: new cc.Color(48, 48, 60),
            navigator_bar_bg: new cc.Color(40, 40, 52),
            history_bar_item_bg: {
              normal: new cc.Color(48, 48, 60),
              pressed: new cc.Color(57, 57, 75, 60),
              hover: new cc.Color(48, 48, 60),
              disabled: new cc.Color(40, 40, 52)
            },
            history_bar_item_font_bg: {
              false: D,
              true: L
            },
            history_main_title: new cc.Color(241, 186, 91, 255),
            history_list_item_arrow: new cc.Color(255, 255, 255, 64),
            history_list_item_bg_odd: new cc.Color(40, 40, 52),
            history_list_item_bg_even: new cc.Color(45, 45, 57),
            history_list_item_bg_pressed: new cc.Color(60, 60, 70),
            history_list_item_special_font: L,
            history_list_item_value_font: new cc.Color(255, 255, 255, 153),
            history_list_item_date_time_font: new cc.Color(255, 255, 255, 153),
            history_list_item_line: new cc.Color(255, 255, 255, 0),
            history_list_item_free_games_icon: L,
            history_list_header_bg: new cc.Color(40, 40, 52, 255),
            history_list_header_title_font: new cc.Color(255, 255, 255, 77),
            history_list_bg: new cc.Color(48, 48, 60, 255),
            history_list_bottom_circle_loading: D,
            history_list_middle_circle_loading: new cc.Color(255, 255, 255, 77),
            history_list_bottom_label_color: D,
            history_list_middle_label_color: new cc.Color(255, 255, 255, 77),
            history_list_retry: L,
            history_list_message_title: new cc.Color(220, 220, 220, 153),
            history_list_message_message: new cc.Color(220, 220, 220, 77),
            history_list_title_date: new cc.Color(255, 255, 255, 153),
            history_list_middle_loading_front: L,
            history_list_middle_loading_back: new cc.Color(L.r * 0.5, L.g * 0.5, L.b * 0.5),
            history_list_middle_loading_font_color: L,
            history_list_bottom_loading_front: L,
            history_list_bottom_loading_back: new cc.Color(L.r * 0.5, L.g * 0.5, L.b * 0.5),
            history_summary_bg: new cc.Color(40, 40, 52, 255),
            history_summary_title_font: L,
            history_summary_record_font: new cc.Color(255, 255, 255, 153),
            history_summary_amount_font: D,
            history_detail_header_title_font: L,
            history_detail_header_value_font: new cc.Color(120, 120, 120, 255),
            history_detail_header_bg: new cc.Color(40, 40, 52, 255),
            history_detail_down_arrow: L,
            history_detail_line: new cc.Color(40, 40, 52, 255),
            history_detail_payout_font: new cc.Color(255, 255, 255, 66),
            history_detail_win_line_value_font: D,
            history_detail_content_bg: new cc.Color(48, 48, 60),
            history_detail_no_win_combination_font: new cc.Color(255, 255, 255, 204),
            history_detail_title_font: D,
            history_detail_page_arrow: L,
            history_detail_page_arrow_bg: new cc.Color(0, 0, 0, 100),
            history_bar_close_font: new cc.Color(255, 255, 255, 204),
            history_bar_bg: new cc.Color(48, 48, 60, 255)
          },
          alert: {
            default_title_color: D,
            default_message_color: D,
            default_button_title_color: D,
            default_button_color: L,
            default_font: "Arial"
          },
          free_game: {
            theme_color: L,
            theme_font: "Arial"
          },
          bonus_wallet: {
            theme_color: L,
            theme_font: "Arial"
          },
          setting_rules: {
            title_color: new cc.Color(255, 255, 255),
            desc_color: new cc.Color(204, 204, 204),
            font_style: "Arial"
          },
          setting_payout: {
            title_color: new cc.Color(255, 255, 255),
            value_color: new cc.Color(255, 255, 255),
            value_color_red: new cc.Color(192, 38, 48),
            desc_color: new cc.Color(204, 204, 204),
            font_style: "Arial"
          },
          loading: {
            front_icon_color: L,
            back_icon_color: new cc.Color(L.r * 0.5, L.g * 0.5, L.b * 0.5),
            background_color: new cc.Color(0, 0, 0, 0),
            font_color: L,
            font_style: "Arial"
          }
        });
        g.default = k;
        cc._RF.pop();
      }
    }, {}],
    BGMHandler: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "f5549ONPJVHILXw7rcdqGtw", "BGMHandler")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        K.bgmHandler = undefined;
        var T = I("AudioManager");
        var x = I("SettingMenuHelper");
        var L = I("GameConstant");
        cc._decorator.ccclass;
        var D = function () {
          function u() {
            this._bgmState = undefined;
            this._previousBgmVolume = 0;
          }
          u.prototype.playBgm = function (c) {
            var p = this._getAudioByState(this._bgmState);
            var j = this._getAudioByState(c);
            if (p === undefined) {
              this._previousBgmVolume = 1;
              j.setVolume(1);
              j.play();
            } else if (this._bgmState !== c) {
              if (j.isPlaying()) {
                if (c === L.TransitionState.FREE_SPIN) {
                  C();
                  j.play();
                  p.stop();
                  j.setVolume(1);
                }
              } else {
                j.play();
                if (c === L.TransitionState.FREE_SPIN) {
                  p.stop();
                  j.setVolume(1);
                } else {
                  j.setVolume(0);
                  j.fade(0, 1, 0.7);
                  p.fade(p.getVolume(), 0, 0.7);
                  p.on("fade", C);
                }
              }
            }
            this._bgmState = c;
          };
          u.prototype.fadeOutBgm = function (c) {
            var p = this._getAudioByState(this._bgmState);
            if (p) {
              this._previousBgmVolume = p.getVolume();
              this.fadeBgmTo(0, c);
            }
          };
          u.prototype.fadeInBgm = function (c) {
            this.fadeBgmTo(this._previousBgmVolume, c);
          };
          u.prototype.fadeBgmTo = function (c, p) {
            var j = this._getAudioByState(this._bgmState);
            if (j && x.settingMenuHelper.soundEnable && j.getVolume() !== c) {
              j.fade(j.getVolume(), c, p);
            }
          };
          u.prototype.setBgmVolume = function (c) {
            var p = this._getAudioByState(this._bgmState);
            if (p) {
              p.setVolume(c);
            }
          };
          u.prototype._getAudioByState = function (c) {
            var p;
            switch (c) {
              case L.TransitionState.NORMAL:
              case L.TransitionState.RESPIN:
                p = T.GeneralAudioPool.bgm_mg;
                break;
              case L.TransitionState.FREE_SPIN:
              case L.TransitionState.FREE_SPIN_RESPIN:
                p = T.GeneralAudioPool.bgm_fs;
                break;
              default:
                p = undefined;
            }
            return p;
          };
          return u;
        }();
        K.default = D;
        var k = new D();
        K.bgmHandler = k;
        cc._RF.pop();
      }
      function C() {
        T.GeneralAudioPool.bgm_fs.off("fade", C);
        T.GeneralAudioPool.bgm_fs.stop();
      }
    }, {
      AudioManager: "AudioManager",
      GameConstant: "GameConstant",
      SettingMenuHelper: "SettingMenuHelper"
    }],
    BVFrameworkEnum: [function (Z, I) {
      'use strict';

      if (!cc._RF.push(I, "ec7f7EEHK9MYKQtN9oOrPGU", "BVFrameworkEnum")) {
        var R = System.get("bvframework").BVFrameworkEnum;
        for (var K in R) {
          I.exports[K] = R[K];
        }
        I.exports.__esModule = true;
        cc._RF.pop();
      }
    }, {}],
    BVFramework: [function (Z, I) {
      'use strict';

      if (!cc._RF.push(I, "a9a1dZAV2tCnpP1jdguoThD", "BVFramework")) {
        var R = System.get("bvframework").getGameContext;
        I.exports.getGameContext = R;
        I.exports.__esModule = true;
        cc._RF.pop();
      }
    }, {}],
    BackgroundController: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "f63afB6nfJFAY4uwEg0e8G6", "BackgroundController")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("GameConstant");
        var x = cc._decorator;
        var L = x.ccclass;
        var D = x.property;
        var k = function (C) {
          function u() {
            var c = C !== null && C.apply(this, arguments) || this;
            c.normalNode = undefined;
            c.bonusNode = undefined;
            c.slowDropEfxHolder = undefined;
            return c;
          }
          __extends(u, C);
          u.prototype.switchUI = function (c) {
            switch (c) {
              case T.TransitionState.FREE_SPIN:
              case T.TransitionState.FREE_SPIN_RESPIN:
                this.normalNode.active = false;
                this.bonusNode.active = true;
                this.slowDropEfxHolder.setPosition(0, -145);
                break;
              case T.TransitionState.NORMAL:
              case T.TransitionState.RESPIN:
              default:
                this.normalNode.active = true;
                this.bonusNode.active = false;
                this.slowDropEfxHolder.setPosition(0, 0);
            }
          };
          u.prototype.getSlowDropEfxHolder = function () {
            return this.slowDropEfxHolder;
          };
          u.prototype.resetSlowDropEfxHolder = function () {
            this.slowDropEfxHolder.removeAllChildren();
          };
          __decorate([D(cc.Node)], u.prototype, "normalNode", undefined);
          __decorate([D(cc.Node)], u.prototype, "bonusNode", undefined);
          __decorate([D(cc.Node)], u.prototype, "slowDropEfxHolder", undefined);
          return __decorate([L], u);
        }(cc.Component);
        K.default = k;
        cc._RF.pop();
      }
    }, {
      GameConstant: "GameConstant"
    }],
    BaseListViewCell: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "24d8a0AiVJMa4yCegaay2ry", "BaseListViewCell")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = cc._decorator;
        var x = T.ccclass;
        var L = T.property;
        var D = function (k) {
          function C() {
            var u = k !== null && k.apply(this, arguments) || this;
            u.label = undefined;
            u.sprite = undefined;
            u.selectedBackgroundColor = undefined;
            u.normalBackgroundColor = undefined;
            u.endPos = undefined;
            return u;
          }
          __extends(C, k);
          C.prototype.onLoad = function () {
            this.setupTouchAction();
          };
          C.prototype.setupTouchAction = function () {
            this.node.on(cc.Node.EventType.TOUCH_START, this._onTouchStart, this);
            this.node.on(cc.Node.EventType.TOUCH_MOVE, this._onTouchMoved, this);
            this.node.on(cc.Node.EventType.TOUCH_END, this._onTouchEnd, this);
            this.node.on(cc.Node.EventType.TOUCH_CANCEL, this._onTouchCancel, this);
            this.node.on(cc.Node.EventType.MOUSE_ENTER, this._onMouseEnter, this);
            this.node.on(cc.Node.EventType.MOUSE_LEAVE, this._onMouseLeave, this);
          };
          C.prototype.removeTouchAction = function () {
            this.node.off(cc.Node.EventType.TOUCH_START, this._onTouchStart, this);
            this.node.off(cc.Node.EventType.TOUCH_MOVE, this._onTouchMoved, this);
            this.node.off(cc.Node.EventType.TOUCH_END, this._onTouchEnd, this);
            this.node.off(cc.Node.EventType.TOUCH_CANCEL, this._onTouchCancel, this);
            this.node.off(cc.Node.EventType.MOUSE_ENTER, this._onMouseEnter, this);
            this.node.off(cc.Node.EventType.MOUSE_LEAVE, this._onMouseLeave, this);
          };
          C.prototype._onMouseEnter = function (u) {
            if (this.mouseEnterAction) {
              this.mouseEnterAction(u);
            }
          };
          C.prototype._onMouseLeave = function (u) {
            if (this.mouseLeaveAction) {
              this.mouseLeaveAction(u);
            }
          };
          C.prototype._onTouchStart = function (u) {
            var c = u.touch;
            var p = cc.v2(c.getLocation().x, c.getLocation().y);
            this.startPos = p;
            this.node.color = this.selectedBackgroundColor;
            if (this.touchStartAction) {
              this.touchStartAction(u);
            }
          };
          C.prototype._onTouchMoved = function (u) {
            this.node.color = this.normalBackgroundColor;
            if (this.touchMoveAction) {
              this.touchMoveAction(u);
            }
          };
          C.prototype._onTouchEnd = function (u) {
            var c = u.touch;
            var p = cc.v2(c.getLocation().x, c.getLocation().y);
            this.endPos = p;
            this.node.color = this.normalBackgroundColor;
            u.stopPropagationImmediate();
            if (this.touchEndAction) {
              this.touchEndAction(u);
            }
          };
          C.prototype._onTouchCancel = function (u) {
            var c = u.touch;
            var p = cc.v2(c.getLocation().x, c.getLocation().y);
            this.endPos = p;
            this.node.color = this.normalBackgroundColor;
            u.stopPropagationImmediate();
            if (this.touchCancelAction) {
              this.touchCancelAction(u);
            }
          };
          C.prototype.destroy = function () {
            this.removeTouchAction();
            k.prototype.destroy.call(this);
          };
          __decorate([L(cc.Label)], C.prototype, "label", undefined);
          __decorate([L(cc.Sprite)], C.prototype, "sprite", undefined);
          __decorate([L(cc.Color)], C.prototype, "selectedBackgroundColor", undefined);
          __decorate([L(cc.Color)], C.prototype, "normalBackgroundColor", undefined);
          return __decorate([x], C);
        }(cc.Component);
        K.default = D;
        cc._RF.pop();
      }
    }, {}],
    BaseLoadingController: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "8cf0eKqDPpJIqyTM7FI7ivt", "BaseLoadingController")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        K.instantiateController = undefined;
        var T = I("AnalyticsHelper");
        var x = I("QuitGameWithEvent");
        var L = I("ErrorHandler");
        var D = I("NoSoundAdapter");
        var k = I("ResourceLoader");
        var C = I("SettingMenuHelper");
        var j = I("RtConfig");
        var G = I("GameAudioAdapter");
        var V = I("SettingMenuAssetConfig");
        K.instantiateController = q;
        var Q = cc._decorator;
        var N = Q.ccclass;
        var Y = Q.property;
        var W = function (S) {
          function z() {
            var A = S !== null && S.apply(this, arguments) || this;
            A.settingMenuHolder = undefined;
            A.settingMenuFooterHolder = undefined;
            A.resourceLoader = new k.default();
            A.gameLaunched = false;
            A._isSettingMenuLoaded = false;
            return A;
          }
          __extends(z, S);
          z.prototype.setup = function (A) {
            this.generalControllers = A.generalControllers;
            this.bonusControllers = A.bonusControllers;
            this.generalControllers.settingMenuFooterHolder = this.settingMenuFooterHolder;
            this._initSettingMenuAudioTasks();
          };
          z.prototype._initSettingMenuAudioTasks = function () {
            var A = j.cs_Launch.noAudio === "1" ? D.default : G.default;
            C.settingMenuHelper.initAudio(A);
          };
          z.prototype.loadBundle = function (A, M) {
            var E = this;
            var F = A;
            if (!this._isSettingMenuLoaded) {
              var b = V.getSettingMenuAssetConfig();
              F = F.concat(b);
            }
            var H = {
              bundle: F,
              progressCallback: this.progressCallback.bind(this),
              retryHandling: this._retryHandling.bind(this),
              retryingCallback: this._sendErrorReport.bind(this),
              retryMessage: shell.I18n.t("General.ResourceRetryMessage")
            };
            this.resourceLoader.loadBundle(H).then(function (w) {
              if (!E._isSettingMenuLoaded) {
                E._isSettingMenuLoaded = true;
                E._settingMenuTaskComplete(w);
              }
              M(w);
            });
          };
          z.prototype._retryHandling = function (A, M, E, F) {
            var b = shell.Error;
            var H = shell.ClientError;
            var w = new b(H.Domain, H.GameLoadResourceError);
            var U = F > 0 ? F : undefined;
            T.sendLoadFailReport(U);
            var B = this.gameLaunched ? L.ErrContext.Preload : L.ErrContext.Launch;
            L.showError(w, B, function (P) {
              switch (P) {
                case L.ErrAction.Retry:
                  if (A) {
                    A();
                  }
                  break;
                case L.ErrAction.Quit:
                  x.quitGameWithEvent("Load resource fail")();
              }
            });
          };
          z.prototype._sendErrorReport = function (A) {
            var M = A > 0 ? A : undefined;
            T.sendLoadFailReport(M);
          };
          z.prototype.progressCallback = function (A, M) {
            shell.setProgress(A, M);
          };
          z.prototype._settingMenuTaskComplete = function (A) {
            var M = A.setting_menu;
            var E = A.setting_menu_wallet_panel;
            var F = A.setting_menu_auto_spin_button;
            var b = A.setting_menu_more_menu_button;
            var H = A.setting_menu_setting_button;
            var w = A.setting_menu_rules_button;
            var U = A.setting_menu_payout_button;
            var B = A.setting_menu_history_button;
            var P = A.setting_menu_hide_more_button;
            var X = A.setting_menu_smart_bot_button;
            var y = A.setting_menu_minus_bet_button;
            var v = A.setting_menu_plus_bet_button;
            var J = A.setting_menu_turbo_spin_button;
            var Z0 = A.setting_menu_sprite_atlas;
            var Z1 = A.setting_menu_quit_button;
            this.generalControllers.settingController = q(M.result, "SettingMenuController", this.settingMenuHolder);
            this.generalControllers.settingMenuFooterController = q(E.result, "SettingInfoFooterController");
            C.settingMenuHelper.setButtonPrefab(C.ButtonPrefabType.QUIT, Z1.result);
            C.settingMenuHelper.setButtonPrefab(C.ButtonPrefabType.SPIN_OPTIONS, F.result);
            C.settingMenuHelper.setButtonPrefab(C.ButtonPrefabType.MORE_MENU, b.result);
            C.settingMenuHelper.setButtonPrefab(C.ButtonPrefabType.SOUND, H.result, true);
            C.settingMenuHelper.setButtonPrefab(C.ButtonPrefabType.RULE, w.result);
            C.settingMenuHelper.setButtonPrefab(C.ButtonPrefabType.PAYTABLE, U.result);
            C.settingMenuHelper.setButtonPrefab(C.ButtonPrefabType.HISTORY, B.result);
            C.settingMenuHelper.setButtonPrefab(C.ButtonPrefabType.HIDE_MORE, P.result);
            C.settingMenuHelper.setButtonPrefab(C.ButtonPrefabType.SMARTBOT, X.result);
            C.settingMenuHelper.setButtonPrefab(C.ButtonPrefabType.MINUS_BET, y.result);
            C.settingMenuHelper.setButtonPrefab(C.ButtonPrefabType.PLUS_BET, v.result);
            C.settingMenuHelper.setButtonPrefab(C.ButtonPrefabType.TURBO_SPIN, J.result, true);
            C.settingMenuHelper.settingMenuLocaleIcons = Z0.result;
          };
          __decorate([Y(cc.Node)], z.prototype, "settingMenuHolder", undefined);
          __decorate([Y(cc.Node)], z.prototype, "settingMenuFooterHolder", undefined);
          return __decorate([N], z);
        }(cc.Component);
        K.default = W;
        cc._RF.pop();
      }
      function q(S, z, A) {
        var M = cc.instantiate(S);
        if (A) {
          A.addChild(M);
        }
        return M.getComponent(z);
      }
    }, {
      AnalyticsHelper: "AnalyticsHelper",
      ErrorHandler: "ErrorHandler",
      GameAudioAdapter: "GameAudioAdapter",
      NoSoundAdapter: "NoSoundAdapter",
      QuitGameWithEvent: "QuitGameWithEvent",
      ResourceLoader: "ResourceLoader",
      RtConfig: "RtConfig",
      SettingMenuAssetConfig: "SettingMenuAssetConfig",
      SettingMenuHelper: "SettingMenuHelper"
    }],
    BaseScroller: [function (R, K, g) {
      'use strict';

      if (!cc._RF.push(K, "7a55d+EM2dKr590KKrgiTXR", "BaseScroller")) {
        var T;
        Object.defineProperty(g, "__esModule", {
          value: true
        });
        g.SCROLLER_EVENT = g.ScrollerState = undefined;
        (function (k) {
          k[k.IDLE = 0] = "IDLE";
          k[k.RUNNING = 1] = "RUNNING";
          k[k.ENDED = 2] = "ENDED";
        })(T = g.ScrollerState ||= {});
        g.SCROLLER_EVENT = Object.freeze({
          RUN: "run",
          END: "end",
          ACCELERATE: "accelerate",
          DECELERATE: "decelerate"
        });
        var D = function (k) {
          function C(p) {
            var j = k.call(this) || this;
            j.state = T.IDLE;
            j.config = undefined;
            j.runtimeConfig = undefined;
            j.config = p;
            j.runtimeConfig = __assign({}, p);
            return j;
          }
          var u = {
            get: function () {
              return this.state === T.RUNNING;
            },
            enumerable: false,
            configurable: true
          };
          var c = {
            get: function () {
              return this.state === T.ENDED;
            },
            enumerable: false,
            configurable: true
          };
          __extends(C, k);
          Object.defineProperty(C.prototype, "isPlaying", u);
          Object.defineProperty(C.prototype, "isEnded", c);
          C.prototype.setConfig = function (p) {
            Object.assign(this.config, p);
          };
          C.prototype.updateRunTimeConfig = function (p) {
            Object.assign(this.runtimeConfig, p);
          };
          C.prototype.getRunTimeConfig = function () {
            return __assign({}, this.runtimeConfig);
          };
          C.prototype.reset = function () {
            this.state = T.IDLE;
            this.runtimeConfig = __assign({}, this.config);
            this.onReset();
          };
          C.prototype.run = function () {
            if (this.state === T.IDLE) {
              this.state = T.RUNNING;
              this.onRun();
            }
          };
          C.prototype.end = function () {
            if (this.state !== T.ENDED) {
              this.state = T.ENDED;
              this.onEnd();
            }
          };
          C.prototype.onReset = function () {};
          C.prototype.onRun = function () {};
          C.prototype.onEnd = function () {};
          C.prototype.emitEvent = function (p, j) {
            var l = {
              scroller: this,
              speedFactor: j
            };
            var G = l;
            this.emit(p, G);
          };
          return C;
        }(cc.EventTarget);
        g.default = D;
        cc._RF.pop();
      }
    }, {}],
    BetModifierButton: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "076aehdcx9HQI7+9hg7FlGu", "BetModifierButton")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("GenericSettingButton");
        var x = I("UIAppearanceHelper");
        var L = I("Utils");
        var D = cc._decorator;
        var k = D.ccclass;
        var C = D.property;
        var u = function (p) {
          function j() {
            var G = p !== null && p.apply(this, arguments) || this;
            G.isIncreaseBet = false;
            return G;
          }
          __extends(j, p);
          j.prototype.setShowSettingToastCallback = function (G) {
            this._showSettingToast = G;
          };
          Object.defineProperty(j.prototype, "showSettingToast", {
            get: function () {
              if (!this._showSettingToast) {
                throw Error("BetModifierButton :: showSettingToast is undefined. Please set it using setShowSettingToastCallback");
              }
              return this._showSettingToast;
            },
            enumerable: false,
            configurable: true
          });
          j.prototype.setHideSettingToastCallback = function (G) {
            this._hideSettingToast = G;
          };
          Object.defineProperty(j.prototype, "hideSettingToast", {
            get: function () {
              if (!this._hideSettingToast) {
                throw Error("BetModifierButton :: hideSettingToast is undefined. Please set it using setHideSettingToastCallback");
              }
              return this._hideSettingToast;
            },
            enumerable: false,
            configurable: true
          });
          j.prototype.increaseBet = function (G, V, Q) {
            var N = G;
            if (V === undefined) {
              for (var Y = 0; Y < N.length; Y++) {
                if (parseFloat(G[Y]) > parseFloat(Q)) {
                  V = Y - 1;
                  Q = G[Y - 1];
                  break;
                }
              }
            } else if (V >= N.length - 1) {
              this.showSettingToast(shell.I18n.t("SettingMenu.BiggestBet"), 2);
              return {
                selectedBet: V,
                selectedBetAmount: Q
              };
            }
            if (V === undefined) {
              throw Error("BetModifierButton :: increaseBet : selectedBet is undefined and cannot be located from selectedBetAmount ");
            }
            Q = G[++V];
            if (V >= N.length - 1) {
              this.showSettingToast(shell.I18n.t("SettingMenu.BiggestBet"), 2);
            } else {
              this.hideSettingToast();
            }
            return {
              selectedBet: V,
              selectedBetAmount: Q
            };
          };
          j.prototype.decreaseBet = function (G, V, Q) {
            if (V === undefined) {
              for (var N = G.length - 1; N >= 0; N--) {
                if (parseFloat(G[N]) < parseFloat(Q)) {
                  V = N + 1;
                  Q = G[N + 1];
                  break;
                }
              }
            } else if (V <= 0) {
              this.showSettingToast(shell.I18n.t("SettingMenu.SmallestBet"), 2);
              return {
                selectedBet: V,
                selectedBetAmount: Q
              };
            }
            if (V === undefined) {
              throw Error("BetModifierButton :: decreaseBet : selectedBet is undefined and cannot be located from selectedBetAmount ");
            }
            Q = G[--V];
            if (V <= 0) {
              this.showSettingToast(shell.I18n.t("SettingMenu.SmallestBet"), 2);
            } else {
              this.hideSettingToast();
            }
            return {
              selectedBet: V,
              selectedBetAmount: Q
            };
          };
          j.prototype.updateBetModifierColor = function (G, V) {
            if (this.isIncreaseBet) {
              this.isReachLimit = !!V && !!(G >= V);
            } else {
              this.isReachLimit = G <= 0;
            }
            this.interactableButtonColor(this.isInteractable);
          };
          j.prototype.changeButtonPressedColor = function (G) {
            if (this.buttonTheme) {
              var V = x.uiAppearanceHelper.v(this.buttonTheme.domainKey + "." + this.buttonTheme.colorKey + ".normal");
              var Q = x.uiAppearanceHelper.v(this.buttonTheme.domainKey + "." + this.buttonTheme.colorKey + ".pressed");
              if (this.isReachLimit) {
                var N = x.uiAppearanceHelper.v(this.buttonTheme.domainKey + "." + this.buttonTheme.colorKey + ".disabled");
                L.setNodeColorWithOpacity(this.iconSprite, N);
              } else {
                L.setNodeColorWithOpacity(this.iconSprite, G ? Q : V);
              }
            }
          };
          j.prototype.interactableButtonColor = function (G) {
            if (this.buttonTheme) {
              var V = x.uiAppearanceHelper.v(this.buttonTheme.domainKey + "." + this.buttonTheme.colorKey + ".normal");
              var Q = x.uiAppearanceHelper.v(this.buttonTheme.domainKey + "." + this.buttonTheme.colorKey + ".disabled");
              if (this.isReachLimit) {
                L.setNodeColorWithOpacity(this.iconSprite, Q);
              } else {
                L.setNodeColorWithOpacity(this.iconSprite, G ? V : Q);
              }
            }
          };
          j.prototype.maxBet = function (G) {
            var V = G.length - 1;
            var Q = G[V];
            var N = {
              selectedBet: V,
              selectedBetAmount: Q
            };
            this.showSettingToast(shell.I18n.t("SettingMenu.BiggestBet"), 2);
            return N;
          };
          j.prototype.buttonActivate = function (G) {
            if (G) {
              this.node.active = true;
              if (this.node.parent) {
                this.node.parent.active = true;
              }
              L.deferCallback(this)(this.enableTouchInteraction);
            } else {
              this.disableTouchInteraction();
              this.node.active = false;
              if (this.node.parent) {
                this.node.parent.active = false;
              }
            }
          };
          __decorate([C(cc.Boolean)], j.prototype, "isIncreaseBet", undefined);
          return __decorate([k], j);
        }(T.default);
        K.default = u;
        cc._RF.pop();
      }
    }, {
      GenericSettingButton: "GenericSettingButton",
      UIAppearanceHelper: "UIAppearanceHelper",
      Utils: "Utils"
    }],
    BetRepository: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "14dfa+lfKlIS5vAzSig9n4q", "BetRepository")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        K.BetRepository = undefined;
        var T = function () {
          function x(L, D) {
            this._betLevelValue = L;
            this._betSizeValue = D;
            this._selectedBetLevelValue = L;
            this._selectedBetSizeValue = D;
          }
          Object.defineProperty(x.prototype, "selectedBetLevelValue", {
            get: function () {
              return this._selectedBetLevelValue;
            },
            set: function (L) {
              this._selectedBetLevelValue = L;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(x.prototype, "selectedBetSizeValue", {
            get: function () {
              return this._selectedBetSizeValue;
            },
            set: function (L) {
              this._selectedBetSizeValue = L;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(x.prototype, "betLevelValue", {
            get: function () {
              return this._betLevelValue;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(x.prototype, "betSizeValue", {
            get: function () {
              return this._betSizeValue;
            },
            enumerable: false,
            configurable: true
          });
          x.prototype.updateRemoteBets = function (L, D) {
            this._betLevelValue = this._selectedBetLevelValue = L;
            this._betSizeValue = this._selectedBetSizeValue = D;
          };
          return x;
        }();
        K.BetRepository = T;
        cc._RF.pop();
      }
    }, {}],
    "BigWinController.spec": [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "03843beszVH+q8sj7OeNsLR", "BigWinController.spec")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        K.initBigWinNodes = K.skipBigWinAnimationActiveEvent = K.skipBigWinButtonActiveEvent = undefined;
        K.skipBigWinButtonActiveEvent = function () {
          var T = System.get("automation") && System.get("automation").GameData;
          if (T) {
            T.emit("BigWin", {
              displayState: "SkipNumberRollEnabled"
            });
          }
        };
        K.skipBigWinAnimationActiveEvent = function () {
          var T = System.get("automation") && System.get("automation").GameData;
          if (T) {
            T.emit("BigWin", {
              displayState: "SkipAnimationEnabled"
            });
          }
        };
        K.initBigWinNodes = function (T) {
          var x = System.get("automation") && System.get("automation").GameConfigs;
          if (x) {
            x.initNodeConfig(T.skipButtonNode, "big_win_skip_button");
          }
        };
        cc._RF.pop();
      }
    }, {}],
    BigWinController: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "68d31au7EhCrrUj7l+wvSHd", "BigWinController")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("SpaceBarInterrupter");
        var x = I("Utils");
        var L = I("GameEventHandler");
        var D = I("WinTemplateConstant");
        var k = cc._decorator;
        var C = k.ccclass;
        var p = k.property;
        var j = function (G) {
          function V() {
            var Q = G !== null && G.apply(this, arguments) || this;
            Q.tintNode = undefined;
            Q.numberRollNode = undefined;
            Q.buttonNode = undefined;
            Q.bigWinState = D.WinState.INITIAL;
            Q.winRollState = D.BigWinRollState.BIG_WIN;
            Q.finalWinAmount = 0;
            Q.isReplaying = false;
            Q.isSkip = false;
            Q.delayActiveSkipButton = 0.1;
            Q._tintOpacity = 150;
            Q._onCompleteCallback = undefined;
            Q._winRollController = undefined;
            return Q;
          }
          __extends(V, G);
          V.prototype.onDestroyed = function () {};
          V.prototype.onInit = function () {};
          V.prototype.onSetup = function () {};
          V.prototype.onPlay = function () {};
          V.prototype.onPlayBigWinEffect = function (Q) {
            Q();
          };
          V.prototype.onPlayPreMegaWinEffect = function () {};
          V.prototype.onPlayMegaWinEffect = function () {};
          V.prototype.onPlayPreSuperMegaWinEffect = function () {};
          V.prototype.onPlaySuperMegaWinEffect = function () {};
          V.prototype.onWinRollComplete = function () {};
          V.prototype.onSkip = function () {};
          V.prototype.onStop = function () {};
          V.prototype.onDismiss = function () {};
          V.prototype.onReset = function () {};
          V.prototype.destroy = function () {
            this.onDestroyed();
            this._winRollController.stop(true);
            this._winRollController = undefined;
            this.tintNode.stopAllActions();
            this.unscheduleAllCallbacks();
            this.node.stopAllActions();
            this.node.destroy();
            return G.prototype.destroy.call(this);
          };
          V.prototype.onButtonClick = function () {
            if (this.bigWinState === D.WinState.PLAYING) {
              this._skip();
            } else if (this.bigWinState === D.WinState.WAITING) {
              this._stop();
            }
          };
          V.prototype.init = function (Q) {
            this.onInit(Q);
            this._tintOpacity = this.tintNode.opacity;
            this._winRollController = this.numberRollNode.getComponent("TimedWinRollController");
          };
          V.prototype.setup = function (Q) {
            this.node.active = false;
            this.getWinThresholdCallback = Q.getWinThreshold;
            this.winDuration = Q.winDuration;
            this.onSetup(Q);
          };
          V.prototype.play = function (Q, N, Y, W, q) {
            if (this.bigWinState === D.WinState.INITIAL) {
              this.onPlay(q);
              this.isReplaying = W;
              this.bigWinState = D.WinState.PLAYING;
              this.winRollState = D.BigWinRollState.BIG_WIN;
              this.finalWinAmount = Q;
              this._onCompleteCallback = Y;
              this.isSkip = false;
              this.winThreshold = this.getWinThresholdCallback();
              this.tintNode.stopAllActions();
              this.tintNode.runAction(cc.fadeTo(0.1, this._tintOpacity));
              if (N > 0) {
                x.delayCallback(N)(this._startPlayEffect.bind(this));
              } else {
                this._startPlayEffect();
              }
            }
          };
          V.prototype._startWinRoll = function () {
            var Q = this._winRollController;
            var N = this.winThreshold;
            var Y = this.winDuration;
            Q.setNumbersCallback([N.megaWinThreshold * 0.95, N.megaWinThreshold, N.superMegaWinThreshold * 0.97, N.superMegaWinThreshold]);
            Q.init({
              bigWinThreshold: N.bigWinThreshold,
              megaWinThreshold: N.megaWinThreshold,
              superMegaWinThreshold: N.superMegaWinThreshold,
              bigWinDuration: Y.bigWinDuration,
              megaWinDuration: Y.megaWinDuration,
              superMegaWinDuration: Y.superMegaWinDuration,
              totalWin: this.finalWinAmount
            });
            Q.play(this._onValueReached.bind(this));
          };
          V.prototype._onValueReached = function (Q) {
            var N = this.winThreshold;
            if (Q >= N.megaWinThreshold * 0.95 && Q < N.megaWinThreshold && this.winRollState !== D.BigWinRollState.MEGA_WIN) {
              this.onPlayPreMegaWinEffect();
            } else if (Q >= N.megaWinThreshold && Q < N.superMegaWinThreshold && this.winRollState !== D.BigWinRollState.MEGA_WIN) {
              this.winRollState = D.BigWinRollState.MEGA_WIN;
              this.onPlayMegaWinEffect();
            } else if (Q >= N.superMegaWinThreshold * 0.97 && Q < N.superMegaWinThreshold && this.winRollState !== D.BigWinRollState.SUPER_MEGA_WIN) {
              this.onPlayPreSuperMegaWinEffect();
            } else if (Q >= N.superMegaWinThreshold && this.winRollState !== D.BigWinRollState.SUPER_MEGA_WIN) {
              this.winRollState = D.BigWinRollState.SUPER_MEGA_WIN;
              this.onPlaySuperMegaWinEffect();
            }
            if (Q >= this.finalWinAmount) {
              this._winRollComplete();
            }
          };
          V.prototype._winRollComplete = function () {
            if (this.bigWinState === D.WinState.PLAYING) {
              this.bigWinState = D.WinState.WAITING;
              this.onWinRollComplete();
              this.unscheduleAllCallbacks();
              this.scheduleOnce(this._activeStopButton, 1);
              var Q = this.isReplaying ? D.REPLAY_WIN_HOLD_DURATION : D.NORMAL_WIN_HOLD_DURATION;
              this.scheduleOnce(this._stop, Q);
              L.emitGameEffectStateChangedEvent({
                displayState: "DidUpdate",
                effectType: "BigWin"
              });
            }
          };
          V.prototype._startPlayEffect = function () {
            var Q = this.node;
            Q.active = true;
            Q.opacity = 0;
            Q.stopAllActions();
            Q.runAction(cc.fadeIn(0.1));
            this._playBigWinEffect();
          };
          V.prototype._playBigWinEffect = function () {
            var Q = this;
            this.onPlayBigWinEffect(function () {
              Q._startWinRoll();
              x.delayCallback(Q.delayActiveSkipButton)(Q._activeStopButton.bind(Q));
            });
          };
          V.prototype._skip = function () {
            this._inactiveStopButton();
            this.isSkip = true;
            this.onSkip();
            this.unscheduleAllCallbacks();
            this._winRollController.skip();
          };
          V.prototype._stop = function () {
            if (this.bigWinState === D.WinState.WAITING) {
              this._inactiveStopButton();
              this.bigWinState = D.WinState.DISMISING;
              this.onStop();
              L.emitGameEffectStateChangedEvent({
                displayState: "WillEnd",
                effectType: "BigWin"
              });
              x.delayCallback(0.5)(this._dismiss.bind(this));
            }
          };
          V.prototype._dismiss = function () {
            if (this.bigWinState === D.WinState.DISMISING) {
              this.onDismiss();
              var Q = this.node;
              Q.stopAllActions();
              Q.runAction(cc.sequence(cc.fadeOut(0.5), cc.callFunc(this._completeShowBigWin, this)));
            }
          };
          V.prototype._activeStopButton = function () {
            if (!this.buttonNode.active) {
              T.spaceBarInterrupter.subscribeEventInterrupter("bigwin", this.node, this.onButtonClick.bind(this));
              this.buttonNode.active = true;
            }
          };
          V.prototype._inactiveStopButton = function () {
            if (this.buttonNode.active) {
              T.spaceBarInterrupter.unsubscribeEventInterrupter("bigwin");
              this.buttonNode.active = false;
            }
          };
          V.prototype._completeShowBigWin = function () {
            var Q = this._onCompleteCallback;
            this._reset();
            if (Q) {
              Q();
            }
          };
          V.prototype._reset = function () {
            this.onReset();
            this.bigWinState = D.WinState.INITIAL;
            this.winRollState = D.BigWinRollState.BIG_WIN;
            this.isSkip = false;
            this._winRollController.stop(true);
            this.finalWinAmount = 0;
            this._onCompleteCallback = undefined;
            this.tintNode.stopAllActions();
            this.unscheduleAllCallbacks();
            this.node.stopAllActions();
            this.node.active = false;
          };
          __decorate([p(cc.Node)], V.prototype, "tintNode", undefined);
          __decorate([p(cc.Node)], V.prototype, "numberRollNode", undefined);
          __decorate([p(cc.Node)], V.prototype, "buttonNode", undefined);
          return __decorate([C], V);
        }(cc.Component);
        K.default = j;
        cc._RF.pop();
      }
    }, {
      GameEventHandler: "GameEventHandler",
      SpaceBarInterrupter: "SpaceBarInterrupter",
      Utils: "Utils",
      WinTemplateConstant: "WinTemplateConstant"
    }],
    BonuceBackStopScroller: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "d340fnEDFhAdrZNTN9LCKpM", "BonuceBackStopScroller")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("DefaultStopScroller");
        var x = I("BaseScroller");
        var L = function (D) {
          function k() {
            var C = D !== null && D.apply(this, arguments) || this;
            C._easeCurve = undefined;
            return C;
          }
          __extends(k, D);
          k.prototype.onRun = function () {
            this.emitEvent(x.SCROLLER_EVENT.RUN);
            var C = this.runtimeConfig;
            var u = this.endY = C.getStopDistance(this);
            var c = this.decelerateDistance = u;
            var p = this.decelerateDuration = c * 2 / (C.maxSpeed + C.endSpeed);
            this.halfDeceleration = (C.endSpeed - C.maxSpeed) / p / 2;
            this._easeCurve = cc.easeOut(C.bounceFactor);
            this.previousY = 0;
            this.notified = false;
            this.accumulatedTime = 0;
            this.update = this.bindedRunUpdate;
          };
          k.prototype.runUpdate = function (C) {
            var u = this.runtimeConfig;
            C = this.accumulatedTime += C;
            var c = this.decelerateDuration;
            if (C < c) {
              var p = u.maxSpeed * C + this.halfDeceleration * C * C;
              u.scrollCallback(this, p - this.previousY);
              this.previousY = p;
              this.emitEvent(x.SCROLLER_EVENT.DECELERATE, 1 - C / c);
              return;
            }
            if (!this.notified) {
              this.notified = true;
              this.emitEvent(x.SCROLLER_EVENT.DECELERATE, 0);
            }
            C -= c;
            var j = u.bounceDuration;
            if (C < j) {
              var l = C / j;
              var G = this._easeCurve.easing((l < 0.5 ? l : 1 - l) * 2);
              p = this.decelerateDistance + u.bounceDistance * G;
              u.scrollCallback(this, p - this.previousY);
              this.previousY = p;
              return;
            }
            this.end();
          };
          return k;
        }(T.default);
        K.default = L;
        cc._RF.pop();
      }
    }, {
      BaseScroller: "BaseScroller",
      DefaultStopScroller: "DefaultStopScroller"
    }],
    BonusAssetConfig: [function (x, L, D) {
      'use strict';

      if (!cc._RF.push(L, "4666653cJ5HSJIHRRg4/c2P", "BonusAssetConfig")) {
        Object.defineProperty(D, "__esModule", {
          value: true
        });
        D.bonusAssetConfig = undefined;
        var k = {
          name: "remaining_free_spin_controller",
          url: "load_res/remaining_free_spin_controller",
          type: cc.Prefab,
          isLocalized: false
        };
        var C = {
          name: "free_spin_won_controller",
          url: "load_res/free_spin_won_controller",
          type: cc.Prefab,
          isLocalized: false
        };
        var u = {
          name: "total_win_controller",
          url: "load_res/total_win_controller",
          type: cc.Prefab,
          isLocalized: false
        };
        var c = {
          name: "remaining_free_spin_texture",
          url: "texture/remaining_free_spin/remaining_free_spin",
          type: cc.SpriteAtlas,
          isLocalized: true
        };
        var p = {
          name: "total_win_texture",
          url: "texture/total_win/total_win_text",
          type: cc.SpriteAtlas,
          isLocalized: true
        };
        var j = [k, C, u, c, p];
        D.bonusAssetConfig = j;
        cc._RF.pop();
      }
    }, {}],
    BonusLoadingController: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "7eb81xH1fpGGZL0MI1pXgD6", "BonusLoadingController")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("Utils");
        var x = I("NumberDisplayController");
        var L = I("SpaceBarInterrupter");
        var D = I("AudioConstant");
        var k = I("AudioManager");
        var C = I("GameConstant");
        var j = cc._decorator;
        var G = j.ccclass;
        var V = j.property;
        var Q = function (N) {
          function Y() {
            var W = N !== null && N.apply(this, arguments) || this;
            W.freeSpinNumberDisplayController = undefined;
            W.loadingNumberDisplayController = undefined;
            W.startTextSprite = undefined;
            W.freeSpinTextSprite = undefined;
            W.descTextSprite = undefined;
            W.startButton = undefined;
            W.vfx = undefined;
            W.loadingNode = undefined;
            W.hoverShine = undefined;
            W.buttonClickVfx = undefined;
            W.blVfxAAnim = undefined;
            W.blVfxCParticleSystem = undefined;
            W.backgroundNodeA = undefined;
            W.vfxNodeE = undefined;
            W.vfxNodeB = undefined;
            W.vfxNodeD = undefined;
            W.loadingImage = undefined;
            W._displayState = C.DisplayState.HIDE;
            W._onShowedCallback = undefined;
            W._onCompleteCallback = undefined;
            return W;
          }
          __extends(Y, N);
          Y.prototype.init = function (W) {
            this.freeSpinTextSprite.spriteFrame = W.freeSpinTextSF;
            this.startTextSprite.spriteFrame = W.startTextSF;
            this.descTextSprite.spriteFrame = W.descTextSF;
            this._reset();
          };
          Y.prototype.show = function (W, q) {
            if (this._displayState === C.DisplayState.HIDE) {
              this._displayState = C.DisplayState.ANIMATING;
              this._onShowedCallback = q;
              this.freeSpinNumberDisplayController.clear();
              this.freeSpinNumberDisplayController.displayNumber(W);
              this.updateProgress(0, 1);
              this.node.active = true;
              this.node.opacity = 0;
              this.node.stopAllActions();
              this.node.runAction(cc.sequence(cc.fadeIn(0.3), cc.callFunc(this._onShowComplete, this)));
            }
          };
          Y.prototype.updateProgress = function (W, q) {
            var S = W / q * 100;
            this.loadingNumberDisplayController.clear();
            this.loadingNumberDisplayController.displayNumber(S, false);
          };
          Y.prototype.onLoadComplete = function (W, q) {
            this._onCompleteCallback = q;
            var S = W ? C.REPLAY_HOLD_DURATION : C.NORMAL_HOLD_DURATION;
            this._onStartButtonShowed();
            this.unschedule(this.onStartButtonClick);
            this.scheduleOnce(this.onStartButtonClick, S);
          };
          Y.prototype.onStartButtonClick = function () {
            this._disableMouseHover();
            this._hideMouseOverEffect();
            L.spaceBarInterrupter.unsubscribeEventInterrupter("bonus");
            var W = this.buttonClickVfx;
            W.stopAllActions();
            W.opacity = 0;
            W.runAction(cc.sequence(cc.fadeIn(0.1), cc.delayTime(0.05), cc.fadeOut(0.1)));
            this.unschedule(this.onStartButtonClick);
            this.startButton.enabled = false;
            k.playAudio(D.GENERAL_AUDIO.uiStart.key);
            this._hide();
          };
          Y.prototype._hide = function () {
            if (this._displayState === C.DisplayState.SHOWED) {
              this._displayState = C.DisplayState.ANIMATING;
              this.node.stopAllActions();
              this.node.runAction(cc.sequence(cc.fadeOut(0.5), cc.callFunc(this._onHideCompleteFunc, this)));
              this.blVfxCParticleSystem.node.runAction(cc.fadeOut(0.3));
            }
          };
          Y.prototype._onHideCompleteFunc = function () {
            this._reset();
            var W = this._onCompleteCallback;
            this._onCompleteCallback = undefined;
            if (W) {
              W();
            }
          };
          Y.prototype._onShowComplete = function () {
            var W = this;
            this._displayState = C.DisplayState.SHOWED;
            var q = cc.Color.WHITE;
            var S = cc.Color.BLACK;
            var z = this.backgroundNodeA;
            z.stopAllActions();
            z.scale = 1.43;
            z.runAction(cc.scaleTo(10, 1.5));
            var f = this.vfxNodeE;
            f.stopAllActions();
            f.color = S;
            f.angle = 40;
            f.runAction(cc.spawn(cc.rotateTo(10, -55), cc.tintTo(0.15, q)));
            var A = this.vfxNodeB;
            A.stopAllActions();
            A.scale = 0;
            A.color = S;
            A.runAction(cc.spawn(cc.sequence(cc.scaleTo(0.3, 12), cc.scaleTo(10, 21)), cc.tintTo(0.15, q)));
            var M = this.blVfxAAnim;
            M.node.active = true;
            M.play();
            var E = this.blVfxCParticleSystem;
            E.node.active = true;
            E.node.opacity = 0;
            E.node.runAction(cc.fadeIn(0.3));
            E.resetSystem();
            T.delayCallback(0.1)(function () {
              W._playNumberEffect();
            });
            this.loadingNode.active = true;
            var F = this.loadingImage;
            F.stopAllActions();
            F.angle = 0;
            F.runAction(cc.rotateBy(0.15, 5).repeatForever());
            var b = this.freeSpinTextSprite.node;
            b.active = true;
            b.stopAllActions();
            b.scale = 0;
            b.runAction(cc.scaleTo(0.3, 1).easing(cc.easeBackOut()));
            var H = this.freeSpinNumberDisplayController.node;
            H.stopAllActions();
            H.scale = 0;
            H.runAction(cc.sequence(cc.delayTime(0.2), cc.scaleTo(0.3, 1).easing(cc.easeBackOut())));
            var w = this._onShowedCallback;
            this._onShowedCallback = undefined;
            if (w) {
              w();
            }
          };
          Y.prototype._playNumberEffect = function () {
            var W = this.vfxNodeD;
            var q = cc.Color.WHITE;
            var S = cc.Color.BLACK;
            W.stopAllActions();
            W.scale = 0;
            W.color = cc.Color.BLACK;
            W.runAction(cc.spawn(cc.sequence(cc.scaleTo(0.5, 8), cc.scaleTo(1, 13)), cc.sequence(cc.tintTo(0.5, q), cc.delayTime(0.1), cc.tintTo(1, S))));
          };
          Y.prototype._onStartButtonShowed = function () {
            var W = this;
            var q = this.loadingNode;
            this.loadingImage.stopAllActions();
            q.active = false;
            var S = this.startButton.node;
            S.active = true;
            S.stopAllActions();
            S.opacity = 0;
            S.runAction(cc.sequence(cc.fadeIn(0.3), cc.callFunc(function () {
              W.startButton.enabled = true;
              W._enableMouseHover();
              L.spaceBarInterrupter.subscribeEventInterrupter("bonus", W.node, W.onStartButtonClick.bind(W));
            })));
          };
          Y.prototype._enableMouseHover = function () {
            this.startButton.node.on("mouseenter", this._playMouseOverEffect, this);
            this.startButton.node.on("mouseleave", this._hideMouseOverEffect, this);
          };
          Y.prototype._disableMouseHover = function () {
            this.startButton.node.off("mouseenter", this._playMouseOverEffect, this);
            this.startButton.node.off("mouseleave", this._hideMouseOverEffect, this);
          };
          Y.prototype._playMouseOverEffect = function () {
            this.hoverShine.node.active = true;
            this.hoverShine.play();
          };
          Y.prototype._hideMouseOverEffect = function () {
            this.hoverShine.stop();
            this.hoverShine.node.active = false;
          };
          Y.prototype._reset = function () {
            this._displayState = C.DisplayState.HIDE;
            this.unschedule(this._hide);
            this.unschedule(this.onStartButtonClick);
            var W = this.startButton.node;
            W.stopAllActions();
            W.opacity = 0;
            W.active = false;
            this.loadingNumberDisplayController.clear();
            var q = this.backgroundNodeA;
            q.stopAllActions();
            q.scale = 1.43;
            var S = this.vfxNodeE;
            S.stopAllActions();
            S.opacity = 0;
            S.angle = 40;
            var z = this.vfxNodeB;
            z.stopAllActions();
            z.scale = 0;
            z.color = cc.Color.BLACK;
            var f = this.vfxNodeD;
            f.stopAllActions();
            f.scale = 0;
            f.color = cc.Color.BLACK;
            var A = this.blVfxAAnim;
            A.stop();
            A.node.active = false;
            var M = this.blVfxCParticleSystem;
            M.node.opacity = 0;
            M.stopSystem();
            M.node.active = false;
            var E = this.loadingNode;
            var F = this.loadingImage;
            E.stopAllActions();
            F.angle = 0;
            E.active = false;
            var b = this.freeSpinTextSprite.node;
            b.stopAllActions();
            b.scale = 0;
            b.active = false;
            this.freeSpinNumberDisplayController.clear();
            var H = this.freeSpinNumberDisplayController.node;
            H.stopAllActions();
            H.scale = 0;
            this.hoverShine.stop();
            this.hoverShine.node.active = false;
            var w = this.buttonClickVfx;
            w.stopAllActions();
            w.opacity = 0;
            this.node.stopAllActions();
            this.node.opacity = 0;
            this.node.active = false;
          };
          __decorate([V({
            tooltip: false,
            type: x.default
          })], Y.prototype, "freeSpinNumberDisplayController", undefined);
          __decorate([V({
            tooltip: false,
            type: x.default
          })], Y.prototype, "loadingNumberDisplayController", undefined);
          __decorate([V({
            tooltip: false,
            type: cc.Sprite
          })], Y.prototype, "startTextSprite", undefined);
          __decorate([V({
            tooltip: false,
            type: cc.Sprite
          })], Y.prototype, "freeSpinTextSprite", undefined);
          __decorate([V({
            tooltip: false,
            type: cc.Sprite
          })], Y.prototype, "descTextSprite", undefined);
          __decorate([V({
            tooltip: false,
            type: cc.Button
          })], Y.prototype, "startButton", undefined);
          __decorate([V(cc.Node)], Y.prototype, "vfx", undefined);
          __decorate([V(cc.Node)], Y.prototype, "loadingNode", undefined);
          __decorate([V(cc.Animation)], Y.prototype, "hoverShine", undefined);
          __decorate([V(cc.Node)], Y.prototype, "buttonClickVfx", undefined);
          __decorate([V(cc.Animation)], Y.prototype, "blVfxAAnim", undefined);
          __decorate([V(cc.ParticleSystem)], Y.prototype, "blVfxCParticleSystem", undefined);
          __decorate([V(cc.Node)], Y.prototype, "backgroundNodeA", undefined);
          __decorate([V(cc.Node)], Y.prototype, "vfxNodeE", undefined);
          __decorate([V(cc.Node)], Y.prototype, "vfxNodeB", undefined);
          __decorate([V(cc.Node)], Y.prototype, "vfxNodeD", undefined);
          __decorate([V(cc.Node)], Y.prototype, "loadingImage", undefined);
          return __decorate([G], Y);
        }(cc.Component);
        K.default = Q;
        cc._RF.pop();
      }
    }, {
      AudioConstant: "AudioConstant",
      AudioManager: "AudioManager",
      GameConstant: "GameConstant",
      NumberDisplayController: "NumberDisplayController",
      SpaceBarInterrupter: "SpaceBarInterrupter",
      Utils: "Utils"
    }],
    BookView: [function (R, K, g) {
      'use strict';

      if (!cc._RF.push(K, "46ec0uZUDVPMZDgV9Idp1EN", "BookView")) {
        Object.defineProperty(g, "__esModule", {
          value: true
        });
        var L = R("ScrollViewEx");
        var D = cc.Enum({
          LEFT: 1,
          RIGHT: 2,
          NULL: 3
        });
        function k(p, j) {
          return p.sub(j);
        }
        var C = cc._decorator;
        var u = C.ccclass;
        C.property;
        var c = function (p) {
          function V() {
            var Q = p !== null && p.apply(this, arguments) || this;
            Q._nodePools = {};
            Q._templates = {};
            Q._dataSource = undefined;
            return Q;
          }
          var j = {
            get: function () {
              return this._nodePools;
            },
            enumerable: false,
            configurable: true
          };
          var G = {
            get: function () {
              return this._templates;
            },
            enumerable: false,
            configurable: true
          };
          __extends(V, p);
          Object.defineProperty(V.prototype, "nodePools", j);
          Object.defineProperty(V.prototype, "templates", G);
          V.prototype.register = function (Q, N, Y) {
            if (this._nodePools[Q]) ;else if (N) {
              var W;
              W = Y ? new cc.NodePool(Y) : new cc.NodePool();
              this._templates[Q] = N;
              this._nodePools[Q] = W;
            }
          };
          V.prototype.setDataSource = function (Q) {
            if (Q !== this._dataSource) {
              this._dataSource = Q;
            }
          };
          V.prototype.reloadData = function () {
            this._unbindListener();
            this.init(this._sectionIndex);
          };
          V.prototype._createContentOuterCell = function () {
            for (this.contentChildsLayout = []; this.content.children.length < 3;) {
              var Q = this.node.width;
              var N = this.node.height;
              var Y = new cc.Node();
              var W = Y.addComponent(cc.Layout);
              W.type = cc.Layout.Type.VERTICAL;
              Y.setContentSize(Q, N);
              this.content.addChild(Y);
              this.contentChildsLayout.push(W);
            }
          };
          V.prototype._onSizeChanged = function () {
            var Q = this.node.width;
            var N = this.node.height;
            for (var Y = 0; Y < this.content.children.length; Y++) {
              this.content.children[Y].setContentSize(Q, N);
            }
            this.cellSize = Q;
            this.maxScrollArea = cc.v2(-this.cellSize * 0, -this.cellSize * 2);
            var W = this._totalLength >= this.content.children.length ? this.content.children.length : this._totalLength;
            this.distance = this.cellSize;
            var q = this.contentLayout.spacingX / W;
            this.distance += q;
            this._changeTo(this.currIndex);
          };
          V.prototype._bindListener = function () {
            this.node.on("size-changed", this._onSizeChanged, this);
          };
          V.prototype._unbindListener = function () {
            this.node.off("size-changed", this._onSizeChanged, this);
          };
          V.prototype.init = function (Q) {
            this._bindListener();
            this._createContentOuterCell();
            this.contentLayout = this.content.getComponent(cc.Layout);
            this.cellSize = this.node.width;
            this.target = 0;
            this.originalSpeed = this.speed;
            this.freeCells = [];
            this.dir = D.NULL;
            this.selected = true;
            this._sectionIndex = Q;
            this._totalLength = 0;
            this.constChildList = [];
            this.middleIndex = Math.floor(this.content.children.length / 2);
            this.currIndex = 0;
            this.itemOffSet = 0;
            this.snapPause = false;
            this.maxScrollArea = cc.v2(-this.cellSize * 0, -this.cellSize * 2);
            this._totalLength = this._dataSource.getCount(this, Q);
            for (var N = 0; N < this.content.children.length; N++) {
              var Y = undefined;
              if (N <= this._totalLength - 1) {
                if (this.content.children[N].children.length) {
                  this._enqueueReusableItem(this.content.children[N].children[0]);
                  (Y = this._dataSource.getItem(this, N, Q)).parent = this.content.children[N];
                  this.content.children[N].zIndex = N;
                  Y.cellIndex = N % this._totalLength;
                  this.content.children[N].slotID = N;
                  this.constChildList.push(Y);
                } else {
                  this.content.children[N].zIndex = N;
                  (Y = this._dataSource.getItem(this, N, Q)).parent = this.content.children[N];
                  this._bindTouchListener(Y);
                  Y.cellIndex = N % this._totalLength;
                  this.content.children[N].slotID = N;
                  this.constChildList.push(Y);
                }
              } else {
                this.content.children[N].zIndex = N;
                this.content.children[N].slotID = N;
              }
              if (this._totalLength - 1 >= N) {
                this.content.children[N].active = true;
              } else {
                this.content.children[N].active = false;
              }
            }
            if (this._totalLength >= this.content.children.length) {
              this.totalItems = this.content.children.length - 1;
            } else {
              this.totalItems = this._totalLength - 1;
            }
            var W = this._totalLength >= this.content.children.length ? this.content.children.length : this._totalLength;
            this.distance = this.cellSize;
            var q = this.contentLayout.spacingX / W;
            this.distance += q;
            this._changeTo(this.currIndex);
          };
          V.prototype.toLeftItem = function () {
            var Q = this.content.children[0].children[0].cellIndex - 1;
            if (this.currIndex === 2) {
              this.currIndex -= 1;
              this._changeTo(this.currIndex);
              if (this.nextAppearTarget) {
                this.nextAppearTarget(this.constChildList[this.content.children[this.currIndex].slotID].cellIndex);
              }
              return;
            }
            if (Q < 0) {
              if (this.currIndex === 0) {
                if (this.closeFromLeft) {
                  this.closeFromLeft();
                }
                this._changeTo(this.currIndex);
              } else {
                this.currIndex = 0;
                this._changeTo(this.currIndex);
                if (this.cancelCloseBook) {
                  this.cancelCloseBook();
                }
                if (this.nextAppearTarget) {
                  this.nextAppearTarget(this.constChildList[this.content.children[this.currIndex].slotID].cellIndex);
                }
              }
            } else {
              for (var N = 0; N < this.content.children.length; N++) {
                if (N === this.content.children.length - 1) {
                  if (Q < 0) {
                    Q = this._totalLength - 1;
                  }
                  this._enqueueReusableItem(this.content.children[N].children[0]);
                  var Y = this._dataSource.getItem(this, Q, this._sectionIndex);
                  this.constChildList[this.content.children[N].slotID] = Y;
                  this.constChildList[this.content.children[N].slotID].cellIndex = Q;
                  this.content.children[N].zIndex = 0;
                  Y.parent = this.content.children[N];
                } else {
                  this.content.children[N].zIndex += 1;
                }
              }
              this.resetLayout = true;
              this.changeIndexTo = 0;
              this.currIndex -= 1;
              if (this.nextAppearTarget) {
                this.nextAppearTarget(this.constChildList[this.content.children[this.currIndex].slotID].cellIndex);
              }
              this.contentLayout.updateLayout();
              this.content.x = this.content.x + this.itemOffSet;
              this.snapDone = false;
              this.currIndex = this.middleIndex;
            }
          };
          V.prototype.toRightItem = function () {
            var Q = this.content.children[this.totalItems].children[0].cellIndex + 1;
            if (this.currIndex === 0 && this.currIndex < this.totalItems) {
              this.currIndex += 1;
              this._changeTo(this.currIndex);
              if (this.nextAppearTarget) {
                this.nextAppearTarget(this.constChildList[this.content.children[this.currIndex].slotID].cellIndex);
              }
              return;
            }
            if (Q > this._totalLength - 1) {
              if (this.currIndex === this.totalItems) {
                if (this.closeFromRight) {
                  this.closeFromRight();
                }
                this._changeTo(this.currIndex);
              } else {
                this.currIndex = this.totalItems;
                this._changeTo(this.currIndex);
                if (this.cancelCloseBook) {
                  this.cancelCloseBook();
                }
                if (this.nextAppearTarget) {
                  this.nextAppearTarget(this.constChildList[this.content.children[this.currIndex].slotID].cellIndex);
                }
              }
            } else {
              for (var N = this.content.children.length - 1; N >= 0; N--) {
                if (N === 0) {
                  if (Q >= this._totalLength) {
                    Q = 0;
                  }
                  this._enqueueReusableItem(this.content.children[N].children[0]);
                  var Y = this._dataSource.getItem(this, Q, this._sectionIndex);
                  this.constChildList[this.content.children[N].slotID] = Y;
                  this.constChildList[this.content.children[N].slotID].cellIndex = Q;
                  this.content.children[N].zIndex = this.content.children.length - 1;
                  Y.parent = this.content.children[N];
                } else {
                  this.content.children[N].zIndex -= 1;
                }
              }
              this.resetLayout = true;
              this.changeIndexTo = 2;
              this.currIndex += 1;
              if (this.nextAppearTarget) {
                this.nextAppearTarget(this.constChildList[this.content.children[this.currIndex].slotID].cellIndex);
              }
              this.contentLayout.updateLayout();
              this.content.x = this.content.x + this.itemOffSet;
              this.snapDone = false;
              this.currIndex = this.middleIndex;
            }
          };
          V.prototype.setElasticLeft = function (Q) {
            this.elasticLeft = Q;
          };
          V.prototype.setElasticRight = function (Q) {
            this.elasticRight = Q;
          };
          V.prototype.setClosingFromLeft = function (Q) {
            this.closingFromLeft = Q;
          };
          V.prototype.setCloseFromLeft = function (Q) {
            this.closeFromLeft = Q;
          };
          V.prototype.setClosingFromRight = function (Q) {
            this.closingFromRight = Q;
          };
          V.prototype.setCloseFromRight = function (Q) {
            this.closeFromRight = Q;
          };
          V.prototype.setCancelCloseBook = function (Q) {
            this.cancelCloseBook = Q;
          };
          V.prototype.setStartScrolling = function (Q) {
            this.startScrolling = Q;
          };
          V.prototype.getAllItems = function () {
            var Q = [];
            this.content.children.forEach(function (N) {
              if (N.children.length) {
                Q.push(N.children[0]);
              }
            });
            return Q;
          };
          V.prototype.scrollTo = function (Q) {
            if (this.snapDone && !this.snapPause) {
              var N = this.content.children[this.currIndex].children[0].cellIndex;
              if (N !== Q && !(Q > this._totalLength - 1) && !(Q < 0)) {
                if (Q > N) {
                  if (Q === N + 1) {
                    if (this.currIndex === 0) {
                      this.toRightItem();
                    } else {
                      this.dir = D.RIGHT;
                      this.itemOffSet = this.cellSize;
                      this._recycleItem();
                    }
                  } else if (this.currIndex === 0) {
                    var Y = this.content.children.length - 1;
                    this._enqueueReusableItem(this.content.children[Y].children[0]);
                    var W = this._dataSource.getItem(this, Q, this._sectionIndex);
                    this.constChildList[this.content.children[Y].slotID] = W;
                    this.constChildList[this.content.children[Y].slotID].cellIndex = Q;
                    W.parent = this.content.children[Y];
                    this.speed = 10;
                    this.currIndex = 2;
                    this.reloadCells = true;
                    this._changeTo(this.currIndex);
                  } else {
                    var q = Q;
                    for (var S = this.content.children.length - 1; S >= 0; S--) {
                      if (S === 0) {
                        this.content.children[S].zIndex = 2;
                        this._enqueueReusableItem(this.content.children[S].children[0]);
                        W = this._dataSource.getItem(this, q, this._sectionIndex);
                        this.constChildList[this.content.children[S].slotID] = W;
                        this.constChildList[this.content.children[S].slotID].cellIndex = q;
                        W.parent = this.content.children[S];
                      } else {
                        this.content.children[S].zIndex = S === 1 ? 0 : 1;
                      }
                    }
                    this.currIndex = 0;
                    this.changeIndexTo = 2;
                    this.changeContentPos = true;
                  }
                } else if (Q === N - 1) {
                  if (this.currIndex === 2) {
                    this.toLeftItem();
                  } else {
                    this.dir = D.LEFT;
                    this.itemOffSet = -this.cellSize;
                    this._recycleItem();
                  }
                } else if (this.currIndex === this.content.children.length - 1) {
                  q = 0;
                  this._enqueueReusableItem(this.content.children[q].children[0]);
                  W = this._dataSource.getItem(this, Q, this._sectionIndex);
                  this.constChildList[this.content.children[q].slotID] = W;
                  this.constChildList[this.content.children[q].slotID].cellIndex = Q;
                  W.parent = this.content.children[q];
                  this.speed = 10;
                  this.currIndex = 0;
                  this.reloadCells = true;
                  this._changeTo(this.currIndex);
                } else {
                  Y = Q;
                  S = this.content.children.length - 1;
                  for (; S >= 0; S--) {
                    if (S === 2) {
                      this.content.children[S].zIndex = 0;
                      this._enqueueReusableItem(this.content.children[S].children[0]);
                      W = this._dataSource.getItem(this, Y, this._sectionIndex);
                      this.constChildList[this.content.children[S].slotID] = W;
                      this.constChildList[this.content.children[S].slotID].cellIndex = Y;
                      W.parent = this.content.children[S];
                    } else {
                      this.content.children[S].zIndex = S === 1 ? 2 : 1;
                    }
                  }
                  this.currIndex = 2;
                  this.changeIndexTo = 0;
                  this.changeContentPos = true;
                }
              }
            }
          };
          V.prototype.dequeueReusableItem = function (Q) {
            var N;
            var Y = this._nodePools[Q];
            if (Y) {
              if (!(N = Y.get())) {
                var W = this._templates[Q];
                N = cc.instantiate(W);
              }
              N.lv_type = Q;
            }
            return N;
          };
          V.prototype._enqueueReusableItem = function (Q) {
            var N;
            var Y = Q.lv_type;
            if (Y) {
              N = this._nodePools[Y];
            }
            if (N) {
              N.put(Q);
            }
          };
          V.prototype._reloadCellsData = function () {
            var Q = this.content.children[this.currIndex].children[0].cellIndex;
            if (Q === this._totalLength - 1) {
              var N = Q - 2;
              var Y = Q - 1;
              for (var W = this.content.children.length - 1; W >= 0; W--) {
                if (W === 0) {
                  this._enqueueReusableItem(this.content.children[W].children[0]);
                  var q = this._dataSource.getItem(this, N, this._sectionIndex);
                  this.constChildList[this.content.children[W].slotID] = q;
                  this.constChildList[this.content.children[W].slotID].cellIndex = N;
                  q.parent = this.content.children[W];
                } else if (W === 1) {
                  this._enqueueReusableItem(this.content.children[W].children[0]);
                  q = this._dataSource.getItem(this, Y, this._sectionIndex);
                  this.constChildList[this.content.children[W].slotID] = q;
                  this.constChildList[this.content.children[W].slotID].cellIndex = Y;
                  q.parent = this.content.children[W];
                }
              }
            } else if (Q === 0) {
              Y = Q + 1;
              var S = Q + 2;
              for (W = this.content.children.length - 1; W >= 0; W--) {
                if (W === 1) {
                  this._enqueueReusableItem(this.content.children[W].children[0]);
                  q = this._dataSource.getItem(this, Y, this._sectionIndex);
                  this.constChildList[this.content.children[W].slotID] = q;
                  this.constChildList[this.content.children[W].slotID].cellIndex = Y;
                  q.parent = this.content.children[W];
                } else if (W === 2) {
                  this._enqueueReusableItem(this.content.children[W].children[0]);
                  q = this._dataSource.getItem(this, S, this._sectionIndex);
                  this.constChildList[this.content.children[W].slotID] = q;
                  this.constChildList[this.content.children[W].slotID].cellIndex = S;
                  q.parent = this.content.children[W];
                }
              }
            } else if (this.currIndex === 0) {
              Y = Q + 1;
              S = Q - 1;
              W = this.content.children.length - 1;
              for (; W >= 0; W--) {
                if (W === 1) {
                  this.content.children[W].zIndex = 2;
                  this._enqueueReusableItem(this.content.children[W].children[0]);
                  q = this._dataSource.getItem(this, Y, this._sectionIndex);
                  this.constChildList[this.content.children[W].slotID] = q;
                  this.constChildList[this.content.children[W].slotID].cellIndex = Y;
                  q.parent = this.content.children[W];
                } else if (W === 2) {
                  this.content.children[W].zIndex = 0;
                  this._enqueueReusableItem(this.content.children[W].children[0]);
                  q = this._dataSource.getItem(this, S, this._sectionIndex);
                  this.constChildList[this.content.children[W].slotID] = q;
                  this.constChildList[this.content.children[W].slotID].cellIndex = S;
                  q.parent = this.content.children[W];
                } else {
                  this.content.children[W].zIndex = 1;
                }
              }
              this.resetContentPos = true;
            } else {
              N = Q + 1;
              Y = Q - 1;
              W = this.content.children.length - 1;
              for (; W >= 0; W--) {
                if (W === 0) {
                  this.content.children[W].zIndex = 2;
                  this._enqueueReusableItem(this.content.children[W].children[0]);
                  q = this._dataSource.getItem(this, N, this._sectionIndex);
                  this.constChildList[this.content.children[W].slotID] = q;
                  this.constChildList[this.content.children[W].slotID].cellIndex = N;
                  q.parent = this.content.children[W];
                } else if (W === 1) {
                  this.content.children[W].zIndex = 0;
                  this._enqueueReusableItem(this.content.children[W].children[0]);
                  q = this._dataSource.getItem(this, Y, this._sectionIndex);
                  this.constChildList[this.content.children[W].slotID] = q;
                  this.constChildList[this.content.children[W].slotID].cellIndex = Y;
                  q.parent = this.content.children[W];
                } else {
                  this.content.children[W].zIndex = 1;
                }
              }
              this.resetContentPos = true;
            }
          };
          V.prototype._changeTo = function (Q) {
            if (!(Q > this.totalItems) && !(Q < 0)) {
              this.currIndex = Q;
              this.target = -this.currIndex * this.distance;
              this.snapDone = false;
            }
          };
          V.prototype._recycleItem = function () {
            if (this.dir === D.LEFT && this.content.x > this.maxScrollArea.y) {
              this.toLeftItem();
            } else if (this.dir === D.RIGHT && this.content.x < this.maxScrollArea.x) {
              this.toRightItem();
            }
            this.dir = D.NULL;
          };
          V.prototype.update = function (Q) {
            var N = this;
            if (this.snapDone || this.snapPause) {
              if (this.changeContentPos) {
                this.changeContentPos = false;
                this.target = -this.currIndex * this.distance;
                this.content.x = -this.currIndex * this.distance;
                this._changeTo(this.changeIndexTo);
                this.reloadCells = true;
              }
            } else {
              this.content.x = this._lerp1D(this.content.x, this.target, Q, this.speed, function () {
                if (N.snapFinish) {
                  N.snapFinish(N.constChildList[N.content.children[N.currIndex].slotID].cellIndex);
                }
                if (N.reloadCells) {
                  N.reloadCells = false;
                  N.speed = N.originalSpeed;
                  N._reloadCellsData();
                }
              });
              if (this.resetContentPos) {
                this.resetContentPos = false;
                this.currIndex = this.middleIndex;
                this.target = -this.currIndex * this.distance;
                this.content.x = -this.currIndex * this.distance;
              }
              this.content.sortAllChildren();
            }
          };
          V.prototype._onTouchBegan = function (Q, N) {
            if (!this.reloadCells && this.content.children.length) {
              this.snapPause = true;
              var Y = Q.touch;
              var W = cc.v2(Y.getLocation().x, Y.getLocation().y);
              this.startPos = W;
              this._onBegan(Q, N);
            } else {
              this.startPos = null;
            }
          };
          V.prototype._onTouchMoved = function (Q, N) {
            var Y = Q.touch;
            var W = cc.v2(Y.getLocation().x, Y.getLocation().y);
            if (this.startPos && this.content.children.length) {
              if (this.startPos.x < W.x) {
                if (this.elasticLeft != null) {
                  this.elastic = this.elasticLeft;
                }
                if (this.content.children[0].children[0].cellIndex === 0 && this.currIndex === 0) {
                  if (this.selected && this.closingFromLeft) {
                    this.closingFromLeft(this.startPos.x, W.x);
                  }
                  if (this.content.x !== 0 && this.selected) {
                    this._onMove(Q, N);
                  }
                } else if (this.selected) {
                  this._onMove(Q, N);
                }
              } else {
                if (this.elasticRight != null) {
                  this.elastic = this.elasticRight;
                }
                if (this.content.children[this.totalItems].children[0].cellIndex + 1 === this._totalLength && this.currIndex === this.totalItems) {
                  if (this.selected && this.closingFromRight) {
                    this.closingFromRight(this.startPos.x, W.x);
                  }
                  if (this.content.x !== this.content.width && this.selected) {
                    this._onMove(Q, N);
                  }
                } else if (this.selected) {
                  this._onMove(Q, N);
                }
              }
              if (this.content.x > 0 && this.elasticLeft != null) {
                this.elastic = this.elasticLeft;
              } else if (this.content.x > -this.content.width && this.elasticRight != null) {
                this.elastic = this.elasticRight;
              }
            }
          };
          V.prototype._onTouchEnded = function (Q, N) {
            if (!this.reloadCells && this.content.children.length) {
              this.dragElastic = false;
              var Y = Q.touch;
              var W = cc.v2(Y.getLocation().x, Y.getLocation().y);
              this.currentPos = W;
              if (this.startPos) {
                if (this._touchMinDistance(this.startPos.x, this.currentPos.x) && this.selected) {
                  if (this.dir != D.RIGHT && this.startPos.x > this.currentPos.x) {
                    this.dir = D.RIGHT;
                    this.itemOffSet = this.cellSize;
                    this._recycleItem();
                    if (this.cancelCloseBook) {
                      this.cancelCloseBook();
                    }
                  } else if (this.dir != D.LEFT && this.startPos.x < this.currentPos.x) {
                    this.dir = D.LEFT;
                    this.itemOffSet = -this.cellSize;
                    this._recycleItem();
                  } else {
                    this._changeTo(this.currIndex);
                    if (this.cancelCloseBook) {
                      this.cancelCloseBook();
                    }
                  }
                } else {
                  this._changeTo(this.currIndex);
                  if (this.cancelCloseBook) {
                    this.cancelCloseBook();
                  }
                }
                this.snapPause = false;
                this._onEnded(Q, N);
              }
            }
          };
          V.prototype._onTouchCancelled = function (Q, N) {
            if (!this.reloadCells && this.content.children.length) {
              this.dragElastic = false;
              var Y = Q.touch;
              var W = cc.v2(Y.getLocation().x, Y.getLocation().y);
              this.currentPos = W;
              if (this.startPos) {
                if (this._touchMinDistance(this.startPos.x, this.currentPos.x) && this.selected) {
                  if (this.dir != D.RIGHT && this.startPos.x > this.currentPos.x) {
                    this.dir = D.RIGHT;
                    this.itemOffSet = this.cellSize;
                    this._recycleItem();
                    if (this.cancelCloseBook) {
                      this.cancelCloseBook();
                    }
                  } else if (this.dir != D.LEFT && this.startPos.x < this.currentPos.x) {
                    this.dir = D.LEFT;
                    this.itemOffSet = -this.cellSize;
                    this._recycleItem();
                  } else {
                    this._changeTo(this.currIndex);
                    if (this.cancelCloseBook) {
                      this.cancelCloseBook();
                    }
                  }
                } else {
                  this._changeTo(this.currIndex);
                  if (this.cancelCloseBook) {
                    this.cancelCloseBook();
                  }
                }
                this.snapPause = false;
                this._onCancelled(Q, N);
              }
            }
          };
          V.prototype._onBegan = function (Q) {
            this.clickBegan = true;
            if (this.enabledInHierarchy) {
              var N = Q.touch;
              if (this.content) {
                this._handlePressLogic(N);
              }
              this._touchMoved = false;
              this._stopPropagationIfTargetIsMe(Q);
            }
          };
          V.prototype._onMove = function (Q) {
            if (this.clickBegan) {
              this.clickBegan = false;
              if (this.startScrolling) {
                this.startScrolling();
              }
            }
            if (this.enabledInHierarchy) {
              var N = Q.touch;
              if (this.content) {
                this._handleMoveLogic(N);
              }
              if (this.cancelInnerEvents) {
                var Y;
                Y = N.getLocation();
                N.getStartLocation();
                var W = Y.mag();
                if (k(W) > 7 && !this._touchMoved && Q.target !== this.node) {
                  var q = new cc.Event.EventTouch(Q.getTouches(), Q.bubbles);
                  q.type = cc.Node.EventType.TOUCH_CANCEL;
                  q.touch = Q.touch;
                  q.simulate = true;
                  Q.target.dispatchEvent(q);
                  this._touchMoved = true;
                }
                this._stopPropagationIfTargetIsMe(Q);
              }
            }
          };
          V.prototype._onEnded = function (Q) {
            this.clickBegan = false;
            if (this.enabledInHierarchy) {
              var N = Q.touch;
              if (this.content) {
                this._handleReleaseLogic(N);
              }
              this._dispatchEvent("touch-up");
              if (this._touchMoved) {
                Q.stopPropagation();
              } else {
                this._stopPropagationIfTargetIsMe(Q);
              }
            }
          };
          V.prototype._onCancelled = function (Q) {
            this.clickBegan = false;
            if (this.enabledInHierarchy) {
              if (!Q.simulate) {
                var N = Q.touch;
                if (this.content) {
                  this._handleReleaseLogic(N);
                }
              }
              this._stopPropagationIfTargetIsMe(Q);
            }
          };
          V.prototype._mouseWheelHorizontal = function () {
            if (this._mouseWheelEvent && this._mouseWheelEvent.getScrollY() > 0) {
              this.dir = D.RIGHT;
            } else if (this._mouseWheelEvent && this._mouseWheelEvent.getScrollY() < 0) {
              this.dir = D.LEFT;
            }
          };
          V.prototype._onMouseWheelStart = function () {
            this.snapPause = true;
            this.snapDone = true;
          };
          V.prototype._onMouseWheelEnd = function () {
            this.itemOffSet = this.cellSize;
            this._recycleItem();
            this.snapPause = false;
            this._mouseWheelEvent = undefined;
          };
          V.prototype._onMouseWheel = function (Q) {
            if (this.content.children.length && this.enabledInHierarchy) {
              this._mouseWheelEvent = Q;
              var N = cc.v2(0, 0);
              if (this.vertical) {
                N = cc.v2(0, Q.getScrollY() * -0.1);
              } else if (this.horizontal) {
                N = cc.v2(Q.getScrollY() * -0.1, 0);
                this._mouseWheelHorizontal();
              }
              this._mouseWheelEventElapsedTime = 0;
              this._processDeltaMove(N);
              if (!this._stopMouseWheel) {
                this._handlePressLogic();
                this.schedule(this._checkMouseWheel, 1 / 60);
                this._stopMouseWheel = true;
                this._onMouseWheelStart();
              }
              this._stopPropagationIfTargetIsMe(Q);
            }
          };
          V.prototype._checkMouseWheel = function (Q) {
            var N;
            var Y;
            N = this._getHowMuchOutOfBoundary();
            Y = cc.v2(0, 0);
            0.0001;
            if (!N.fuzzyEquals(Y, 0.0001)) {
              this._processInertiaScroll();
              this.unschedule(this._checkMouseWheel);
              this._stopMouseWheel = false;
              this._onMouseWheelEnd();
              return;
            }
            this._mouseWheelEventElapsedTime += Q;
            if (this._mouseWheelEventElapsedTime > 0.1) {
              this._onScrollBarTouchEnded();
              this.unschedule(this._checkMouseWheel);
              this._stopMouseWheel = false;
              this._onMouseWheelEnd();
            }
          };
          return __decorate([u], V);
        }(L.default);
        g.default = c;
        cc._RF.pop();
      }
    }, {
      ScrollViewEx: "ScrollViewEx"
    }],
    ButtonBackground: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "96252/qWvdGA7VOxWpX5d7v", "ButtonBackground")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("UIAppearanceHelper");
        var x = cc._decorator;
        var L = x.ccclass;
        var D = x.property;
        var k = function (C) {
          function u() {
            var c = C !== null && C.apply(this, arguments) || this;
            c.background = undefined;
            c.backgroundColorKey = "";
            return c;
          }
          __extends(u, C);
          u.prototype.onLoad = function () {
            this.background.color = T.uiAppearanceHelper.v("" + this.backgroundColorKey) ? T.uiAppearanceHelper.v("" + this.backgroundColorKey) : T.uiAppearanceHelper.v("setting.theme_color");
          };
          __decorate([D(cc.Node)], u.prototype, "background", undefined);
          __decorate([D(cc.String)], u.prototype, "backgroundColorKey", undefined);
          return __decorate([L], u);
        }(cc.Component);
        K.default = k;
        cc._RF.pop();
      }
    }, {
      UIAppearanceHelper: "UIAppearanceHelper"
    }],
    ButtonController: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "b879fiUzY1Om5HhXaCp7Qrf", "ButtonController")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = cc._decorator.ccclass;
        var x = function (L) {
          function D() {
            var k = L !== null && L.apply(this, arguments) || this;
            k._onClickCallback = undefined;
            return k;
          }
          __extends(D, L);
          D.prototype.setClickCallback = function (k) {
            this._onClickCallback = k;
          };
          D.prototype.onClick = function () {
            if (this._onClickCallback) {
              this._onClickCallback();
            }
          };
          D.prototype.clearClickCallback = function () {
            this._onClickCallback = undefined;
          };
          D.prototype.getControllerAndHandlerName = function () {
            return {
              ControllerName: "ButtonController",
              HandlerName: "onClick"
            };
          };
          return __decorate([T], D);
        }(cc.Component);
        K.default = x;
        cc._RF.pop();
      }
    }, {}],
    ButtonHitTest: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "95aac3PHb1J8pXlbPzijfq9", "ButtonHitTest")) {
        K.__esModule = true;
        K.buttonHitTest = function (x) {
          var L = cc.EventListener.ListenerID.TOUCH_ONE_BY_ONE;
          cc.internal.eventManager[T._sortListenersOfSceneGraphPriority](L, cc.director.getScene());
          var D = cc.internal.eventManager[T._getListeners](L);
          if (!D) {
            return false;
          }
          var k;
          for (var C = D[T._sceneGraphListeners], u = x.parent.convertToWorldSpaceAR(x.getPosition()), c = 0; c < C.length; ++c) {
            if (C[c].owner[T._hitTest](u, C[c])) {
              k = C[c].owner;
              break;
            }
          }
          return k && k === x;
        };
        var T = cc.Enum({
          _sortListenersOfSceneGraphPriority: "_sortListenersOfSceneGraphPriority",
          _getListeners: "_getListeners",
          _hitTest: "_hitTest",
          _sceneGraphListeners: "_sceneGraphListeners"
        });
        cc._RF.pop();
      }
    }, {}],
    ButtonTheme: [function (R, K, g) {
      'use strict';

      if (!cc._RF.push(K, "2a5d1nUeQZE9KCVbljwPCZP", "ButtonTheme")) {
        g.__esModule = true;
        g.default = undefined;
        var L = R("UIAppearanceHelper");
        var D = cc.Enum({
          NONE: 0,
          COLOR: 1,
          SPRITE: 2,
          SCALE: 3
        });
        var k = cc.Class({
          extends: cc.Component,
          ctor: function () {},
          editor: false,
          properties: {
            transition: {
              default: D.NONE,
              tooltip: false,
              type: D,
              animatable: false,
              notify: function () {
                this._updateButtonTransitionSelection();
              }
            },
            domainKey: {
              tooltip: false,
              default: ""
            },
            colorKey: {
              tooltip: false,
              default: "",
              notify: function () {
                this._updateButtonColorTransition();
              }
            }
          },
          onLoad: function () {
            this._button = this.node.getComponent(cc.Button);
            this._updateButtonTransitionSelection();
            this._updateButtonColorTransition();
          },
          _updateButtonTransitionSelection: function () {
            var C = this._button;
            if (C) {
              C.transition = this.transition;
            }
          },
          _updateButtonColorTransition: function () {
            var C = this._button;
            if (C && this.transition == D.COLOR) {
              this.domainKey;
              this.colorKey;
              var u = L.uiAppearanceHelper.v(this.domainKey + "." + this.colorKey + ".normal");
              var c = L.uiAppearanceHelper.v(this.domainKey + "." + this.colorKey + ".pressed");
              var p = L.uiAppearanceHelper.v(this.domainKey + "." + this.colorKey + ".hover");
              var j = L.uiAppearanceHelper.v(this.domainKey + "." + this.colorKey + ".disabled");
              if (u) {
                C.node.opacity = u.getA();
                C.normalColor = u;
                C.pressedColor = c;
                C.hoverColor = p;
                C.disabledColor = j;
              }
            }
          }
        });
        g.default = k;
        K.exports = g.default;
        cc._RF.pop();
      }
    }, {
      UIAppearanceHelper: "UIAppearanceHelper"
    }],
    Button: [function (R, K, g) {
      'use strict';

      if (!cc._RF.push(K, "0a573tIV9xKS4qfPLe+tVuo", "Button")) {
        Object.defineProperty(g, "__esModule", {
          value: true
        });
        var L = cc.Enum({
          _transitionFinished: "_transitionFinished",
          _fromColor: "_fromColor",
          _toColor: "_toColor",
          _fromScale: "_fromScale",
          _toScale: "_toScale",
          _pressed: "_pressed"
        });
        var D = cc._decorator;
        var k = D.ccclass;
        var C = D.property;
        var u = function (c) {
          function p() {
            var j = c !== null && c.apply(this, arguments) || this;
            j.targetCascadeOpacity = false;
            j._touchBeganPosition = undefined;
            return j;
          }
          __extends(p, c);
          p.prototype.update = function (j) {
            var l = this.target;
            if (!this[L._transitionFinished] && (this.transition === cc.Button.Transition.COLOR || this.transition === cc.Button.Transition.SCALE)) {
              this.time += j;
              var G;
              var V;
              var Q;
              var N = 1;
              if (this.duration > 0) {
                N = this.time / this.duration;
              }
              if (N >= 1) {
                N = 1;
                this[L._transitionFinished] = true;
              }
              if (this.transition === cc.Button.Transition.COLOR) {
                this[L._fromColor].a = l.opacity;
                var Y = this[L._fromColor].lerp(this[L._toColor], N);
                l.opacity = Y.a;
                Y.a = 255;
                l.color = Y;
              } else if (this.transition === cc.Button.Transition.SCALE) {
                G = this[L._fromScale];
                V = this[L._toScale];
                Q = N;
                l.scale = cc.misc.lerp(G, V, Q);
              }
            }
          };
          p.prototype._onTouchBegan = function (j) {
            this._touchBeganPosition = this.node.parent.convertToWorldSpaceAR(j.touch.getLocation());
            c.prototype._onTouchBegan.call(this, j);
          };
          p.prototype._onTouchMove = function (j) {
            var l;
            if (this[L._pressed]) {
              l = this.node.parent.convertToWorldSpaceAR(j.touch.getLocation());
              if (this._touchBeganPosition.sub(l).mag() > 50) {
                this[L._pressed] = false;
                this._touchBeganPosition = undefined;
              }
            } else {
              this._touchBeganPosition = undefined;
            }
            c.prototype._onTouchMove.call(this, j);
          };
          __decorate([C(cc.Boolean)], p.prototype, "targetCascadeOpacity", undefined);
          return __decorate([k], p);
        }(cc.Button);
        g.default = u;
        cc._RF.pop();
      }
    }, {}],
    CanvasResizeBroadcaster: [function (Z, I) {
      'use strict';

      if (!cc._RF.push(I, "1bceeNXbqdLOquKoj3nUFeA", "CanvasResizeBroadcaster")) {
        var R = System.get("common").CanvasResizeBroadcaster;
        I.exports.default = R;
        I.exports.__esModule = true;
        cc._RF.pop();
      }
    }, {}],
    ClickEffectController: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "9c1bbOo47dBVKQhy7Uc4JE2", "ClickEffectController")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = cc._decorator;
        var x = T.ccclass;
        var L = T.property;
        var D = function (k) {
          function C() {
            var u = k !== null && k.apply(this, arguments) || this;
            u.flashSpriteNode = undefined;
            u.clickEffectNode = undefined;
            u._clickEffectAnim = undefined;
            return u;
          }
          __extends(C, k);
          C.prototype.onLoad = function () {
            this._clickEffectAnim = this.clickEffectNode.getComponent(cc.Animation);
          };
          C.prototype.showClickEffect = function (u) {
            var c = this.node.convertToNodeSpaceAR(u);
            this.clickEffectNode.setPosition(c);
            this._clickEffectAnim.play("click_effect");
          };
          C.prototype.showFlash = function () {
            this.flashSpriteNode.runAction(cc.sequence(cc.spawn(cc.scaleTo(0.3, 150), cc.sequence(cc.delayTime(0.05), cc.fadeOut(0.3))), cc.callFunc(this._resetFlash, this)));
          };
          C.prototype._resetFlash = function () {
            var u = this.flashSpriteNode;
            u.opacity = 128;
            u.scale = 0;
          };
          __decorate([L(cc.Node)], C.prototype, "flashSpriteNode", undefined);
          __decorate([L(cc.Node)], C.prototype, "clickEffectNode", undefined);
          return __decorate([x], C);
        }(cc.Component);
        K.default = D;
        cc._RF.pop();
      }
    }, {}],
    CommonDummy: [function (Z, I) {
      'use strict';

      if (!cc._RF.push(I, "b1293aDfltLSYBmQFiPHMGc", "CommonDummy")) {
        cc._RF.pop();
      }
    }, {}],
    CreatorTweaks: [function (Z, I) {
      'use strict';

      if (!cc._RF.push(I, "a569ek937NGRIiNfWZy/vYu", "CreatorTweaks")) {
        I.exports = {};
        I.exports.__esModule = true;
        cc._RF.pop();
      }
    }, {}],
    DataSource: [function (Z, I) {
      'use strict';

      if (!cc._RF.push(I, "33f97XHWf5KOK2d9LLYgXNI", "DataSource")) {
        var R = System.get("bvframework").DataSource;
        I.exports.default = R;
        I.exports.__esModule = true;
        cc._RF.pop();
      }
    }, {}],
    DefaultStartScroller: [function (R, K, g) {
      'use strict';

      if (!cc._RF.push(K, "a9e6d7qkYZPw5K5UPSZUUME", "DefaultStartScroller")) {
        Object.defineProperty(g, "__esModule", {
          value: true
        });
        var x = {
          scrollCallback: undefined,
          maxSpeed: -5040,
          accelerateDuration: 0.15,
          accelerateFactor: 1.68,
          accelerateDistance: -378,
          bounceDistance: 60,
          bounceDuration: 0.15,
          bounceFactor: 1.84
        };
        var L = R("BaseScroller");
        var D = x;
        var k = function (C) {
          function u(c) {
            var p = C.call(this, __assign(__assign({}, D), c)) || this;
            p.accumulatedTime = 0;
            p.previousY = 0;
            p.bindedRunUpdate = undefined;
            p.bindedEndUpdate = undefined;
            p.bindedRunUpdate = p.runUpdate.bind(p);
            p.bindedEndUpdate = p.endUpdate.bind(p);
            return p;
          }
          __extends(u, C);
          u.prototype.onReset = function () {
            this.update = undefined;
          };
          u.prototype.onRun = function () {
            this.emitEvent(L.SCROLLER_EVENT.RUN);
            this.accumulatedTime = 0;
            this.previousY = 0;
            this.update = this.bindedRunUpdate;
          };
          u.prototype.onEnd = function () {
            this.update = this.bindedEndUpdate;
            this.emitEvent(L.SCROLLER_EVENT.END);
          };
          u.prototype.runUpdate = function (c) {
            var p = this.runtimeConfig;
            c = this.accumulatedTime += c;
            var j = p.bounceDuration;
            if (c <= j) {
              var l = 1 - Math.pow(1 - c / j, p.bounceFactor);
              var G = p.bounceDistance * l;
              p.scrollCallback(this, G - this.previousY);
              this.previousY = G;
              return;
            }
            c -= j;
            var V = p.accelerateDuration;
            if (c < V) {
              l = Math.pow(c / V, p.accelerateFactor);
              G = p.accelerateDistance * l + p.bounceDistance;
              p.scrollCallback(this, G - this.previousY);
              this.previousY = G;
              this.emitEvent(L.SCROLLER_EVENT.ACCELERATE, l);
              return;
            }
            this.emitEvent(L.SCROLLER_EVENT.ACCELERATE, 1);
            this.end();
          };
          u.prototype.endUpdate = function (c) {
            this.runtimeConfig.scrollCallback(this, c * this.runtimeConfig.maxSpeed);
          };
          return u;
        }(L.default);
        g.default = k;
        cc._RF.pop();
      }
    }, {
      BaseScroller: "BaseScroller"
    }],
    DefaultStopScroller: [function (R, K, g) {
      'use strict';

      if (!cc._RF.push(K, "080a20w+h1E6aNSIb84n3TU", "DefaultStopScroller")) {
        Object.defineProperty(g, "__esModule", {
          value: true
        });
        var x = {
          scrollCallback: undefined,
          getStopDistance: undefined,
          maxSpeed: -5040,
          endSpeed: -4680,
          bounceDistance: -60,
          bounceDuration: 0.15,
          bounceFactor: 1.84
        };
        var L = R("BaseScroller");
        var D = x;
        var k = function (C) {
          function u(c) {
            var p = C.call(this, __assign(__assign({}, D), c)) || this;
            p.changeSpeedDuration = 0;
            p.changeSpeedTimer = 0;
            p.previousMaxSpeed = 0;
            p.accumulatedTime = 0;
            p.previousY = 0;
            p.endY = 0;
            p.decelerateDistance = 0;
            p.decelerateDuration = 0;
            p.halfDeceleration = 0;
            p.notified = false;
            p.bindedIdleUpdate = undefined;
            p.bindedRunUpdate = undefined;
            p.bindedIdleUpdate = p.idleUpdate.bind(p);
            p.bindedRunUpdate = p.runUpdate.bind(p);
            return p;
          }
          __extends(u, C);
          u.prototype.onReset = function () {
            this.endY = 0;
            this.previousY = 0;
            this.changeSpeedDuration = 0;
            this.notified = false;
            this.update = this.bindedIdleUpdate;
          };
          u.prototype.onRun = function () {
            this.emitEvent(L.SCROLLER_EVENT.RUN);
            var c = this.runtimeConfig;
            var p = this.endY = c.getStopDistance(this);
            var j = this.decelerateDistance = p + c.bounceDistance;
            var l = this.decelerateDuration = j * 2 / (c.maxSpeed + c.endSpeed);
            this.halfDeceleration = (c.endSpeed - c.maxSpeed) / l / 2;
            this.previousY = 0;
            this.notified = false;
            this.accumulatedTime = 0;
            this.update = this.bindedRunUpdate;
          };
          u.prototype.onEnd = function () {
            if (!this.notified) {
              this.notified = true;
              this.emitEvent(L.SCROLLER_EVENT.DECELERATE, 0);
            }
            var c = this.endY;
            if (c === 0) {
              c = this.runtimeConfig.getStopDistance(this);
            }
            var p = c - this.previousY;
            if (p) {
              this.runtimeConfig.scrollCallback(this, p);
            }
            this.update = undefined;
            this.emitEvent(L.SCROLLER_EVENT.END);
          };
          u.prototype.idleUpdate = function (c) {
            var p = this.changeSpeedDuration;
            if (p) {
              var j = this.changeSpeedTimer += c;
              if (!(j >= p)) {
                var l = this.previousMaxSpeed;
                var G = l + (this.runtimeConfig.maxSpeed - l) * j / p;
                this.runtimeConfig.scrollCallback(this, c * G);
                return;
              }
              this.changeSpeedDuration = 0;
            }
            this.runtimeConfig.scrollCallback(this, c * this.runtimeConfig.maxSpeed);
          };
          u.prototype.runUpdate = function (c) {
            var p = this.runtimeConfig;
            c = this.accumulatedTime += c;
            var j = this.decelerateDuration;
            if (c < j) {
              var l = p.maxSpeed * c + this.halfDeceleration * c * c;
              p.scrollCallback(this, l - this.previousY);
              this.previousY = l;
              this.emitEvent(L.SCROLLER_EVENT.DECELERATE, 1 - c / j);
              return;
            }
            if (!this.notified) {
              this.notified = true;
              this.emitEvent(L.SCROLLER_EVENT.DECELERATE, 0);
            }
            c -= j;
            var G = p.bounceDuration;
            if (c < G) {
              var V = 1 - Math.pow(1 - c / G, p.bounceFactor);
              l = this.decelerateDistance - p.bounceDistance * V;
              p.scrollCallback(this, l - this.previousY);
              this.previousY = l;
              return;
            }
            this.end();
          };
          u.prototype.getDecelerateDuration = function () {
            return this.decelerateDuration;
          };
          u.prototype.changeIdleSpeed = function (c, p) {
            var j = this.runtimeConfig;
            this.previousMaxSpeed = j.maxSpeed;
            j.maxSpeed = p;
            this.changeSpeedDuration = c;
            this.changeSpeedTimer = 0;
          };
          return u;
        }(L.default);
        g.default = k;
        cc._RF.pop();
      }
    }, {
      BaseScroller: "BaseScroller"
    }],
    Deserializer: [function (Z, I) {
      'use strict';

      if (!cc._RF.push(I, "755a5d0q9ZMN7vreqSy6/g4", "Deserializer")) {
        var R = System.get("common").Deserialiser;
        I.exports.Deserializer = R;
        I.exports.__esModule = true;
        cc._RF.pop();
      }
    }, {}],
    DrawLine: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "0b006l9a0tOS5No6bQvo8YJ", "DrawLine")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = cc._decorator;
        var x = T.ccclass;
        var L = T.property;
        var D = function (k) {
          function C() {
            var u = k !== null && k.apply(this, arguments) || this;
            u.horizontal = true;
            u.vertical = false;
            return u;
          }
          __extends(C, k);
          C.prototype.onLoad = function () {
            this.graphics = this.node.addComponent(cc.Graphics);
            this._drawLine();
            this.node.on("size-changed", this._drawLine, this);
          };
          C.prototype._drawLine = function () {
            var u;
            var c;
            this.graphics.clear();
            if (this.horizontal) {
              u = -this.node.width * this.node.anchorX;
              c = this.node.width - this.node.width * this.node.anchorX;
              this.graphics.moveTo(u, this.node.height / 2);
              this.graphics.lineTo(c, this.node.height / 2);
            } else {
              u = this.node.height * this.node.anchorX;
              c = this.node.height * this.node.anchorX - this.node.height;
              this.graphics.moveTo(this.node.width / 2, u);
              this.graphics.lineTo(this.node.width / 2, c);
            }
            this.graphics.stroke();
          };
          C.prototype.onDestroy = function () {
            this.node.off("size-changed", this._drawLine, this);
            this.graphics.clear();
          };
          __decorate([L(cc.Boolean)], C.prototype, "horizontal", undefined);
          __decorate([L(cc.Boolean)], C.prototype, "vertical", undefined);
          return __decorate([x], C);
        }(cc.Component);
        K.default = D;
        cc._RF.pop();
      }
    }, {}],
    EffectItemRegisterHandler: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "6ebd6TJAR9CwJRpqoGa/c3s", "EffectItemRegisterHandler")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        K.effectItemRegisterHandler = K.EffectItemRegisterHandler = undefined;
        var T = I("NodePoolHandler");
        var x = function () {
          function D() {}
          D.prototype.init = function (k) {
            k.forEach(function (C) {
              T.nodePoolHandler.registerReusableItem(C.name, C.itemPrefab, C.handler, C.value);
            });
          };
          return D;
        }();
        K.EffectItemRegisterHandler = x;
        var L = new x();
        K.effectItemRegisterHandler = L;
        cc._RF.pop();
      }
    }, {
      NodePoolHandler: "NodePoolHandler"
    }],
    ErrorHandler: [function (Z, I) {
      'use strict';

      if (!cc._RF.push(I, "933099S7qNPvb+XKiLo98KQ", "ErrorHandler")) {
        var R = System.get("bvframework").ErrorHandler;
        for (var K in R) {
          I.exports[K] = R[K];
        }
        I.exports.__esModule = true;
        cc._RF.pop();
      }
    }, {}],
    FPSTracker: [function (Z, I) {
      'use strict';

      if (!cc._RF.push(I, "f7f37JW2SxLW5uWMYCvIjkK", "FPSTracker")) {
        var R = System.get("common").FPSTracker;
        I.exports.default = R;
        I.exports.__esModule = true;
        cc._RF.pop();
      }
    }, {}],
    FastSpinController: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "c7066vCL8tMPLui05q7zWWt", "FastSpinController")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("AudioConstant");
        var x = I("AudioManager");
        var L = cc._decorator;
        var D = L.ccclass;
        var k = L.property;
        var C = [-445.8333, -267.5, -89.1666, 89.1666, 267.5, 445.8333];
        var u = function (p) {
          function j() {
            var G = p !== null && p.apply(this, arguments) || this;
            G.holder = undefined;
            return G;
          }
          __extends(j, p);
          j.prototype.play = function (G, V) {
            this.holder.opacity = 0;
            this.holder.active = true;
            this.holder.stopAllActions();
            this.holder.setPosition(C[G], 0);
            this.holder.runAction(cc.sequence(cc.fadeIn(0.3), cc.callFunc(function () {
              if (V) {
                V();
              }
            })));
            x.playAudio(T.GENERAL_AUDIO.fastspinStart.key);
          };
          j.prototype.stop = function (G) {
            var V = this;
            this.holder.stopAllActions();
            this.holder.runAction(cc.sequence(cc.fadeOut(0.3), cc.callFunc(function () {
              V.holder.active = false;
              if (G) {
                G();
              }
            })));
            x.stopAudio(T.GENERAL_AUDIO.fastspinStart.key);
            x.playAudio(T.GENERAL_AUDIO.fastspinStop.key);
          };
          j.prototype.reset = function () {
            this.holder.stopAllActions();
            this.holder.opacity = 0;
            this.holder.active = false;
          };
          __decorate([k(cc.Node)], j.prototype, "holder", undefined);
          return __decorate([D], j);
        }(cc.Component);
        K.default = u;
        cc._RF.pop();
      }
    }, {
      AudioConstant: "AudioConstant",
      AudioManager: "AudioManager"
    }],
    FeatureBuyButtonController: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "04700XZnupJZ5r+nkk7toBA", "FeatureBuyButtonController")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T;
        var x;
        var L;
        var D = I("WBSGameUtils");
        var k = I("AudioConstant");
        var C = I("AudioManager");
        var j = cc._decorator;
        var G = j.ccclass;
        var V = j.property;
        (function (N) {
          N[N.IDLE = 0] = "IDLE";
          N[N.DISABLE = 1] = "DISABLE";
          N[N.ENABLE = 2] = "ENABLE";
        })(T ||= {});
        (function (N) {
          N[N.ON = 0] = "ON";
          N[N.OFF = 1] = "OFF";
        })(x ||= {});
        (function (N) {
          N[N.ON = 0] = "ON";
          N[N.OFF = 1] = "OFF";
        })(L ||= {});
        var Q = function (N) {
          function Y() {
            var W = N !== null && N.apply(this, arguments) || this;
            W.button = undefined;
            W.text = undefined;
            W.hoverNode = undefined;
            W.holder = undefined;
            W._featureBuyButtonCallback = undefined;
            W._curentState = undefined;
            W._curentHoverState = x.OFF;
            W._curentForceHoverState = L.OFF;
            W._disposeZoom = undefined;
            return W;
          }
          __extends(Y, N);
          Y.prototype.zoomIn = function (W, q) {
            var S = this;
            if (W === undefined) {
              W = false;
            }
            var z = this.node.x;
            var f = this._disposeZoom;
            if (f) {
              f();
            }
            this._disposeZoom = undefined;
            if (W) {
              this.node.setPosition(375, this.node.y);
              if (q) {
                q();
              }
            } else {
              this._disposeZoom = D.lerpTo(function (A, M) {
                var E = M * (2 - M);
                var F = cc.misc.lerp(z, 375, E);
                S.node.setPosition(F, S.node.y);
                if (M === 1) {
                  S._disposeZoom = undefined;
                  if (q) {
                    q();
                  }
                }
              }, z, 375, 1);
            }
          };
          Y.prototype.zoomOut = function (W, q) {
            var S = this;
            if (W === undefined) {
              W = false;
            }
            var z = this.node.x;
            var f = this._disposeZoom;
            if (f) {
              f();
            }
            this._disposeZoom = undefined;
            if (W) {
              this.node.setPosition(455, this.node.y);
              if (q) {
                q();
              }
            } else {
              this._disposeZoom = D.lerpTo(function (A, M) {
                var E = M * (2 - M);
                var F = cc.misc.lerp(z, 455, E);
                S.node.setPosition(F, S.node.y);
                if (M === 1) {
                  S._disposeZoom = undefined;
                  if (q) {
                    q();
                  }
                }
              }, z, 455, 4);
            }
          };
          Y.prototype.init = function (W, q) {
            this.button.node.active = W <= q;
          };
          Y.prototype.setSpriteFrame = function (W) {
            this.text.spriteFrame = W;
          };
          Y.prototype.setButtonOnClick = function (W) {
            this._featureBuyButtonCallback = W;
          };
          Y.prototype.buttonOnClick = function () {
            if (T.DISABLE !== this._curentState) {
              var W = this._featureBuyButtonCallback;
              if (W) {
                W();
              }
            }
          };
          Y.prototype.showButton = function () {
            if (this._curentState !== T.ENABLE) {
              this._curentState = T.ENABLE;
              this.button.node.active = true;
              this.holder.stopAllActions();
              if (this.holder.position.x !== 0) {
                this.holder.runAction(cc.moveTo(0.3, 0, 0).easing(cc.easeIn(3)));
              }
            }
          };
          Y.prototype.hideButton = function () {
            var W = this;
            if (this._curentState !== T.DISABLE) {
              this._curentState = T.DISABLE;
              this._reset();
              this.holder.stopAllActions();
              if (this.holder.position.x !== 340) {
                var q = cc.sequence(cc.moveTo(0.3, 340, 0).easing(cc.easeIn(3)), cc.callFunc(function () {
                  W.button.node.active = false;
                }));
                this.holder.runAction(q);
              }
              if (L.ON === this._curentForceHoverState) {
                this.stopHoverEffect();
              }
            }
          };
          Y.prototype.setButtonEnable = function () {
            this.button.enabled = true;
          };
          Y.prototype.setButtonDisable = function () {
            this.button.enabled = false;
            if (L.ON === this._curentForceHoverState) {
              this.stopHoverEffect();
            }
          };
          Y.prototype.registerHoverEvent = function () {
            if (x.ON !== this._curentHoverState) {
              this._curentHoverState = x.ON;
              this._registerHoverListenner();
            }
          };
          Y.prototype.unregisterHoverEvent = function () {
            if (x.OFF !== this._curentHoverState) {
              this._curentHoverState = x.OFF;
              this._unregisterHorverListenner();
            }
          };
          Y.prototype.show = function () {
            this._curentState = T.ENABLE;
            this.node.active = true;
          };
          Y.prototype.hide = function () {
            this._curentState = T.DISABLE;
            this.node.active = false;
          };
          Y.prototype.playHoverEffect = function () {
            if (L.ON !== this._curentForceHoverState && this._curentState !== T.DISABLE) {
              this._curentForceHoverState = L.ON;
              this._playHoverEffect();
            }
          };
          Y.prototype.stopHoverEffect = function () {
            this._curentForceHoverState = L.OFF;
            this._stopHoverEffect();
          };
          Y.prototype.setButtonDisableOpacity = function () {
            this.button.node.opacity = 127.5;
          };
          Y.prototype.setButtonEnableOpacity = function () {
            this.button.node.opacity = 255;
          };
          Y.prototype._registerHoverListenner = function () {
            var W = this.button.node;
            W.on(cc.Node.EventType.MOUSE_ENTER, this._playMouseHoverEffect, this);
            W.on(cc.Node.EventType.MOUSE_LEAVE, this._stopMouseHoverEffect, this);
          };
          Y.prototype._unregisterHorverListenner = function () {
            var W = this.button.node;
            W.off(cc.Node.EventType.MOUSE_ENTER, this._playMouseHoverEffect, this);
            W.off(cc.Node.EventType.MOUSE_LEAVE, this._stopMouseHoverEffect, this);
            this._reset();
          };
          Y.prototype._playHoverEffect = function () {
            var W = this.text.node;
            W.stopAllActions();
            W.runAction(cc.sequence(cc.scaleTo(0.3, 1.15).easing(cc.easeIn(2)), cc.scaleTo(0.15, 1.1).easing(cc.easeOut(2))));
            var q = cc.Color.WHITE;
            var S = cc.Color.BLACK;
            this.hoverNode.stopAllActions();
            this.hoverNode.runAction(cc.repeatForever(cc.sequence(cc.callFunc(function () {
              C.playAudio(k.GENERAL_AUDIO.featureBuyHover.key);
            }), cc.tintTo(0.3, q.getR(), q.getG(), q.getB()), cc.delayTime(0.5), cc.tintTo(0.3, S.getR(), S.getG(), S.getB()), cc.delayTime(0.5))));
          };
          Y.prototype._stopHoverEffect = function () {
            var W = this.text.node;
            W.stopAllActions();
            W.runAction(cc.scaleTo(0.3, 1));
            var q = cc.Color.BLACK;
            this.hoverNode.stopAllActions();
            this.hoverNode.runAction(cc.tintTo(0.3, q.getR(), q.getG(), q.getB()));
          };
          Y.prototype._playMouseHoverEffect = function () {
            if (L.ON !== this._curentForceHoverState) {
              this._playHoverEffect();
            }
          };
          Y.prototype._stopMouseHoverEffect = function () {
            if (L.ON !== this._curentForceHoverState) {
              this._stopHoverEffect();
            }
          };
          Y.prototype.playClickEffect = function () {
            this.button.node.runAction(cc.sequence(cc.scaleTo(0.1, 0.95).easing(cc.easeSineOut()), cc.scaleTo(0.1, 1).easing(cc.easeSineOut())));
          };
          Y.prototype._reset = function () {
            var W = this.text.node;
            W.stopAllActions();
            W.scale = 1;
            var q = this.button.node;
            q.stopAllActions();
            q.scale = 1;
            this.hoverNode.stopAllActions();
            this.hoverNode.color = cc.Color.BLACK;
          };
          Y.prototype.onDestroy = function () {
            this._unregisterHorverListenner();
          };
          __decorate([V(cc.Button)], Y.prototype, "button", undefined);
          __decorate([V(cc.Sprite)], Y.prototype, "text", undefined);
          __decorate([V(cc.Node)], Y.prototype, "hoverNode", undefined);
          __decorate([V(cc.Node)], Y.prototype, "holder", undefined);
          return __decorate([G], Y);
        }(cc.Component);
        K.default = Q;
        cc._RF.pop();
      }
    }, {
      AudioConstant: "AudioConstant",
      AudioManager: "AudioManager",
      WBSGameUtils: "WBSGameUtils"
    }],
    FeatureBuyController: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "f4066bmbddDQY5MrDK5Qie2", "FeatureBuyController")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T;
        var x = I("AudioManager");
        var L = I("AudioConstant");
        var D = I("SettingMenuHelper");
        var k = I("NumberDisplayController");
        var C = I("GameEventHandler");
        var j = I("Utils");
        var G = cc._decorator;
        var V = G.ccclass;
        var Q = G.property;
        (function (Y) {
          Y[Y.SHOW = 1] = "SHOW";
          Y[Y.HIDE = 2] = "HIDE";
        })(T ||= {});
        var N = function (Y) {
          function W() {
            var q = Y !== null && Y.apply(this, arguments) || this;
            q.dialogHolder = undefined;
            q.numberDisplayController = undefined;
            q.titleSprite = undefined;
            q.descriptionSprite = undefined;
            q.costSprite = undefined;
            q.startBtnSprite = undefined;
            q.cancelBtnSprite = undefined;
            q.startBtnNode = undefined;
            q.cancelBtnNode = undefined;
            q.startBtnHoverNode = undefined;
            q.cancelBtnHoverNode = undefined;
            q._featureBuyState = T.HIDE;
            q._featureBuyButtonEnableState = false;
            q._currentBetMultiply = 0;
            q._featureBuySpinCallback = undefined;
            q._featureBuyCancelCallback = undefined;
            q._featureDialogShowCallback = undefined;
            q._featureBuyButtonController = undefined;
            return q;
          }
          __extends(W, Y);
          W.prototype.setupButtonConfig = function (q) {
            this._featureDialogShowCallback = q.showDialogCallback;
            this._featureBuySpinCallback = q.confirmFeatureBuyCallback;
            this._featureBuyCancelCallback = q.cancelBuyCallback;
          };
          W.prototype.resetButtonConfig = function () {
            this._featureBuySpinCallback = undefined;
            this._featureBuyCancelCallback = undefined;
            this._featureDialogShowCallback = undefined;
          };
          W.prototype.init = function (q) {
            var S = q.featureBuyButtonController;
            var z = q.featureBuyText;
            this._featureBuyButtonController = S;
            this._featureBuyButtonController.setButtonOnClick(this.showFeatureBuyDialog.bind(this));
            this.titleSprite.spriteFrame = z.getSpriteFrame("fb_title");
            this.descriptionSprite.spriteFrame = z.getSpriteFrame("fb_desc");
            this.costSprite.spriteFrame = z.getSpriteFrame("fb_cost");
            this.startBtnSprite.spriteFrame = z.getSpriteFrame("fb_start");
            this.cancelBtnSprite.spriteFrame = z.getSpriteFrame("fb_cancel");
          };
          W.prototype.setFeatureBuyButtonState = function (q) {
            this._featureBuyButtonEnableState = q;
          };
          W.prototype.setFeatureBuyMultiply = function (q) {
            this._currentBetMultiply = q;
          };
          W.prototype.showFeatureBuy = function () {
            if (this._featureBuyButtonEnableState !== false) {
              this._featureBuyButtonController.show();
            }
          };
          W.prototype.hideFeatureBuy = function () {
            this._featureBuyButtonController.hide();
          };
          W.prototype.showFeatureButton = function () {
            if (this._featureBuyButtonEnableState !== false) {
              this.node.active = true;
              this._featureBuyButtonController.showButton();
              this.showFeatureBuy();
            }
          };
          W.prototype.hideFeatureButton = function () {
            if (this._featureBuyButtonEnableState !== false) {
              this.node.active = false;
              this._featureBuyButtonController.hideButton();
            }
          };
          W.prototype.playButtonHoverEffect = function () {
            if (this._featureBuyButtonEnableState !== false) {
              this._featureBuyButtonController.playHoverEffect();
            }
          };
          W.prototype.stopButtonHoverEffect = function () {
            if (this._featureBuyButtonEnableState !== false) {
              this._featureBuyButtonController.stopHoverEffect();
            }
          };
          W.prototype.enableFeatureBuy = function () {
            if (this._featureBuyButtonEnableState !== false) {
              this._featureBuyButtonController.setButtonEnable();
              this._featureBuyButtonController.setButtonEnableOpacity();
              this._featureBuyButtonController.registerHoverEvent();
            }
          };
          W.prototype.disableFeatureBuy = function () {
            if (this._featureBuyButtonEnableState !== false) {
              this._featureBuyButtonController.setButtonDisable();
              this._featureBuyButtonController.setButtonDisableOpacity();
              this._featureBuyButtonController.unregisterHoverEvent();
            }
          };
          W.prototype.showFeatureBuyDialog = function () {
            if (this._featureBuyState !== T.SHOW) {
              x.playAudio(L.GENERAL_AUDIO.featureBuyBtn.key);
              this._featureBuyState = T.SHOW;
              this.dialogHolder.active = true;
              this._registerHoverListenner();
              this.dialogHolder.runAction(cc.fadeIn(0.3));
              var q = D.settingMenuHelper.additionalBetCalculation() * this._currentBetMultiply;
              this.numberDisplayController.clear();
              this.numberDisplayController.displayNumber(q, true);
              D.settingMenuHelper.setAllButtonsInteractable(false);
              C.emitGameFlowStateChangedEvent({
                displayState: "Start",
                flowType: "FeatureBuySelection"
              });
              this._featureBuyButtonController.playClickEffect();
              var z = this._featureDialogShowCallback;
              if (z) {
                z();
              }
            }
          };
          W.prototype.onFeatureBuyClick = function () {
            if (this._featureBuyState !== T.HIDE) {
              this._featureBuyState = T.HIDE;
              var q = this._featureBuySpinCallback;
              this._dismissDialog(q);
            }
          };
          W.prototype.onFeatureCancelClick = function () {
            if (this._featureBuyState !== T.HIDE) {
              this._featureBuyState = T.HIDE;
              x.playAudio(L.GENERAL_AUDIO.featureBuyCancel.key);
              var q = this._featureBuyCancelCallback;
              this._dismissDialog(q);
              D.settingMenuHelper.setAllButtonsInteractable(true);
            }
          };
          W.prototype._dismissDialog = function (q) {
            var S = this;
            j.sequenceCallback(function (z) {
              S.dialogHolder.runAction(cc.sequence(cc.fadeOut(0.3), cc.callFunc(function () {
                if (z) {
                  z();
                }
              })));
            }, function (z) {
              S.dialogHolder.active = false;
              S._unregisterHorverListenner();
              if (z) {
                z();
              }
            })(function () {
              C.emitGameFlowStateChangedEvent({
                displayState: "End",
                flowType: "FeatureBuySelection"
              });
              if (q) {
                q();
              }
            });
          };
          W.prototype._playStartBtnHoverEffect = function () {
            this.startBtnNode.stopAllActions();
            this.startBtnNode.runAction(cc.sequence(cc.scaleTo(0.3, 1.15).easing(cc.easeIn(2)), cc.scaleTo(0.15, 1.1).easing(cc.easeOut(2))));
            var q = cc.Color.WHITE;
            var S = cc.Color.BLACK;
            this.startBtnHoverNode.stopAllActions();
            this.startBtnHoverNode.runAction(cc.repeatForever(cc.sequence(cc.tintTo(0.3, q.getR(), q.getG(), q.getB()), cc.delayTime(0.5), cc.tintTo(0.3, S.getR(), S.getG(), S.getB()), cc.delayTime(0.5))));
          };
          W.prototype._stopStartBtnHoverEffect = function () {
            this.startBtnNode.stopAllActions();
            this.startBtnNode.runAction(cc.scaleTo(0.3, 1));
            var q = cc.Color.BLACK;
            this.startBtnHoverNode.stopAllActions();
            this.startBtnHoverNode.runAction(cc.tintTo(0.3, q.getR(), q.getG(), q.getB()));
          };
          W.prototype._playCancelBtnHoverEffect = function () {
            this.cancelBtnNode.stopAllActions();
            this.cancelBtnNode.runAction(cc.sequence(cc.scaleTo(0.3, 1.1).easing(cc.easeIn(2)), cc.scaleTo(0.15, 1.05).easing(cc.easeOut(2))));
            var q = cc.Color.WHITE;
            var S = cc.Color.BLACK;
            this.cancelBtnHoverNode.stopAllActions();
            this.cancelBtnHoverNode.runAction(cc.repeatForever(cc.sequence(cc.tintTo(0.3, q.getR(), q.getG(), q.getB()), cc.delayTime(0.5), cc.tintTo(0.3, S.getR(), S.getG(), S.getB()), cc.delayTime(0.5))));
          };
          W.prototype._stopCancelBtnHoverEffect = function () {
            this.cancelBtnNode.stopAllActions();
            this.cancelBtnNode.runAction(cc.scaleTo(0.3, 1));
            var q = cc.Color.BLACK;
            this.cancelBtnHoverNode.stopAllActions();
            this.cancelBtnHoverNode.runAction(cc.tintTo(0.3, q.getR(), q.getG(), q.getB()));
          };
          W.prototype._resetStartAndCancelHover = function () {
            this.startBtnHoverNode.stopAllActions();
            this.cancelBtnHoverNode.stopAllActions();
            this.startBtnHoverNode.color = cc.Color.BLACK;
            this.cancelBtnHoverNode.color = cc.Color.BLACK;
          };
          W.prototype._registerHoverListenner = function () {
            this.startBtnNode.on(cc.Node.EventType.MOUSE_ENTER, this._playStartBtnHoverEffect, this);
            this.startBtnNode.on(cc.Node.EventType.MOUSE_LEAVE, this._stopStartBtnHoverEffect, this);
            this.cancelBtnNode.on(cc.Node.EventType.MOUSE_ENTER, this._playCancelBtnHoverEffect, this);
            this.cancelBtnNode.on(cc.Node.EventType.MOUSE_LEAVE, this._stopCancelBtnHoverEffect, this);
          };
          W.prototype._unregisterHorverListenner = function () {
            this.startBtnNode.off(cc.Node.EventType.MOUSE_ENTER, this._playStartBtnHoverEffect, this);
            this.startBtnNode.off(cc.Node.EventType.MOUSE_LEAVE, this._stopStartBtnHoverEffect, this);
            this.cancelBtnNode.off(cc.Node.EventType.MOUSE_ENTER, this._playCancelBtnHoverEffect, this);
            this.cancelBtnNode.off(cc.Node.EventType.MOUSE_LEAVE, this._stopCancelBtnHoverEffect, this);
            this._resetStartAndCancelHover();
          };
          __decorate([Q(cc.Node)], W.prototype, "dialogHolder", undefined);
          __decorate([Q(k.default)], W.prototype, "numberDisplayController", undefined);
          __decorate([Q(cc.Sprite)], W.prototype, "titleSprite", undefined);
          __decorate([Q(cc.Sprite)], W.prototype, "descriptionSprite", undefined);
          __decorate([Q(cc.Sprite)], W.prototype, "costSprite", undefined);
          __decorate([Q(cc.Sprite)], W.prototype, "startBtnSprite", undefined);
          __decorate([Q(cc.Sprite)], W.prototype, "cancelBtnSprite", undefined);
          __decorate([Q(cc.Node)], W.prototype, "startBtnNode", undefined);
          __decorate([Q(cc.Node)], W.prototype, "cancelBtnNode", undefined);
          __decorate([Q(cc.Node)], W.prototype, "startBtnHoverNode", undefined);
          __decorate([Q(cc.Node)], W.prototype, "cancelBtnHoverNode", undefined);
          return __decorate([V], W);
        }(cc.Component);
        K.default = N;
        cc._RF.pop();
      }
    }, {
      AudioConstant: "AudioConstant",
      AudioManager: "AudioManager",
      GameEventHandler: "GameEventHandler",
      NumberDisplayController: "NumberDisplayController",
      SettingMenuHelper: "SettingMenuHelper",
      Utils: "Utils"
    }],
    FeatureBuyHelper: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "0ce45lWhypN46eCVKRkmiLJ", "FeatureBuyHelper")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        K.generateFeatureBuyModel = K.cleanUpFeatureBuyHelper = K.initFeatureBuyHelper = K.FeatureBuyModel = undefined;
        var T;
        var x = I("BVFramework");
        var L = I("Utils");
        var D = function () {
          function Q(N) {
            var Y = N.is;
            var W = N.bm;
            var q = N.t;
            this._isSupported = Y;
            this._betMultiplier = W;
            this._threshold = q;
          }
          Object.defineProperty(Q.prototype, "isSupported", {
            get: function () {
              return this._isSupported;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(Q.prototype, "betMultiplier", {
            get: function () {
              return this._betMultiplier;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(Q.prototype, "threshold", {
            get: function () {
              return this._threshold;
            },
            enumerable: false,
            configurable: true
          });
          return Q;
        }();
        K.FeatureBuyModel = D;
        var k = 0;
        var C = undefined;
        var j = {
          featureBuyOnlyTitle: shell.I18n.t("FeatureBuy.FeatureBuyOnly"),
          betForFeatureBuyOnly: shell.I18n.t("FeatureBuy.BetForFeatureBuyOnly")
        };
        K.initFeatureBuyHelper = function (Q, N) {
          if (!T) {
            C = Q;
            if (N && N.customContent) {
              j = __assign(__assign({}, j), N.customContent);
            }
            var Y = x.getGameContext();
            Y.on("Game.FlowStateChanged", G);
            Y.on("Game.RequestPlay", V, undefined, "Low");
          }
        };
        K.cleanUpFeatureBuyHelper = function () {
          if (!T) {
            var Q = x.getGameContext();
            Q.off("Game.FlowStateChanged", G);
            Q.off("Game.RequestPlay", V);
          }
        };
        K.generateFeatureBuyModel = function (Q) {
          var N = Q.gcs && Q.gcs.bf ? Q.gcs.bf : Q.fb;
          if (T === undefined) {
            x.getGameContext().emit("Game.RequestSession", undefined, function (W) {
              var q = W.response.operatorJurisdictionConfig.buyFeature === 0;
              T = q || !N;
            });
          }
          if (!T && N) {
            var Y = new D(N);
            k = Y.threshold;
            return Y;
          }
        };
        cc._RF.pop();
      }
      function G(Q) {
        var N = x.getGameContext();
        var Y = Q.payload;
        if (Y.flowType === "FeatureBuySelection") {
          if (Y.displayState === "Start") {
            N.emit("Game.BlockUI", true);
          } else if (Y.displayState === "End") {
            N.emit("Game.BlockUI", false);
          }
        }
      }
      function V(Q) {
        if (Q.response && Q.response.error && Q.response.error.code === 1017 && Q.payload.totalBet <= k) {
          var N = shell.I18n;
          var Y = x.getGameContext();
          var W = C.playerModel.minimumBetAmount;
          Y.emit("Alert.Show", {
            title: j.featureBuyOnlyTitle,
            content: "<ul style=\"text-align:left;color:#98989E;padding-inline-start:13px;font-size:11px;list-style-type:'•  '\"><li style=\"margin-bottom:8px\">" + j.betForFeatureBuyOnly + "</li><li>" + N.t("FeatureBuy.BetSuggestion", {
              amount: L.formatCurrency(W)
            }) + "</li></ul>",
            actions: [{
              label: N.t("FeatureBuy.Acknowledge"),
              handler: 1
            }]
          });
        }
      }
    }, {
      BVFramework: "BVFramework",
      Utils: "Utils"
    }],
    ForegroundController: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "7f6b45PVuNABKgWMXjQR2LN", "ForegroundController")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("GameConstant");
        var x = cc._decorator;
        var L = x.ccclass;
        var D = x.property;
        var k = function (C) {
          function u() {
            var c = C !== null && C.apply(this, arguments) || this;
            c.normalNode = undefined;
            c.bonusNode = undefined;
            c.bulletEffectAnim = undefined;
            c.topGlowLeft = undefined;
            c.topGlowRight = undefined;
            c.textLeft = undefined;
            c.textRight = undefined;
            c.btmGlow = undefined;
            return c;
          }
          __extends(u, C);
          u.prototype.init = function (c) {
            this.textLeft.spriteFrame = c.leftWay;
            this.textRight.spriteFrame = c.rightWay;
          };
          u.prototype.switchUI = function (c) {
            switch (c) {
              case T.TransitionState.FREE_SPIN:
              case T.TransitionState.FREE_SPIN_RESPIN:
                this.normalNode.active = false;
                this.bonusNode.active = true;
                this.playGlowEffect();
                break;
              case T.TransitionState.NORMAL:
              case T.TransitionState.RESPIN:
              default:
                this.stopGlowEffect();
                this.normalNode.active = true;
                this.bonusNode.active = false;
            }
          };
          u.prototype.playGameIntroBullet = function () {
            this.bulletEffectAnim.play();
          };
          u.prototype.playGlowEffect = function () {
            var c = cc.repeatForever(cc.sequence(cc.delayTime(1), cc.fadeTo(1, 255), cc.fadeTo(1, 0)));
            var p = cc.repeatForever(cc.sequence(cc.delayTime(1), cc.fadeTo(1, 255), cc.fadeTo(1, 0)));
            var j = cc.repeatForever(cc.sequence(cc.delayTime(1), cc.fadeTo(1, 255), cc.fadeTo(1, 0)));
            this.topGlowLeft.runAction(c);
            this.topGlowRight.runAction(p);
            this.btmGlow.runAction(j);
          };
          u.prototype.stopGlowEffect = function () {
            this.topGlowLeft.stopAllActions();
            this.topGlowRight.stopAllActions();
            this.btmGlow.stopAllActions();
            this.topGlowLeft.opacity = 0;
            this.topGlowRight.opacity = 0;
            this.btmGlow.opacity = 0;
          };
          __decorate([D(cc.Node)], u.prototype, "normalNode", undefined);
          __decorate([D(cc.Node)], u.prototype, "bonusNode", undefined);
          __decorate([D(cc.Animation)], u.prototype, "bulletEffectAnim", undefined);
          __decorate([D(cc.Node)], u.prototype, "topGlowLeft", undefined);
          __decorate([D(cc.Node)], u.prototype, "topGlowRight", undefined);
          __decorate([D(cc.Sprite)], u.prototype, "textLeft", undefined);
          __decorate([D(cc.Sprite)], u.prototype, "textRight", undefined);
          __decorate([D(cc.Node)], u.prototype, "btmGlow", undefined);
          return __decorate([L], u);
        }(cc.Component);
        K.default = k;
        cc._RF.pop();
      }
    }, {
      GameConstant: "GameConstant"
    }],
    FreeSpinWonController: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "4207exmwGdBM6LA1UwuVtdQ", "FreeSpinWonController")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("AudioConstant");
        var x = I("AudioManager");
        var L = cc._decorator;
        var D = L.ccclass;
        var k = L.property;
        var C = function (u) {
          function c() {
            var p = u !== null && u.apply(this, arguments) || this;
            p.freeSpinWonNumberNode = undefined;
            p.freeSpinWonSprite = undefined;
            p.efxAnimation = undefined;
            p._freeSpinWonNumberDisplayController = undefined;
            p._completeCallback = undefined;
            return p;
          }
          __extends(c, u);
          c.prototype.init = function (p) {
            this.node.active = false;
            this.freeSpinWonSprite.spriteFrame = p;
          };
          Object.defineProperty(c.prototype, "freeSpinWonNumberDisplayController", {
            get: function () {
              this._freeSpinWonNumberDisplayController ||= this.freeSpinWonNumberNode.getComponent("NumberDisplayController");
              return this._freeSpinWonNumberDisplayController;
            },
            enumerable: false,
            configurable: true
          });
          c.prototype.play = function (p, j) {
            this.node.active = true;
            this.freeSpinWonNumberDisplayController.clear();
            this.freeSpinWonNumberDisplayController.displayNumber(p);
            this._completeCallback = j;
            this.efxAnimation.play();
            x.playAudio(T.GENERAL_AUDIO.fsWonTitle.key);
          };
          c.prototype.onAnimationComplete = function () {
            this._reset();
            var p = this._completeCallback;
            this._completeCallback = undefined;
            if (p) {
              p();
            }
          };
          c.prototype._reset = function () {
            this.node.active = false;
            this.efxAnimation.stop();
          };
          __decorate([k(cc.Node)], c.prototype, "freeSpinWonNumberNode", undefined);
          __decorate([k(cc.Sprite)], c.prototype, "freeSpinWonSprite", undefined);
          __decorate([k(cc.Animation)], c.prototype, "efxAnimation", undefined);
          return __decorate([D], c);
        }(cc.Component);
        K.default = C;
        cc._RF.pop();
      }
    }, {
      AudioConstant: "AudioConstant",
      AudioManager: "AudioManager"
    }],
    GameAudioAdapter: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "8c0ecQgQvxM3oNottpd7IZl", "GameAudioAdapter")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("AudioAdapter");
        var x = I("AudioManager");
        var L = function (D) {
          function k(C, u) {
            var c = D.call(this, C) || this;
            c._gameAudioManagerType = undefined;
            c._isMusic = undefined;
            c._isMusic = u;
            return c;
          }
          __extends(k, D);
          k.prototype.load = function () {
            var C = this;
            D.prototype.load.call(this);
            function u() {
              C.off("loaderror", c);
              C._gameAudioManagerType = x.registerAudio(C, C._isMusic);
            }
            function c() {
              C.off("load", u);
            }
            this.once("load", u);
            this.once("loaderror", c);
          };
          k.prototype.unload = function () {
            x.unregisterAudio(this, this._gameAudioManagerType);
            D.prototype.unload.call(this);
          };
          return k;
        }(T.default);
        K.default = L;
        cc._RF.pop();
      }
    }, {
      AudioAdapter: "AudioAdapter",
      AudioManager: "AudioManager"
    }],
    GameConstant: [function (V, Q, N) {
      'use strict';

      var Y;
      var W;
      var q;
      var S;
      var z;
      var f;
      var A;
      var M;
      var E;
      if (!cc._RF.push(Q, "581d2Um5MZAj5QG9p5tjd/T", "GameConstant")) {
        Object.defineProperty(N, "__esModule", {
          value: true
        });
        N.isRTL = N.PayOutData = N.NodePoolName = N.NORMAL_HOLD_DURATION = N.REPLAY_HOLD_DURATION = N.DisplayState = N.TransitionState = N.spineSymbolNameMaps = N.blurredSymbolBgNameMaps = N.symbolBgNameMaps = N.blurredFrameMaps = N.frameMaps = N.blurredSlotSymbolNameMaps = N.slotSymbolImageNameMaps = N.BLOCK_TYPE = N.SlotSymbols = N.FAST_SCROLL_MIN_REQUIRE_SCATTER = N.SLOT_HEIGHT = N.SLOT_WIDTH = N.COLUMN_END_INDEX = N.COLUMN_START_INDEX = N.SLOT_ITEM_ROW_TOP_POS = N.SLOT_ITEM_COLUMN_MAP = N.SLOT_ITEM_MAP = N.NUMBER_OF_ROW_LIST = N.NUMBER_OF_ROW = N.NUMBER_OF_COLUMN = undefined;
        N.NUMBER_OF_COLUMN = 6;
        N.NUMBER_OF_ROW = 5;
        N.NUMBER_OF_ROW_LIST = [3, 4, 5, 5, 4, 3];
        N.SLOT_ITEM_MAP = [[0, 1, 2], [3, 4, 5, 6], [7, 8, 9, 10, 11], [12, 13, 14, 15, 16], [17, 18, 19, 20], [21, 22, 23]];
        N.SLOT_ITEM_COLUMN_MAP = {
          "0": 0,
          "1": 0,
          "2": 0,
          "3": 1,
          "4": 1,
          "5": 1,
          "6": 1,
          "7": 2,
          "8": 2,
          "9": 2,
          "10": 2,
          "11": 2,
          "12": 3,
          "13": 3,
          "14": 3,
          "15": 3,
          "16": 3,
          "17": 4,
          "18": 4,
          "19": 4,
          "20": 4,
          "21": 5,
          "22": 5,
          "23": 5
        };
        N.SLOT_ITEM_ROW_TOP_POS = {
          "0": 177.2,
          "1": 265.8,
          "2": 354.4,
          "3": 354.4,
          "4": 265.8,
          "5": 177.2
        };
        N.COLUMN_START_INDEX = [0, 3, 7, 12, 17, 21];
        N.COLUMN_END_INDEX = [2, 6, 11, 16, 20, 23];
        N.SLOT_WIDTH = 172;
        N.SLOT_HEIGHT = 172;
        N.FAST_SCROLL_MIN_REQUIRE_SCATTER = 2;
        (function (Z0) {
          Z0[Z0.Wild = 0] = "Wild";
          Z0[Z0.Scatter = 1] = "Scatter";
          Z0[Z0.Bandit = 2] = "Bandit";
          Z0[Z0.Gun = 3] = "Gun";
          Z0[Z0.Hat = 4] = "Hat";
          Z0[Z0.Whisky = 5] = "Whisky";
          Z0[Z0.A = 6] = "A";
          Z0[Z0.K = 7] = "K";
          Z0[Z0.Q = 8] = "Q";
          Z0[Z0.J = 9] = "J";
        })(M = N.SlotSymbols ||= {});
        (function (Z0) {
          Z0[Z0.NORMAL = 100] = "NORMAL";
          Z0[Z0.GOLD = 200] = "GOLD";
        })(E = N.BLOCK_TYPE ||= {});
        (Y = {})[M.Wild] = "s_wild";
        Y[M.Scatter] = "s_scatter";
        Y[M.Whisky] = "h_whisky";
        Y[M.Bandit] = "h_bandit";
        Y[M.Gun] = "h_gun";
        Y[M.Hat] = "h_hat";
        Y[M.A] = "l_a";
        Y[M.J] = "l_j";
        Y[M.K] = "l_k";
        Y[M.Q] = "l_q";
        N.slotSymbolImageNameMaps = Y;
        (W = {})[M.Wild] = "s_wild_blur";
        W[M.Scatter] = "s_scatter_blur";
        W[M.Whisky] = "h_whisky_blur";
        W[M.Bandit] = "h_bandit_blur";
        W[M.Gun] = "h_gun_blur";
        W[M.Hat] = "h_hat_blur";
        W[M.A] = "l_a_blur";
        W[M.J] = "l_j_blur";
        W[M.K] = "l_k_blur";
        W[M.Q] = "l_q_blur";
        N.blurredSlotSymbolNameMaps = W;
        (q = {})[E.NORMAL] = "";
        q[E.GOLD] = "s_wild_frame";
        N.frameMaps = q;
        (S = {})[E.NORMAL] = "";
        S[E.GOLD] = "s_wild_frame_blur";
        N.blurredFrameMaps = S;
        (z = {})[M.Bandit] = "h_bandit_bg";
        N.symbolBgNameMaps = z;
        (f = {})[M.Bandit] = "h_bandit_bg_blur";
        N.blurredSymbolBgNameMaps = f;
        (A = {})[M.Wild] = "s_wild_atlas_specials";
        A[M.Scatter] = "s_scatter_atlas_specials";
        A[M.Whisky] = "h_whisky_atlas_symbols";
        A[M.Bandit] = "h_bandit_atlas_symbols";
        A[M.Gun] = "h_gun_atlas_symbols";
        A[M.Hat] = "h_hat_atlas_symbols";
        A[M.A] = "l_a_atlas_symbols";
        A[M.J] = "l_j_atlas_symbols";
        A[M.K] = "l_k_atlas_symbols";
        A[M.Q] = "l_q_atlas_symbols";
        N.spineSymbolNameMaps = A;
        (function (Z0) {
          Z0[Z0.NORMAL = 1] = "NORMAL";
          Z0[Z0.FREE_SPIN = 21] = "FREE_SPIN";
          Z0[Z0.FREE_SPIN_RESPIN = 22] = "FREE_SPIN_RESPIN";
          Z0[Z0.RESPIN = 4] = "RESPIN";
        })(N.TransitionState ||= {});
        (function (Z0) {
          Z0[Z0.SHOWED = 1] = "SHOWED";
          Z0[Z0.HIDE = 2] = "HIDE";
          Z0[Z0.ANIMATING = 3] = "ANIMATING";
        })(N.DisplayState ||= {});
        N.REPLAY_HOLD_DURATION = 1;
        N.NORMAL_HOLD_DURATION = 6;
        (function (Z0) {
          Z0.SlotItem = "SlotItem";
          Z0.SlotItemCustom = "SlotItemCustom";
          Z0.Symbol = "Symbol";
          Z0.Scatter = "Scatter";
          Z0.Multiplier = "Multiplier";
          Z0.RamainingFreeSpinUpgradeItem = "RamainingFreeSpinUpgradeItem";
          Z0.SlowDropEffectItem = "SlowDropEffectItem";
          Z0.PayoutEffectBackItem = "PayoutEffectBackItem";
          Z0.PayoutEffectFrontItem = "PayoutEffectFrontItem";
        })(N.NodePoolName ||= {});
        N.PayOutData = {
          0: {
            label: "Scatter Symbol"
          },
          1: {
            label: "Wild Symbol"
          },
          2: {
            "6": 50,
            "5": 30,
            "4": 20,
            "3": 10
          },
          3: {
            "6": 30,
            "5": 20,
            "4": 15,
            "3": 8
          },
          4: {
            "6": 20,
            "5": 15,
            "4": 10,
            "3": 5
          },
          5: {
            "6": 20,
            "5": 15,
            "4": 10,
            "3": 5
          },
          6: {
            "6": 10,
            "5": 6,
            "4": 4,
            "3": 2
          },
          7: {
            "6": 10,
            "5": 6,
            "4": 4,
            "3": 2
          },
          8: {
            "6": 5,
            "5": 3,
            "4": 2,
            "3": 1
          },
          9: {
            "6": 5,
            "5": 3,
            "4": 2,
            "3": 1
          }
        };
        N.isRTL = shell.isRTLLanguage && shell.isRTLLanguage();
        cc._RF.pop();
      }
    }, {}],
    GameEventHandler: [function (I, R) {
      'use strict';

      if (!cc._RF.push(R, "6da04mFMhpNcpdeGLQM+RKD", "GameEventHandler")) {
        var g = System.get("bvframework").GameEventHandler;
        var T = {
          subscribeGameInfoUpdateEvent: "subscribeUpdateGameInfoEvent",
          subscribeGameLayoutInfoRequestEvent: "subscribeGameLayoutInfoEvent",
          subscribeGameConfigRequestEvent: "subscribeGameConfigRequest",
          subscribeGameConfigUpdateEvent: "subscribeGameConfigUpdateRequest",
          subscribeAudioPlayRateUpdateEvent: "subscribeUpdateAudioPlayRateEvent",
          subscribeInUIIdleStateStatusUpdateEvent: "subscribeUIIdleStateEvent",
          subscribeOperatorCurrencyFormatUpdateEvent: "subscribeOperatorCurrencyFormatUpdate",
          subscribeStoredGamesNameRequestEvent: "subscribeGameNameRequestEvent",
          emitGameStateChangedEvent: "emitGameStateChange",
          emitAutoplayStartedEvent: "emitAutoplayStarted",
          emitAutoplayStoppedEvent: "emitAutoplayStopped",
          emitErrorLogEvent: "emitErrorLog",
          emitUIBlockEvent: "emitBlockUIEvent",
          addGamePausedEventCallback: "setGamePauseEventCallback",
          addGameResumedEventCallback: "setGameResumeEventCallback",
          addTransactionInfoChangedEventCallback: "setTransactionInfoChangedCallback",
          removeTransactionInfoChangedEventCallback: "removeTransactionInfoChangedCallback",
          addUIBlockEventCallback: "setGamePlayUIBlockEventCallback",
          addInUIIdleStateCallback: "setInUIIdleStateCallback",
          subscribeSessionSocketErrorEvent: "subscribeOperationSocketErrorEvent",
          subscribeSessionSocketConnectedEvent: "subscribeOperationSocketConnectedEvent",
          subscribeSessionSocketConnectionStatusRequestEvent: "subscribeOperationSocketConnectionStatusRequestEvent"
        };
        var x = __assign({}, g);
        Object.keys(T).forEach(function (D) {
          x[T[D]] = x[D];
        });
        x.emitGameWinAnnouncement = function () {};
        for (var L in x) {
          R.exports[L] = x[L];
        }
        R.exports.__esModule = true;
        cc._RF.pop();
      }
    }, {}],
    GameHeaderHelper: [function (Z, I) {
      'use strict';

      if (!cc._RF.push(I, "295f80O8n1EXbn2oiNk8NLd", "GameHeaderHelper")) {
        var R = System.get("bvframework").GameHeaderHelper;
        for (var K in R) {
          I.exports[K] = R[K];
        }
        I.exports.__esModule = true;
        cc._RF.pop();
      }
    }, {}],
    GameInitializationHandler: [function (Z, I) {
      'use strict';

      if (!cc._RF.push(I, "b3a04bieS1EsYWkuqlKhqB3", "GameInitializationHandler")) {
        var R = System.get("bvframework").GameInitializationHandler;
        for (var K in R) {
          I.exports[K] = R[K];
        }
        I.exports.__esModule = true;
        cc._RF.pop();
      }
    }, {}],
    GameLayout: [function (c, p, j) {
      'use strict';

      var Q = {
        x: 0,
        y: -685
      };
      var Y = {
        position: Q,
        size: {
          width: 1080,
          height: 275
        }
      };
      var W = {
        x: 0,
        y: -471
      };
      var S = {
        position: W,
        size: {
          width: 1080,
          height: 300
        }
      };
      var z = {
        x: 0,
        y: -660
      };
      var A = {
        position: z,
        size: {
          width: 1080,
          height: 300
        }
      };
      var M = {
        uiFreeSpace: {
          position: {
            x: 0,
            y: 900
          },
          size: {
            width: 1080,
            height: 690
          }
        },
        uiSettingMenu: Y,
        uiTotalWinFreeSpace: S,
        uiBigWinFreeSpace: A
      };
      if (!cc._RF.push(p, "e4108QuCLpIppAG8bv+UasS", "GameLayout")) {
        Object.defineProperty(j, "__esModule", {
          value: true
        });
        j.gameLayout = undefined;
        j.gameLayout = M;
        cc._RF.pop();
      }
    }, {}],
    GameMaintenanceHandler: [function (Z, I) {
      'use strict';

      if (!cc._RF.push(I, "6c833L7mQpG+JThxZci79NX", "GameMaintenanceHandler")) {
        var R = System.get("bvframework").GameMaintenanceHandler;
        for (var K in R) {
          I.exports[K] = R[K];
        }
        I.exports.__esModule = true;
        cc._RF.pop();
      }
    }, {}],
    GameMaintenanceModel: [function (Z, I) {
      'use strict';

      if (!cc._RF.push(I, "9919da29LFDdJcSuJgAAHrr", "GameMaintenanceModel")) {
        var R = System.get("bvframework").GameMaintenanceModel;
        for (var K in R) {
          I.exports[K] = R[K];
        }
        I.exports.__esModule = true;
        cc._RF.pop();
      }
    }, {}],
    GamePluginModel: [function (Z, I) {
      'use strict';

      if (!cc._RF.push(I, "c0badZnWvFI0LG/0J35BfII", "GamePluginModel")) {
        var R = System.get("bvframework").GamePluginModel;
        I.exports.default = R;
        I.exports.__esModule = true;
        cc._RF.pop();
      }
    }, {}],
    GamePreference: [function (Z, I, R) {
      'use strict';

      if (!cc._RF.push(I, "c02b1kjr6ZFdoe/uKYjE3Bb", "GamePreference")) {
        R.__esModule = true;
        R.globalPreference = R.gamePreference = undefined;
        var K = Z("Preference");
        var g = Z("RtConfig");
        var T = (0, K.getPreference)(g.cs_Config.bundleId);
        R.gamePreference = T;
        var x = (0, K.getPreference)(g.cs_Config.globalDomain);
        R.globalPreference = x;
        cc._RF.pop();
      }
    }, {
      Preference: "Preference",
      RtConfig: "RtConfig"
    }],
    GameTitle: [function (Z, I) {
      'use strict';

      if (!cc._RF.push(I, "12eedGFUCVPu7lTHrspCNtZ", "GameTitle")) {
        var R = System.get("bvframework").GameTitle;
        for (var K in R) {
          I.exports[K] = R[K];
        }
        I.exports.__esModule = true;
        cc._RF.pop();
      }
    }, {}],
    GameUtils: [function (Z, I) {
      'use strict';

      if (!cc._RF.push(I, "576e78TekpIpIcjjcHFmVOq", "GameUtils")) {
        var R = System.get("bvframework").GameUtils;
        for (var K in R) {
          I.exports[K] = R[K];
        }
        I.exports.__esModule = true;
        cc._RF.pop();
      }
    }, {}],
    GeneralAssetConfig: [function (h, b, H) {
      'use strict';

      if (!cc._RF.push(b, "aa5dbW8e3pOFaBgLRCr7egF", "GeneralAssetConfig")) {
        Object.defineProperty(H, "__esModule", {
          value: true
        });
        H.generalAssetConfig = undefined;
        var U = {
          name: "click_effect",
          url: "lib/click_effect/prefab/click_effect_layer",
          type: cc.Prefab,
          isLocalized: false
        };
        var B = {
          name: "spin_button_controller",
          url: "load_res/spin_button_controller",
          type: cc.Prefab,
          isLocalized: false
        };
        var P = {
          name: "slot_controller",
          url: "load_res/slot_controller",
          type: cc.Prefab,
          isLocalized: false
        };
        var X = {
          name: "slot_tint_controller",
          url: "load_res/slot_tint_controller",
          type: cc.Prefab,
          isLocalized: false
        };
        var y = {
          name: "background_controller",
          url: "load_res/background_controller",
          type: cc.Prefab,
          isLocalized: false
        };
        var m = {
          name: "fast_spin_controller",
          url: "load_res/fast_spin_controller",
          type: cc.Prefab,
          isLocalized: false
        };
        var v = {
          name: "foreground_controller",
          url: "load_res/foreground_controller",
          type: cc.Prefab,
          isLocalized: false
        };
        var J = {
          name: "infoboard_controller",
          url: "load_res/infoboard_controller",
          type: cc.Prefab,
          isLocalized: false
        };
        var Z0 = {
          name: "bonus_loading_controller",
          url: "load_res/bonus_loading_controller",
          type: cc.Prefab,
          isLocalized: false
        };
        var Z1 = {
          name: "big_win_controller",
          url: "load_res/big_win_controller",
          type: cc.Prefab,
          isLocalized: false
        };
        var Z2 = {
          name: "multiplier_controller",
          url: "load_res/multiplier_controller",
          type: cc.Prefab,
          isLocalized: false
        };
        var Z3 = {
          name: "ways_controller",
          url: "load_res/ways_controller",
          type: cc.Prefab,
          isLocalized: false
        };
        var Z4 = {
          name: "slow_drop_effect_controller",
          url: "load_res/slow_drop_effect_controller",
          type: cc.Prefab,
          isLocalized: false
        };
        var Z5 = {
          name: "big_win_texture",
          url: "texture/big_win/big_win_text",
          type: cc.SpriteAtlas,
          isLocalized: true
        };
        var Z6 = {
          name: "info_message_texture",
          url: "texture/info_message_text/info_message_text",
          type: cc.SpriteAtlas,
          isLocalized: true
        };
        var Z7 = {
          name: "symbol",
          url: "texture/symbol/symbol",
          type: cc.SpriteAtlas,
          isLocalized: false
        };
        var Z8 = {
          name: "feature_symbol",
          url: "texture/symbol/feature_symbol",
          type: cc.SpriteAtlas,
          isLocalized: true
        };
        var Z9 = {
          name: "symbol_payout_controller",
          url: "load_res/symbol_payout_controller",
          type: cc.Prefab,
          isLocalized: false
        };
        var ZZ = {
          name: "feature_buy_button_controller",
          url: "load_res/feature_buy_button_controller",
          type: cc.Prefab,
          isLocalized: false
        };
        var ZI = {
          name: "feature_buy_controller",
          url: "load_res/feature_buy_controller",
          type: cc.Prefab,
          isLocalized: false
        };
        var Zd = {
          name: "s_wild_atlas_specials",
          url: "spine/s_wild_atlas_specials",
          type: sp.SkeletonData,
          isLocalized: true
        };
        var ZO = {
          name: "s_scatter_atlas_specials",
          url: "spine/s_scatter_atlas_specials",
          type: sp.SkeletonData,
          isLocalized: true
        };
        var ZR = {
          name: "h_bandit_atlas_symbols",
          url: "spine/h_bandit_atlas_symbols",
          type: sp.SkeletonData,
          isLocalized: true
        };
        var ZK = {
          name: "h_gun_atlas_symbols",
          url: "spine/h_gun_atlas_symbols",
          type: sp.SkeletonData,
          isLocalized: true
        };
        var Zg = {
          name: "h_hat_atlas_symbols",
          url: "spine/h_hat_atlas_symbols",
          type: sp.SkeletonData,
          isLocalized: true
        };
        var ZT = {
          name: "h_whisky_atlas_symbols",
          url: "spine/h_whisky_atlas_symbols",
          type: sp.SkeletonData,
          isLocalized: true
        };
        var Zx = {
          name: "l_a_atlas_symbols",
          url: "spine/l_a_atlas_symbols",
          type: sp.SkeletonData,
          isLocalized: true
        };
        var ZL = {
          name: "l_j_atlas_symbols",
          url: "spine/l_j_atlas_symbols",
          type: sp.SkeletonData,
          isLocalized: true
        };
        var ZD = {
          name: "l_k_atlas_symbols",
          url: "spine/l_k_atlas_symbols",
          type: sp.SkeletonData,
          isLocalized: true
        };
        var Zn = {
          name: "l_q_atlas_symbols",
          url: "spine/l_q_atlas_symbols",
          type: sp.SkeletonData,
          isLocalized: true
        };
        var Zk = {
          name: "bonus_loading_texture",
          url: "texture/bonus_loading/bonus_loading_text",
          type: cc.SpriteAtlas,
          isLocalized: true
        };
        var Zt = {
          name: "feature_buy_text",
          url: "texture/feature_buy/feature_buy_text",
          type: cc.SpriteAtlas,
          isLocalized: true
        };
        var Zi = {
          name: "main_text",
          url: "texture/main_screen/main_text",
          type: cc.SpriteAtlas,
          isLocalized: true
        };
        var ZC = [U, B, P, X, y, m, v, J, Z0, Z1, Z2, Z3, Z4, Z5, Z6, Z7, Z8, Z9, ZZ, ZI, Zd, ZO, ZR, ZK, Zg, ZT, Zx, ZL, ZD, Zn, Zk, Zt, Zi];
        H.generalAssetConfig = ZC;
        cc._RF.pop();
      }
    }, {}],
    GeneralSlotController: [function (g, T, x) {
      'use strict';

      if (!cc._RF.push(T, "6906bRTBGpEebu4wJuj8OyW", "GeneralSlotController")) {
        Object.defineProperty(x, "__esModule", {
          value: true
        });
        x.DEFAULT_NORMAL_STOP_SCROLL_INTERVAL = x.DEFAULT_NORMAL_START_SCROLL_INTERVAL = x.DEFAULT_FAST_STOP_DELAY = x.DEFAULT_TURBO_STOP_DELAY = x.DEFAULT_TURBO_START_SCROLLER_CONFIG = x.DEFAULT_TURBO_SPEED_FACTOR = x.DEFAULT_STOP_SCROLLER_CONFIG = x.DEFAULT_START_SCROLLER_CONFIG = x.DEFAULT_SCROLL_SPEED = undefined;
        var D = g("SlotHelper");
        var k = g("SlotGenerator");
        var C = g("Utils");
        var j = g("SlotStateMachine");
        var G = g("SpinConfigHandler");
        var V = cc._decorator;
        var Q = V.ccclass;
        var N = V.property;
        var Y = C.getSharedScheduler();
        var W = {
          accelerateDuration: 0.1,
          accelerateFactor: 1.68,
          accelerateDistance: -300,
          bounceDistance: 60,
          bounceDuration: 0.1,
          bounceFactor: 1
        };
        var q = {
          endSpeed: -3550,
          bounceDistance: 15,
          bounceDuration: 0.15,
          bounceFactor: 1.7
        };
        var S = {
          accelerateDuration: 0.24,
          accelerateFactor: 2.5,
          accelerateDistance: -1000,
          bounceDistance: 60,
          bounceDuration: 0.1,
          bounceFactor: 1
        };
        x.DEFAULT_SCROLL_SPEED = -5000;
        x.DEFAULT_START_SCROLLER_CONFIG = Object.freeze(W);
        x.DEFAULT_STOP_SCROLLER_CONFIG = Object.freeze(q);
        x.DEFAULT_TURBO_SPEED_FACTOR = 1.67;
        x.DEFAULT_TURBO_START_SCROLLER_CONFIG = Object.freeze(S);
        x.DEFAULT_TURBO_STOP_DELAY = 0.3;
        x.DEFAULT_FAST_STOP_DELAY = 0.7;
        x.DEFAULT_NORMAL_START_SCROLL_INTERVAL = 0.1;
        x.DEFAULT_NORMAL_STOP_SCROLL_INTERVAL = 0.2;
        var z = function (f) {
          function A() {
            var M = f !== null && f.apply(this, arguments) || this;
            M.slotContainer = undefined;
            M.stateMachine = new j.default();
            M.startScrollingTime = 0;
            M.isTurboMode = false;
            M.isTurboNormalSpin = false;
            M.columnCount = 0;
            M.rowCount = 0;
            M._shakeDisposer = C.emptyFunc;
            return M;
          }
          __extends(A, f);
          Object.defineProperty(A.prototype, "isFastStop", {
            get: function () {
              return this.stateMachine.getStopStyle() === j.StopStyle.FAST;
            },
            enumerable: false,
            configurable: true
          });
          A.prototype.isNormalTransition = function (M) {
            return M === 1;
          };
          A.prototype.readySymbolShake = function () {
            var M = this;
            this._shakeDisposer = C.delayCallback(0.5)(function () {
              M._shakeDisposer = C.emptyFunc;
              M.startSymbolShake();
            });
          };
          A.prototype.startSymbolShake = function () {};
          A.prototype.stopSymbolShake = function () {
            this._shakeDisposer();
          };
          A.prototype.setOnClickCallback = function (M) {
            this._onClickCallback = M;
          };
          A.prototype.setStopCompletedCallback = function (M) {
            this._onSpinStopCallback = M;
          };
          A.prototype.setClickEffectController = function (M) {
            this._clickEffectController = M;
          };
          A.prototype.setSlotItemsVisible = function (M, E) {
            var F;
            (F = this.slotHelper).setItemsVisible.apply(F, __spread([M], E));
          };
          A.prototype.setupSlotHelper = function () {
            var E = this.slotHelper = new D.default();
            var F = this.slotContainer;
            var b = this.columnCount;
            var H = this.rowCount;
            var w = this.dataSource.transactionModel;
            var U = w.stateTransitionTo;
            var B = w.originalReels;
            var P = k.generateSlot({
              containerNode: F,
              numberOfColumn: b,
              maskMargin: {
                up: 0,
                down: 0,
                left: 0,
                right: 0
              }
            });
            E.init({
              spinType: U,
              numberOfColumn: b,
              numberOfRow: H,
              sortBottomItemToFront: true,
              reelData: B,
              symbolSize: cc.size(F.width / b, F.height / H),
              normalSymbolScale: 1,
              blurSymbolScale: 0.5,
              slotViews: P.slotViews,
              slotScrollerController: P.slotScrollerController,
              normalSymbolSpriteFrame: [new cc.SpriteFrame()],
              blurSymbolSpriteFrame: [new cc.SpriteFrame()],
              getSymbolZOrder: this.getSymbolZOrder.bind(this),
              getRandomSymbol: this.getRandomSymbol.bind(this),
              runScroller: this.runScroller.bind(this),
              getSymbolSize: function () {
                return cc.size(1, 1);
              }
            });
            E.setOnReelStopCallback(this.reelStop.bind(this));
            E.setOnSlotStopCallback(this.spinStop.bind(this));
          };
          A.prototype.onInit = function () {};
          A.prototype.init = function (M) {
            this.dataSource = M.dataSource;
            this.columnCount = M.columnCount;
            this.rowCount = M.rowCount;
            this.setupSlotHelper();
            this.onInit({
              reelArea: this.node
            });
          };
          A.prototype.spin = function (M = false) {
            var E = this.dataSource.transactionModel.stateTransitionTo;
            var F = G.featureConfig.minimumSpinningTime;
            var b = G.featureConfig.regularSpinningTime;
            var H = G.featureConfig.minimumTurboSpinningTime;
            var w = G.featureConfig.regularTurboSpinningTime;
            var U = this.isNormalTransition(E) && M;
            this.isTurboMode = M;
            this.isTurboNormalSpin = U;
            if (U) {
              this.stateMachine.spin(H, w);
              this.markFastStop();
            } else {
              this.stateMachine.spin(F, b);
            }
            this.startScroll();
            this.enableTouchEvent();
          };
          A.prototype.stopSpin = function () {
            if (this.getStopStyle() === j.StopStyle.NORMAL) {
              this.stateMachine.stop(this.stopScroll.bind(this));
            }
          };
          A.prototype.getStopStyle = function () {
            return this.stateMachine.getStopStyle();
          };
          A.prototype.startScroll = function () {
            var M = this.dataSource.transactionModel.stateTransitionTo;
            var E = this.slotHelper;
            var F = x.DEFAULT_SCROLL_SPEED;
            var b = x.DEFAULT_START_SCROLLER_CONFIG;
            var H = x.DEFAULT_STOP_SCROLLER_CONFIG;
            if (this.isTurboMode) {
              F *= x.DEFAULT_TURBO_SPEED_FACTOR;
              b = x.DEFAULT_TURBO_START_SCROLLER_CONFIG;
            }
            var w = {
              maxSpeed: F
            };
            var U = {
              maxSpeed: F
            };
            for (var B = 0; B < this.columnCount; B++) {
              E.setStartScrollerConfig(B, __assign(w, b));
              E.setStopScrollerConfig(B, __assign(U, H));
            }
            E.setSpinType(M);
            E.startScroll();
            this.startScrollingTime = Date.now();
          };
          A.prototype.stopScroll = function () {
            this.slotHelper.stopScroll();
          };
          A.prototype.instantStopScroll = function () {
            var M = this;
            var E = this.slotHelper;
            function F() {
              E.instantStopScroll();
              M.reloadData();
            }
            if (E.getSlotState() === D.SlotState.START) {
              var b = (Date.now() - this.startScrollingTime) / 1000;
              var H = x.DEFAULT_FAST_STOP_DELAY - b;
              if (this.isTurboNormalSpin) {
                H = x.DEFAULT_TURBO_STOP_DELAY - b;
              }
              if (H > 0) {
                C.delayCallback(H)(F);
              } else {
                F();
              }
            } else if (E.getSlotState() === D.SlotState.STOP) {
              F();
            }
          };
          A.prototype.markFastStop = function () {
            this.stateMachine.markFastStop();
          };
          A.prototype.unmarkFastStop = function () {
            this.stateMachine.unmarkFastStop();
          };
          A.prototype.fastStop = function () {
            this.stateMachine.fastStop(this.instantStopScroll.bind(this));
          };
          A.prototype.getSlotItems = function (M) {
            var E;
            if (M) {
              if (typeof M == "number") {
                M = [M];
              }
            } else {
              M = [];
            }
            return (E = this.slotHelper.slotItemHandler).getSlotItems.apply(E, __spread(M));
          };
          A.prototype.getSlotItem = function (M) {
            return this.getSlotItems(M)[0];
          };
          A.prototype.createSlotItem = function (M, E = false) {
            return this.slotHelper.slotItemPool.getSlotItem(M, E);
          };
          A.prototype.releaseSlotItem = function (M) {
            return this.slotHelper.slotItemPool.releaseSlotItem(M);
          };
          A.prototype.setReelData = function (M) {
            this.dataSource = M;
            var E = this.dataSource.transactionModel;
            this.slotHelper.setReelData(E.originalReels);
          };
          A.prototype.reloadData = function () {
            this.slotHelper.reloadSlot();
          };
          A.prototype.runScroller = function (M, E) {
            if (M === D.SlotState.START) {
              return this.onStartScroller(E);
            } else if (M === D.SlotState.STOP) {
              return this.onStopScroller(E);
            } else {
              return C.emptyFunc;
            }
          };
          A.prototype.onStartScroller = function (M) {
            if (this.isTurboNormalSpin) {
              for (var E = 0; E < this.columnCount; E++) {
                M(E);
              }
              return C.emptyFunc;
            }
            return this.scheduleIterator(function (F, b) {
              M(F);
              b();
            }, x.DEFAULT_NORMAL_START_SCROLL_INTERVAL, this.columnCount);
          };
          A.prototype.onStopScroller = function (M) {
            if (this.isFastStop) {
              this.instantStopScroll();
              return C.emptyFunc;
            }
            var E = this.columnCount;
            return this.scheduleIterator(function (F, b) {
              M(F);
              b();
            }, x.DEFAULT_NORMAL_STOP_SCROLL_INTERVAL, E);
          };
          A.prototype.onReelStop = function () {};
          A.prototype.onReelStopped = function () {};
          A.prototype.onSpinStopped = function () {};
          A.prototype.reelStop = function (M) {
            var E = this;
            this.onReelStop(M);
            C.deferCallback(this, true)(function () {
              E.onReelStopped(M);
            });
          };
          A.prototype.spinStop = function () {
            this.disableTouchEvent();
            this.stateMachine.stopped();
            var M = this._onSpinStopCallback;
            this._onSpinStopCallback = undefined;
            if (M) {
              M();
            }
            this.onSpinStopped();
          };
          A.prototype.getRandomSymbol = function () {
            return 1;
          };
          A.prototype.getSymbolZOrder = function () {
            return 1;
          };
          A.prototype.onSlotRegionClicked = function (M) {
            if (this._onClickCallback) {
              this.disableTouchEvent();
              if (M) {
                this._clickEffectController.showClickEffect(M.getLocation());
                this._clickEffectController.showFlash();
              }
              var E = this._onClickCallback;
              this._onClickCallback = undefined;
              if (E) {
                E();
              }
            }
          };
          A.prototype.enableTouchEvent = function () {
            this.slotContainer.on(cc.Node.EventType.TOUCH_START, this.onSlotRegionClicked.bind(this));
          };
          A.prototype.disableTouchEvent = function () {
            this.slotContainer.off(cc.Node.EventType.TOUCH_START, this.onSlotRegionClicked.bind(this));
          };
          A.prototype.scheduleIterator = function (M, E, F, b) {
            var H = 0;
            var w = 0;
            function U() {
              if (++w === F && b) {
                b();
              }
            }
            function B() {
              M(H, U);
              H++;
            }
            B();
            if (F >= 2) {
              Y.schedule(B, E, F - 2, undefined);
            }
            return function () {
              if (F >= 2) {
                Y.unschedule(B);
              }
              b = undefined;
            };
          };
          __decorate([N(cc.Node)], A.prototype, "slotContainer", undefined);
          return __decorate([Q], A);
        }(cc.Component);
        x.default = z;
        cc._RF.pop();
      }
    }, {
      SlotGenerator: "SlotGenerator",
      SlotHelper: "SlotHelper",
      SlotStateMachine: "SlotStateMachine",
      SpinConfigHandler: "SpinConfigHandler",
      Utils: "Utils"
    }],
    GeneralSlotTemplate: [function (R, K, g) {
      'use strict';

      if (!cc._RF.push(K, "e12d8fBWfBCyboZWCaBLXDu", "GeneralSlotTemplate")) {
        Object.defineProperty(g, "__esModule", {
          value: true
        });
        g.initGeneralSlotGameTemplate = g.GSTConfig = undefined;
        g.GSTConfig = {
          disableStateExitDefer: false
        };
        g.initGeneralSlotGameTemplate = function (L) {
          g.GSTConfig = Object.freeze(L);
        };
        cc._RF.pop();
      }
    }, {}],
    GenericLoadingScreenController: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "cb530nJjNxEeb1kcmn96QZc", "GenericLoadingScreenController")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        K.hideLoadingPage = K.showLoadingPage = undefined;
        var T = I("Utils");
        var x = I("NotifyHelper");
        var L = false;
        var D = false;
        var k = undefined;
        var C = undefined;
        K.showLoadingPage = function (N) {
          x.showFullLoadingPage();
          k = N;
          T.delayCallback(0.3)(Q);
        };
        K.hideLoadingPage = function (N) {
          C = N;
          D = true;
          if (L) {
            G();
          }
        };
        cc._RF.pop();
      }
      function j() {
        D = false;
        L = false;
        if (C) {
          C();
        }
        C = undefined;
      }
      function G() {
        x.hideFullLoadingPage();
        T.delayCallback(0.3)(j);
      }
      function V() {
        L = true;
        if (D) {
          G();
        }
      }
      function Q() {
        T.delayCallback(1)(V);
        if (k) {
          k();
        }
        k = undefined;
      }
    }, {
      NotifyHelper: "NotifyHelper",
      Utils: "Utils"
    }],
    GenericSettingButton: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "aeaa7CV0CtEMo2Sab7CGMw1", "GenericSettingButton")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("ButtonTheme");
        var x = I("UIAppearanceHelper");
        var L = I("Utils");
        var D = cc._decorator;
        var k = D.ccclass;
        var C = D.property;
        var u = function (p) {
          function j() {
            var G = p !== null && p.apply(this, arguments) || this;
            G.iconSprite = undefined;
            G.collider = undefined;
            G.buttonTheme = undefined;
            G.circleCollider = undefined;
            G._isInteractable = true;
            G._touchStartPos = cc.v2();
            G._touchPos = cc.v2();
            G._isOutOfBound = false;
            G._touchInteraction = false;
            G._touchInvalid = false;
            G._iconSpriteFrame = undefined;
            G.willHideOnceClick = true;
            return G;
          }
          __extends(j, p);
          j.prototype.onLoad = function () {
            var G;
            var V;
            if (shell.environment.getOrientationMode() === "land") {
              if ((G = this.circleCollider) !== null && G !== undefined) {
                G.getComponent(cc.Sprite).spriteFrame = undefined;
              }
              this.circleCollider = undefined;
            }
            this.enableTouchInteraction();
            if ((V = this.circleCollider) !== null && V !== undefined) {
              V.opacity = 0;
            }
            if (this.buttonTheme) {
              var Q = x.uiAppearanceHelper.v(this.buttonTheme.domainKey + "." + this.buttonTheme.colorKey + ".normal");
              L.setNodeColorWithOpacity(this.iconSprite, Q);
            }
            this._iconSpriteFrame = this.iconSprite.getComponent(cc.Sprite).spriteFrame;
          };
          j.prototype.setIconSprite = function (G) {
            this.iconSprite.getComponent(cc.Sprite).spriteFrame = G;
          };
          j.prototype.destroy = function () {
            this.disableTouchInteraction();
            return p.prototype.destroy.call(this);
          };
          j.prototype.onClick = function () {};
          j.prototype.buttonActivate = function (G) {
            if (G) {
              this.node.active = true;
              L.deferCallback(this)(this.enableTouchInteraction);
            } else {
              this.disableTouchInteraction();
              this.node.active = false;
            }
          };
          Object.defineProperty(j.prototype, "isInteractable", {
            get: function () {
              return this._isInteractable;
            },
            set: function (G) {
              this._isInteractable = G;
              this.interactableButtonColor(G);
              if (G) {
                this.enableTouchInteraction();
              } else {
                this.disableTouchInteraction();
                this._touchInvalid = false;
              }
            },
            enumerable: false,
            configurable: true
          });
          j.prototype._touchStart = function (G) {
            if (this._isInteractable) {
              this._touchInvalid = true;
              this._touchPos = this._touchStartPos = G.touch.getLocation();
              var V = this._checkWithinCircleCollider(G);
              this._isOutOfBound = !V;
              this._changeButtonPressedColor(V);
            } else {
              G.stopPropagation();
            }
          };
          j.prototype._touchMoved = function (G) {
            var V;
            var Q;
            if (this._touchInvalid) {
              if (this._isInteractable) {
                this._touchPos = G.touch.getLocation();
                if (this.circleCollider) {
                  if (!this._isOutOfBound) {
                    this._touchPos = G.touch.getLocation();
                    V = cc.v2(0, this._touchStartPos.y);
                    Q = cc.v2(0, this._touchPos.y);
                    if (V.sub(Q).mag() > 60) {
                      this._changeButtonPressedColor(false);
                      this._isOutOfBound = true;
                    }
                    G.stopPropagation();
                  }
                }
              } else {
                G.stopPropagation();
              }
            }
          };
          j.prototype._touchEnded = function (G) {
            if (this._touchInvalid) {
              if (this._isInteractable) {
                if (!this._isOutOfBound) {
                  G.stopPropagation();
                  this._changeButtonPressedColor(false);
                  this.onClick();
                  if (this.willHideOnceClick) {
                    this._mouseLeaveCircleCollider();
                  }
                }
              } else {
                G.stopPropagation();
              }
            }
          };
          j.prototype._touchCancel = function (G) {
            if (this._touchInvalid) {
              if (this._isInteractable) {
                if (!this._isOutOfBound) {
                  G.stopPropagation();
                  this._changeButtonPressedColor(false);
                }
              } else {
                G.stopPropagation();
              }
            }
          };
          j.prototype.changeButtonColor = function (G) {
            this.changeButtonPressedColor(G);
          };
          j.prototype._changeButtonPressedColor = function (G) {
            if (!this._isOutOfBound) {
              this.changeButtonPressedColor(G);
            }
          };
          j.prototype.changeButtonPressedColor = function (G) {
            if (this.buttonTheme) {
              var V = x.uiAppearanceHelper.v(this.buttonTheme.domainKey + "." + this.buttonTheme.colorKey + ".normal");
              var Q = x.uiAppearanceHelper.v(this.buttonTheme.domainKey + "." + this.buttonTheme.colorKey + ".pressed");
              L.setNodeColorWithOpacity(this.iconSprite, G ? Q : V);
            }
          };
          j.prototype.interactableButtonColor = function (G) {
            if (this.buttonTheme) {
              var V = x.uiAppearanceHelper.v(this.buttonTheme.domainKey + "." + this.buttonTheme.colorKey + ".normal");
              var Q = x.uiAppearanceHelper.v(this.buttonTheme.domainKey + "." + this.buttonTheme.colorKey + ".disabled");
              L.setNodeColorWithOpacity(this.iconSprite, G ? V : Q);
            }
          };
          j.prototype._checkWithinCircleCollider = function (G) {
            var V = this.circleCollider;
            if (!V) {
              return true;
            }
            var Q = G.touch ? G.touch.getLocation() : G.getLocation();
            var N = V.convertToNodeSpaceAR(Q);
            var Y = V.width / 2;
            return N.x * N.x + N.y * N.y <= Y * Y;
          };
          j.prototype._touchCircleCollider = function (G) {
            if (this._iconSpriteFrame && this.circleCollider) {
              if (this._checkWithinCircleCollider(G)) {
                this.circleCollider.opacity = 255;
              } else {
                this.circleCollider.opacity = 0;
              }
            }
          };
          j.prototype._mouseLeaveCircleCollider = function () {
            var G;
            if (this._iconSpriteFrame && this.circleCollider) {
              this._isOutOfBound = false;
              if ((G = this.circleCollider) !== null && G !== undefined) {
                G.opacity = 0;
              }
            }
          };
          j.prototype.enableTouchInteraction = function () {
            if (!this._touchInteraction) {
              this._touchInteraction = true;
              var G = this.circleCollider ? this.circleCollider : this.collider;
              G.on(cc.Node.EventType.TOUCH_START, this._touchStart, this);
              G.on(cc.Node.EventType.TOUCH_MOVE, this._touchMoved, this);
              G.on(cc.Node.EventType.TOUCH_END, this._touchEnded, this);
              G.on(cc.Node.EventType.TOUCH_CANCEL, this._touchCancel, this);
              if (this.circleCollider) {
                G.on(cc.Node.EventType.MOUSE_ENTER, this._touchCircleCollider, this);
                G.on(cc.Node.EventType.MOUSE_MOVE, this._touchCircleCollider, this);
                G.on(cc.Node.EventType.MOUSE_LEAVE, this._mouseLeaveCircleCollider, this);
              }
            }
          };
          j.prototype.disableTouchInteraction = function () {
            if (this._touchInteraction) {
              this._touchInteraction = false;
              var G = this.circleCollider ? this.circleCollider : this.collider;
              G.off(cc.Node.EventType.TOUCH_START, this._touchStart, this);
              G.off(cc.Node.EventType.TOUCH_MOVE, this._touchMoved, this);
              G.off(cc.Node.EventType.TOUCH_END, this._touchEnded, this);
              G.off(cc.Node.EventType.TOUCH_CANCEL, this._touchCancel, this);
              if (this.circleCollider) {
                G.off(cc.Node.EventType.MOUSE_ENTER, this._touchCircleCollider, this);
                G.off(cc.Node.EventType.MOUSE_MOVE, this._touchCircleCollider, this);
                G.off(cc.Node.EventType.MOUSE_LEAVE, this._mouseLeaveCircleCollider, this);
                this.circleCollider.opacity = 0;
              }
            }
          };
          __decorate([C(cc.Node)], j.prototype, "iconSprite", undefined);
          __decorate([C(cc.Node)], j.prototype, "collider", undefined);
          __decorate([C(T)], j.prototype, "buttonTheme", undefined);
          __decorate([C(cc.Node)], j.prototype, "circleCollider", undefined);
          return __decorate([k], j);
        }(cc.Component);
        K.default = u;
        cc._RF.pop();
      }
    }, {
      ButtonTheme: "ButtonTheme",
      UIAppearanceHelper: "UIAppearanceHelper",
      Utils: "Utils"
    }],
    GridView: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "2a349Sf9h1Dw6gCmtoNZ3ZP", "GridView")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("ScrollViewEx");
        function x(u, c, p) {
          return u.fuzzyEquals(c, p);
        }
        function L(u, c) {
          return u.sub(c).mag();
        }
        var D = cc._decorator;
        var k = D.ccclass;
        D.property;
        var C = function (u) {
          function j() {
            var G = u !== null && u.apply(this, arguments) || this;
            G.autoSnap = true;
            G._nodePools = {};
            G._templates = {};
            return G;
          }
          var c = {
            get: function () {
              return this._nodePools;
            },
            enumerable: false,
            configurable: true
          };
          var p = {
            get: function () {
              return this._templates;
            },
            enumerable: false,
            configurable: true
          };
          __extends(j, u);
          Object.defineProperty(j.prototype, "nodePools", c);
          Object.defineProperty(j.prototype, "templates", p);
          j.prototype.setEstimatedSize = function (G) {
            if (this.vertical) {
              this.estimatedHeight = G.y;
            } else {
              this.estimatedWidth = G.x;
            }
          };
          j.prototype.setConstantCellSize = function (G, V) {
            var Q = {
              width: G,
              height: V
            };
            this.constCellSize = Q;
          };
          j.prototype.setResetFinish = function (G) {
            this.resetFinish = G;
          };
          j.prototype.setSpawnCell = function (G) {
            this._spawnCellAction = G;
          };
          j.prototype.setRemoveCell = function (G) {
            this._removeCellAction = G;
          };
          j.prototype.setPullingLeft = function (G) {
            this._pullingLeftAction = G;
          };
          j.prototype.setPullLeftEnd = function (G) {
            this._pullLeftEndAction = G;
          };
          j.prototype.setPullingRight = function (G) {
            this._pullingRightAction = G;
          };
          j.prototype.setPullRightEnd = function (G) {
            this._pullRightEndAction = G;
          };
          j.prototype.setPullingDown = function (G) {
            this._pullingDownAction = G;
          };
          j.prototype.setPullDownEnd = function (G) {
            this._pullDownEndAction = G;
          };
          j.prototype.setPullingUp = function (G) {
            this._pullingUpAction = G;
          };
          j.prototype.setPullUpEnd = function (G) {
            this._pullUpEndAction = G;
          };
          j.prototype.setFocusPoint = function (G) {
            switch (G) {
              case 1:
                this.focusPoint = {};
                this.focusPoint.type = 1;
                this.focusPoint.width = this.viewSize.width / 2;
                this.focusPoint.height = this.viewSize.height / 2;
                break;
              case 2:
                this.focusPoint = {};
                this.focusPoint.type = 2;
                this.focusPoint.width = this.viewSize.width;
                this.focusPoint.height = this.viewSize.height;
                break;
              default:
                this.focusPoint = {};
                this.focusPoint.type = 0;
                this.focusPoint.width = 0;
                this.focusPoint.height = 0;
            }
          };
          j.prototype.getFocusPoint = function () {
            if (!this.focusPoint) {
              this.focusPoint = {};
              this.focusPoint.type = 0;
              this.focusPoint.width = 0;
              this.focusPoint.height = 0;
            }
            return this.focusPoint;
          };
          j.prototype.setLayoutSetting = function (G) {
            this.contentLayout = this.content.getComponent(cc.Layout);
            this.layoutSetting = this.getLayoutSetting();
            if (G.spacingLeft) {
              this.layoutSetting.spacingLeft = G.spacingLeft;
            }
            if (G.spacingRight) {
              this.layoutSetting.spacingRight = G.spacingRight;
            }
            if (G.spacingTop) {
              this.layoutSetting.spacingTop = G.spacingTop;
            }
            if (G.spacingBottom) {
              this.layoutSetting.spacingBottom = G.spacingBottom;
            }
            if (G.spacingX) {
              this.layoutSetting.spacingX = G.spacingX;
            }
            if (G.spacingY) {
              this.layoutSetting.spacingY = G.spacingY;
            }
            this.contentLayout.paddingLeft = this.layoutSetting.spacingLeft;
            this.contentLayout.paddingRight = this.layoutSetting.spacingRight;
            this.contentLayout.paddingTop = this.layoutSetting.spacingTop;
            this.contentLayout.paddingBottom = this.layoutSetting.spacingBottom;
            this.contentLayout.spacingX = this.layoutSetting.spacingX;
            this.contentLayout.spacingY = this.layoutSetting.spacingY;
          };
          j.prototype.getLayoutSetting = function () {
            if (this.layoutSetting) {
              return this.layoutSetting;
            } else {
              return this.layoutSetting = {
                spacingLeft: 0,
                spacingRight: 0,
                spacingTop: 0,
                spacingBottom: 0,
                spacingX: 0,
                spacingY: 0
              };
            }
          };
          j.prototype.getVisibleItems = function () {
            var G = [];
            var V = this.content.children;
            if (V.length) {
              for (var Q = 0; Q < V.length; Q++) {
                G.push(V[Q]);
              }
            }
            return G;
          };
          j.prototype.setDataSource = function (G) {
            var V = this.node;
            var Q = V.width;
            var N = V.height;
            this._setViewSize(Q, N);
            if (G !== this._dataSource) {
              this._dataSource = G;
            }
          };
          j.prototype._getDataSource = function () {
            return this._dataSource;
          };
          j.prototype._setDataCount = function (G) {
            this._dataCount = G;
          };
          j.prototype._getDataCount = function () {
            this._dataCount ||= 0;
            return this._dataCount;
          };
          j.prototype._onSizeChanged = function () {
            var G = this.node;
            var V = G.width;
            var Q = G.height;
            this._setViewSize(V, Q);
            this._respawn(this._sectionIndex, this.currentIndex);
          };
          j.prototype._setViewSize = function (G, V) {
            var Q = {
              width: G,
              height: V
            };
            this.viewSize = Q;
            this.content.parent.setContentSize(G, V);
          };
          j.prototype._getViewSize = function () {
            return this.viewSize;
          };
          j.prototype.register = function (G, V, Q) {
            if (this.nodePools[G]) ;else if (V) {
              var N = new cc.NodePool(Q);
              this.templates[G] = V;
              this.nodePools[G] = N;
            }
          };
          j.prototype.reloadData = function () {
            this.setSnapDone(true);
            var G = this._dataSource;
            var V = G.getCount(this, this._sectionIndex);
            var Q = this._dataCount;
            if (Q !== V) {
              this.setMasterControl(true);
              if (V < Q) {
                this._reloadReduceData(V);
              } else {
                this._setDataCount(V);
                this.reloadCurrentData();
                this._reloadAddData();
              }
            } else {
              this.reloadCurrentData();
            }
            if (G.didReloadData) {
              G.didReloadData();
            }
          };
          j.prototype.insertItem = function () {};
          j.prototype.removeItem = function () {};
          j.prototype._respawn = function (G = this._sectionIndex, V, Q) {
            this._unbindListener();
            this._resetScrollView();
            this.setMasterControl(true);
            this.content.y = 0;
            this.content.x = 0;
            this.content.setContentSize(0, 0);
            this.contentLayout.paddingTop = this.layoutSetting.spacingTop;
            this.contentLayout.paddingBottom = this.layoutSetting.spacingBottom;
            this.contentLayout.paddingLeft = this.layoutSetting.spacingLeft;
            this.contentLayout.paddingRight = this.layoutSetting.spacingRight;
            if (this.content.children.length) {
              for (var N = this.content.children.length - 1; N >= 0; N--) {
                var Y = this.content.children[N];
                this._putOuterCellNode(Y);
              }
            }
            this.init(G, V, false, Q);
          };
          j.prototype.reset = function (G = this._sectionIndex, V) {
            this._respawn(G, V, this.resetFinish);
          };
          j.prototype.init = function (G, V, Q, N) {
            if (V === undefined) {
              V = 0;
            }
            if (Q === undefined) {
              Q = true;
            }
            if (!this.layoutSetting) {
              this.setLayoutSetting({
                spacingLeft: 0,
                spacingRight: 0,
                spacingTop: 0,
                spacingBottom: 0,
                spacingX: 0,
                spacingY: 0
              });
            }
            var W = this._dataSource;
            this.isDynamicSize = !!W.getCellSize;
            this.isPreCalculateSize = !!this.constCellSize || !!this.isDynamicSize;
            if (!this.isPreCalculateSize) {
              V = 0;
            }
            this.originalElastic = this.elastic;
            this.currentIndex = V;
            this.currentTarget = V;
            this.requestSnap = false;
            this.setMasterControl(false);
            this.contentLayout = this.content.getComponent(cc.Layout);
            this.setSnapDone(true);
            this.snapPause = false;
            this.outerCellsMatrix = [];
            this._sectionIndex = G;
            this.pauseUpdate = false;
            this.pullDir = null;
            this.prevContentY = this.content.y;
            this.prevContentX = this.content.x * -1;
            this._bindListener();
            this._setDataCount(W.getCount(this, this._sectionIndex));
            if (this.vertical) {
              this.contentLayout.startAxis = 0;
              this.content.width = this.viewSize.width;
              this._spawnVerticalInit(0, V, this.viewSize.height, Q, N);
            } else {
              this.contentLayout.startAxis = 1;
              this.content.height = this.viewSize.height;
              this._spawnHorizontalInit(0, V, this.viewSize.width, Q, N);
            }
          };
          j.prototype.scrollTo = function (G, V) {
            var Q = this;
            if (V === undefined) {
              V = true;
            }
            if (!(G >= this._dataCount)) {
              if (!this.isPreCalculateSize || V) {
                if (this.vertical) {
                  var N = this._getRowOrColByIndex(G);
                  if (N !== null) {
                    var Y = this.getFocusPoint();
                    this.currentIndex = G;
                    if (Y.type === 1) {
                      this.target = this._getRowTotalHeight(N) - this.outerCellsMatrix[N].height - Y.height + this.outerCellsMatrix[N][0].height / 2;
                    } else {
                      this.target = this._getRowTotalHeight(N) - this.outerCellsMatrix[N].height - this.layoutSetting.spacingTop;
                    }
                    var W = this.content.height - this.viewSize.height;
                    if (this.target < 0) {
                      this.target = 0;
                    } else if (this.target > W) {
                      this.target = W;
                    }
                  } else {
                    this.target = this.estimatedHeight;
                    this.suddenStopIndex = G;
                  }
                } else {
                  var q = this._getRowOrColByIndex(G);
                  if (q !== null) {
                    Y = this.getFocusPoint();
                    this.currentIndex = G;
                    if (Y.type === 1) {
                      this.target = this._getColTotalWidth(q) - this.outerCellsMatrix[q].width - Y.width + this.outerCellsMatrix[q][0].width / 2;
                    } else {
                      this.target = this._getColTotalWidth(q) - this.outerCellsMatrix[q].width - this.layoutSetting.spacingLeft;
                    }
                    var S = this.content.width - this.viewSize.width;
                    if (this.target < 0) {
                      this.target = 0;
                    } else if (this.target > S) {
                      this.target = S;
                    }
                  } else {
                    this.target = this.estimatedWidth;
                    this.suddenStopIndex = G;
                  }
                }
                this.lerpSpeed = 10;
                this.setSnapDone(false);
              } else {
                this._respawn(this._sectionIndex, G, function () {
                  if (Q.snapFinish) {
                    Q.snapFinish(G);
                  }
                });
              }
            }
          };
          j.prototype.stopUpdate = function () {
            this.setMasterControl(true);
          };
          j.prototype.resumeUpdate = function () {
            if (this.pauseUpdate) {
              this.setMasterControl(false);
              this.pullDir = null;
              this.pauseUpdate = false;
            }
          };
          j.prototype.setMasterControl = function (G) {
            this._masterControl = G;
          };
          j.prototype._recycle = function () {
            if (!this.pauseUpdate && !this._masterControl) {
              if (this.content.children.length) {
                if (this.vertical) {
                  if (this.content.y !== this.prevContentY) {
                    this._recycleVertical();
                  }
                } else if (this.content.x * -1 !== this.prevContentX) {
                  this._recycleHorizontal();
                }
              }
            }
          };
          j.prototype._getRowTotalHeight = function (G) {
            if (this.outerCellsMatrix[G] && this.outerCellsMatrix[G].totalHeight) {
              return this.outerCellsMatrix[G].totalHeight;
            }
            var V = this.layoutSetting.spacingTop;
            for (var Q = 0; Q <= G; Q++) {
              V += this.outerCellsMatrix[Q].height;
              if (Q === G) {
                this.outerCellsMatrix[G].totalHeight = V;
                return V;
              }
              V += this.layoutSetting.spacingY;
            }
          };
          j.prototype._getColTotalWidth = function (G) {
            if (this.outerCellsMatrix[G] && this.outerCellsMatrix[G].totalWidth) {
              return this.outerCellsMatrix[G].totalWidth;
            }
            var V = this.layoutSetting.spacingLeft;
            for (var Q = 0; Q <= G; Q++) {
              V += this.outerCellsMatrix[Q].width;
              if (Q === G) {
                this.outerCellsMatrix[G].totalWidth = V;
                return V;
              }
              V += this.layoutSetting.spacingX;
            }
          };
          j.prototype._getNearestItem = function () {
            if (this.vertical) {
              if (this._getContentTopBoundary() < this._topBoundary) {
                return 0;
              }
              if (this._getContentBottomBoundary() > this._bottomBoundary) {
                var G = this.content.children.length - 1;
                return this.content.children[G].row;
              }
              var V = 0;
              var Q = 0;
              var N = this.content.height;
              var Y = null;
              for (var W = 0; W < this.content.children.length; W++) {
                if (Y != this.content.children[W].row) {
                  Y = this.content.children[W].row;
                  var q = this._getRowTotalHeight(Y) - this.outerCellsMatrix[Y].height - this.layoutSetting.spacingTop;
                  if ((Q = Math.abs(q - this.content.y)) >= N) {
                    return V;
                  }
                  V = Y;
                  N = Q;
                }
              }
              return V;
            }
            if (this._getContentLeftBoundary() > this._leftBoundary) {
              return 0;
            }
            if (this._getContentRightBoundary() < this._rightBoundary) {
              G = this.content.children.length - 1;
              return this.content.children[G].col;
            }
            var S = 0;
            var z = 0;
            N = this.content.width;
            var f = null;
            for (W = 0; W < this.content.children.length; W++) {
              if (f != this.content.children[W].col) {
                f = this.content.children[W].col;
                var A = this._getColTotalWidth(f) - this.outerCellsMatrix[f].width - this.layoutSetting.spacingLeft;
                if ((z = Math.abs(A - this.content.x * -1)) >= N) {
                  return S;
                }
                S = f;
                N = z;
              }
            }
            return S;
          };
          j.prototype._autoSnapTo = function () {
            this.elastic = this.originalElastic;
            if (!this._masterControl && this.requestSnap && this.content.children.length) {
              if (this.vertical) {
                var G = this.getFocusPoint();
                this.requestSnap = false;
                var V = this._getNearestItem();
                this.currentTarget = V;
                this.currentIndex = this.outerCellsMatrix[V][0] ? this.outerCellsMatrix[V][0].zIndex : null;
                if (G.type === 1) {
                  this.target = this._getRowTotalHeight(V) - this.outerCellsMatrix[V].height - G.height + this.outerCellsMatrix[V][0].height / 2;
                } else {
                  this.target = this._getRowTotalHeight(V) - this.outerCellsMatrix[V].height - this.layoutSetting.spacingTop;
                }
                var Q = this.content.height - this.viewSize.height;
                if (Q < 0) {
                  Q = 0;
                }
                if (this.target <= 0) {
                  this.target = 0;
                } else if (this.target >= Q) {
                  this.target = Q;
                }
              } else {
                G = this.getFocusPoint();
                this.requestSnap = false;
                var N = this._getNearestItem();
                this.currentTarget = N;
                this.currentIndex = this.outerCellsMatrix[N][0] ? this.outerCellsMatrix[N][0].zIndex : null;
                if (G.type === 1) {
                  this.target = this._getColTotalWidth(N) - this.outerCellsMatrix[N].width - G.width + this.outerCellsMatrix[N][0].width / 2;
                } else {
                  this.target = this._getColTotalWidth(N) - this.outerCellsMatrix[N].width - this.layoutSetting.spacingLeft;
                }
                var Y = this.content.width - this.viewSize.width;
                if (Y < 0) {
                  Y = 0;
                }
                if (this.target <= 0) {
                  this.target = 0;
                } else if (this.target >= Y) {
                  this.target = Y;
                }
              }
              this.lerpSpeed = 5;
              this.setSnapDone(false);
            }
          };
          j.prototype._recycleVertical = function () {
            var G = this.content.y;
            var V = this.content.children[0];
            var Q = this.content.children[this.content.children.length - 1];
            var N = V.row;
            var Y = Q.row;
            var W = this._getRowTotalHeight(Y) - this.viewSize.height;
            if (this.prevContentY > G) {
              var q = V.zIndex;
              var S = G - this.contentLayout.paddingTop + this.layoutSetting.spacingY;
              if (S < 0) {
                this._spawnVerticalPrevious(N - 1, q - 1, S);
              }
              if (Y > 0 && this.outerCellsMatrix[Y - 1] && this.outerCellsMatrix[Y - 1][0]) {
                var z = G - W + this.layoutSetting.spacingY + this.outerCellsMatrix[Y].height;
                if (z < 0) {
                  this._removeVerticalNext(Y, z, W);
                }
              }
            } else {
              var f = Q.zIndex;
              var A = G - W;
              if (A > 0) {
                this._spawnVerticalNext(Y + 1, 0, f + 1, A);
              }
              if (N < this.outerCellsMatrix.length - 1 && this.outerCellsMatrix[N + 1] && this.outerCellsMatrix[N + 1][0]) {
                var M = G - this.contentLayout.paddingTop - this.outerCellsMatrix[N].height;
                if (M > 0) {
                  this._removeVerticalPrevious(N, M);
                }
              }
            }
            this.prevContentY = G;
          };
          j.prototype._recycleHorizontal = function () {
            var G = this.content.x * -1;
            var V = this.content.children[0];
            var Q = this.content.children[this.content.children.length - 1];
            var N = V.col;
            var Y = Q.col;
            var W = this._getColTotalWidth(Y) - this.viewSize.width;
            if (this.prevContentX > G) {
              var q = V.zIndex;
              var S = G - this.contentLayout.paddingLeft + this.layoutSetting.spacingX;
              if (S < 0) {
                this._spawnHorizontalPrevious(N - 1, q - 1, S);
              }
              if (Y > 0 && this.outerCellsMatrix[Y - 1] && this.outerCellsMatrix[Y - 1][0]) {
                var z = G - W + this.layoutSetting.spacingX + this.outerCellsMatrix[Y].width;
                if (z < 0) {
                  this._removeHorizontalNext(Y, z, W);
                }
              }
            } else {
              var f = Q.zIndex;
              var A = G - W;
              if (A > 0) {
                this._spawnHorizontalNext(0, Y + 1, f + 1, A);
              }
              if (N < this.outerCellsMatrix.length - 1 && this.outerCellsMatrix[N + 1] && this.outerCellsMatrix[N + 1][0]) {
                var M = G - this.contentLayout.paddingLeft - this.outerCellsMatrix[N].width;
                if (M > 0) {
                  this._removeHorizontalPrevious(N, M);
                }
              }
            }
            this.prevContentX = G;
          };
          j.prototype._precalculateVerticalContent = function () {
            for (var G, V, Q = this.layoutSetting, N = Q.spacingX, Y = Q.spacingLeft + Q.spacingRight, W = 0, q = 0, S = 0, z = this._dataCount; W < z;) {
              if (this.isDynamicSize) {
                var f = this._dataSource.getCellSize(W);
                G = f.width + N;
                V = f.height;
              } else {
                G = this.constCellSize.width + N;
                V = this.constCellSize.height;
              }
              if (!this.outerCellsMatrix[q]) {
                this.outerCellsMatrix[q] = {};
                this.outerCellsMatrix[q][S] = null;
                this.outerCellsMatrix[q].itemCount = 0;
                this.outerCellsMatrix[q].height = 0;
                this.outerCellsMatrix[q].freeWidth = this.viewSize.width - Y;
                this.freeWidth = this.viewSize.width - Y;
              }
              if (this.freeWidth - G >= 0) {
                this.outerCellsMatrix[q].height = Math.max(V, this.outerCellsMatrix[q].height);
                this.outerCellsMatrix[q][S] = null;
                this.freeWidth -= G;
                S += 1;
                this.outerCellsMatrix[q].itemCount = S;
                W++;
              } else if (this.freeWidth + N - G >= 0) {
                this.outerCellsMatrix[q].height = Math.max(V, this.outerCellsMatrix[q].height);
                this.outerCellsMatrix[q][S] = null;
                this.freeWidth -= G;
                S += 1;
                this.outerCellsMatrix[q].itemCount = S;
                W++;
              } else {
                q += 1;
                S = 0;
              }
            }
            this.freeWidth = undefined;
            this._resetRowScrollSize();
          };
          j.prototype._precalculateHorizontalContent = function () {
            var G;
            for (var V, Q = this.layoutSetting, N = Q.spacingY, Y = Q.spacingTop + Q.spacingBottom, W = 0, q = 0, S = 0, z = this._dataCount; W < z;) {
              if (this.isDynamicSize) {
                var f = this._dataSource.getCellSize(W);
                G = f.width;
                V = f.height + N;
              } else {
                G = this.constCellSize.width;
                V = this.constCellSize.height + N;
              }
              if (!this.outerCellsMatrix[S]) {
                this.outerCellsMatrix[S] = {};
                this.outerCellsMatrix[S][q] = {};
                this.outerCellsMatrix[S].itemCount = 0;
                this.outerCellsMatrix[S].width = 0;
                this.outerCellsMatrix[S].freeHeight = this.viewSize.height - Y;
                this.freeHeight = this.viewSize.height - Y;
              }
              if (this.freeHeight - V >= 0) {
                this.outerCellsMatrix[S].width = Math.max(G, this.outerCellsMatrix[S].width);
                this.outerCellsMatrix[S][q] = null;
                this.freeHeight -= V;
                q += 1;
                this.outerCellsMatrix[S].itemCount = q;
                W++;
              } else if (this.freeHeight + this.layoutSetting.spacingY - V >= 0) {
                this.outerCellsMatrix[S].width = Math.max(G, this.outerCellsMatrix[S].width);
                this.outerCellsMatrix[S][q] = null;
                this.freeHeight -= V;
                q += 1;
                this.outerCellsMatrix[S].itemCount = q;
                W++;
              } else {
                S += 1;
                q = 0;
              }
            }
            this.freeHeight = undefined;
            this._resetColScrollSize();
          };
          j.prototype._spawnTopToBottom = function (G, V, Q) {
            this.lastContentY = this.content.y;
            var N;
            var Y;
            var W = this.layoutSetting;
            var q = W.spacingX;
            for (var S = W.spacingY, z = W.spacingLeft + W.spacingRight, A = G, M = 0, E = this._dataCount, F = 0; V < E;) {
              if (this.isDynamicSize) {
                var b = this._dataSource.getCellSize(V);
                N = b.width + q;
                Y = b.height;
              } else {
                N = this.constCellSize.width + q;
                Y = this.constCellSize.height;
              }
              if (!(Q > 0)) {
                return;
              }
              if (!this.outerCellsMatrix[A]) {
                this.outerCellsMatrix[A] = {};
                this.outerCellsMatrix[A][M] = null;
                this.outerCellsMatrix[A].itemCount = 0;
                this.outerCellsMatrix[A].height = 0;
                this.outerCellsMatrix[A].freeWidth = this.viewSize.width - z;
              }
              if (this.outerCellsMatrix[A].freeWidth - N >= 0) {
                this.outerCellsMatrix[A].height = Math.max(Y, this.outerCellsMatrix[A].height);
                var H = this._dataSource.getItem(this, V, this._sectionIndex);
                this._setOuterCellData(H, A, M, V);
                this.outerCellsMatrix[A].freeWidth -= N;
                M += 1;
                this.outerCellsMatrix[A].itemCount = M;
                V++;
              } else if (this.outerCellsMatrix[A].freeWidth + q - N >= 0) {
                this.outerCellsMatrix[A].height = Math.max(Y, this.outerCellsMatrix[A].height);
                H = this._dataSource.getItem(this, V, this._sectionIndex);
                this._setOuterCellData(H, A, M, V);
                this.outerCellsMatrix[A].freeWidth -= N;
                M += 1;
                this.outerCellsMatrix[A].itemCount = M;
                V++;
              } else {
                var w = (Q -= F) - (this.outerCellsMatrix[A].height + S);
                if (w > 0) {
                  Q = w;
                } else if (w + S > 0) {
                  Q = w + S;
                  F = S;
                } else {
                  Q = w;
                }
                A += 1;
                M = 0;
              }
            }
          };
          j.prototype._spawnLeftToRight = function (G, V, Q) {
            this.lastContentX = this.content.x * -1;
            var N;
            var Y;
            var W = this.layoutSetting;
            for (var q = W.spacingX, S = W.spacingY, z = W.spacingTop + W.spacingBottom, A = 0, M = G, E = this._dataCount, F = 0; V < E;) {
              if (this.isDynamicSize) {
                var b = this._dataSource.getCellSize(V);
                N = b.width;
                Y = b.height + S;
              } else {
                N = this.constCellSize.width;
                Y = this.constCellSize.height + S;
              }
              if (!(Q > 0)) {
                this.setMasterControl(false);
                return;
              }
              if (!this.outerCellsMatrix[M]) {
                this.outerCellsMatrix[M] = {};
                this.outerCellsMatrix[M][A] = {};
                this.outerCellsMatrix[M].itemCount = 0;
                this.outerCellsMatrix[M].width = 0;
                this.outerCellsMatrix[M].freeHeight = this.viewSize.height - z;
              }
              if (this.outerCellsMatrix[M].freeHeight - Y >= 0) {
                this.outerCellsMatrix[M].width = Math.max(N, this.outerCellsMatrix[M].width);
                var H = this._dataSource.getItem(this, V, this._sectionIndex);
                this._setOuterCellData(H, A, M, V);
                this.outerCellsMatrix[M].freeHeight -= Y;
                A += 1;
                this.outerCellsMatrix[M].itemCount = A;
                V++;
              } else if (this.outerCellsMatrix[M].freeHeight + S - Y >= 0) {
                this.outerCellsMatrix[M].width = Math.max(N, this.outerCellsMatrix[M].width);
                H = this._dataSource.getItem(this, V, this._sectionIndex);
                this._setOuterCellData(H, A, M, V);
                this.outerCellsMatrix[M].freeHeight -= Y;
                A += 1;
                this.outerCellsMatrix[M].itemCount = A;
                V++;
              } else {
                var w = (Q -= F) - (this.outerCellsMatrix[M].width + q);
                if (w > 0) {
                  Q = w;
                } else if (w + q > 0) {
                  Q = w + q;
                  F = q;
                } else {
                  Q = w;
                }
                M += 1;
                A = 0;
              }
            }
            this.setMasterControl(false);
          };
          j.prototype._spawnVerticalTargetArea = function (G, V, Q) {
            var N = this._getRowOrColByIndex(G);
            var Y = this._getFirstIndexByRowOrCol(N);
            var W = this._getRowTotalHeight(N) - this.outerCellsMatrix[N].height;
            if (this._getContentTopBoundary() < this._topBoundary) {
              this.target = 0;
            } else if (this._getContentBottomBoundary() > this._bottomBoundary) {
              this.target = this.content.height + this._bottomBoundary;
            } else {
              this.target = W - this.layoutSetting.spacingTop;
            }
            this.content.y = this.target;
            this.contentLayout.paddingTop = W;
            this.contentLayout.paddingBottom = this.layoutSetting.spacingBottom;
            this.contentLayout.updateLayout();
            this._spawnTopToBottom(N, Y, V);
            var q = this.content.y - W;
            if (q < 0) {
              this._spawnVerticalPrevious(N - 1, Y - 1, q, Q);
            } else if (Q) {
              Q();
            }
            this.setMasterControl(false);
          };
          j.prototype._spawnHorizontalTargetArea = function (G, V, Q) {
            var N = this._getRowOrColByIndex(G);
            var Y = this._getFirstIndexByRowOrCol(N);
            var W = (this._getColTotalWidth(N) - this.outerCellsMatrix[N].width) * -1;
            if (this._getContentLeftBoundary() > this._leftBoundary) {
              this.target = 0;
            } else if (this._getContentRightBoundary() < this._rightBoundary) {
              this.target = (this.content.width - this._rightBoundary) * -1;
            } else {
              this.target = W + this.layoutSetting.spacingLeft;
            }
            this.content.x = this.target;
            this.contentLayout.paddingLeft = -W;
            this.contentLayout.paddingRight = this.layoutSetting.spacingRight;
            this.contentLayout.updateLayout();
            this._spawnLeftToRight(N, Y, V);
            var q = this.content.x * -1 + W;
            if (q < 0) {
              this._spawnHorizontalPrevious(N - 1, Y - 1, q, Q);
            } else if (Q) {
              Q();
            }
            this.setMasterControl(false);
          };
          j.prototype._spawnVerticalInit = function (G, V, Q, N = true, Y) {
            if (this._dataCount) {
              if (this.isPreCalculateSize && !N) {
                this._precalculateVerticalContent();
                this._spawnVerticalTargetArea(V, Q, Y);
              } else {
                this.lastContentY = this.content.y;
                var W = this.layoutSetting;
                var q = W.spacingX;
                for (var S = W.spacingY, z = W.spacingLeft + W.spacingRight, A = G, M = 0, E = undefined, F = undefined, b = undefined, H = this._dataCount, w = 0; V < H;) {
                  F = (E = this._dataSource.getItem(this, V, this._sectionIndex)).width + q;
                  b = E.height;
                  if (!(Q > 0)) {
                    this._resetRowScrollSize();
                    this._enqueueReusableItem(E);
                    this.setMasterControl(false);
                    return;
                  }
                  if (!this.outerCellsMatrix[A]) {
                    this.outerCellsMatrix[A] = {};
                    this.outerCellsMatrix[A][M] = null;
                    this.outerCellsMatrix[A].itemCount = 0;
                    this.outerCellsMatrix[A].height = 0;
                    this.outerCellsMatrix[A].freeWidth = this.viewSize.width - z;
                  }
                  if (this.outerCellsMatrix[A].freeWidth - F >= 0) {
                    this.outerCellsMatrix[A].height = Math.max(b, this.outerCellsMatrix[A].height);
                    this._setOuterCellData(E, A, M, V);
                    this.outerCellsMatrix[A].freeWidth -= F;
                    M += 1;
                    this.outerCellsMatrix[A].itemCount = M;
                    V++;
                    this._resetRowScrollSize();
                  } else if (this.outerCellsMatrix[A].freeWidth + q - F >= 0) {
                    this.outerCellsMatrix[A].height = Math.max(b, this.outerCellsMatrix[A].height);
                    this._setOuterCellData(E, A, M, V);
                    this.outerCellsMatrix[A].freeWidth -= F;
                    M += 1;
                    this.outerCellsMatrix[A].itemCount = M;
                    V++;
                    this._resetRowScrollSize();
                  } else {
                    var U = (Q -= w) - (this.outerCellsMatrix[A].height + S);
                    if (U > 0) {
                      Q = U;
                    } else if (U + S > 0) {
                      Q = U + S;
                      w = S;
                    } else {
                      Q = U;
                    }
                    this._resetRowScrollSize();
                    this._enqueueReusableItem(E);
                    A += 1;
                    M = 0;
                  }
                }
                this.setMasterControl(false);
              }
            } else if (Y) {
              Y();
            }
          };
          j.prototype._spawnHorizontalInit = function (G, V, Q, N, Y) {
            if (this._dataCount) {
              if (this.isPreCalculateSize && !N) {
                this._precalculateHorizontalContent();
                this._spawnHorizontalTargetArea(V, Q, Y);
              } else {
                this.lastContentX = this.content.x * -1;
                for (var W = this.layoutSetting, q = W.spacingX, S = W.spacingY, z = W.spacingTop + W.spacingBottom, A = 0, M = G, E = undefined, F = undefined, b = undefined, H = this._dataCount, w = 0; V < H;) {
                  F = (E = this._dataSource.getItem(this, V, this._sectionIndex)).width;
                  b = E.height + S;
                  if (!(Q > 0)) {
                    this._resetColScrollSize();
                    this._enqueueReusableItem(E);
                    this.setMasterControl(false);
                    return;
                  }
                  if (!this.outerCellsMatrix[M]) {
                    this.outerCellsMatrix[M] = {};
                    this.outerCellsMatrix[M][A] = {};
                    this.outerCellsMatrix[M].itemCount = 0;
                    this.outerCellsMatrix[M].width = 0;
                    this.outerCellsMatrix[M].freeHeight = this.viewSize.height - z;
                  }
                  if (this.outerCellsMatrix[M].freeHeight - b >= 0) {
                    this.outerCellsMatrix[M].width = Math.max(F, this.outerCellsMatrix[M].width);
                    this._setOuterCellData(E, A, M, V);
                    this.outerCellsMatrix[M].freeHeight -= b;
                    A += 1;
                    this.outerCellsMatrix[M].itemCount = A;
                    V++;
                    this._resetColScrollSize();
                  } else if (this.outerCellsMatrix[M].freeHeight + S - b >= 0) {
                    this.outerCellsMatrix[M].width = Math.max(F, this.outerCellsMatrix[M].width);
                    this._setOuterCellData(E, A, M, V);
                    this.outerCellsMatrix[M].freeHeight -= b;
                    A += 1;
                    this.outerCellsMatrix[M].itemCount = A;
                    V++;
                    this._resetColScrollSize();
                  } else {
                    var U = (Q -= w) - (this.outerCellsMatrix[M].width + q);
                    if (U > 0) {
                      Q = U;
                    } else if (U + q > 0) {
                      Q = U + q;
                      w = q;
                    } else {
                      Q = U;
                    }
                    this._resetColScrollSize();
                    this._enqueueReusableItem(E);
                    M += 1;
                    A = 0;
                  }
                }
                this.setMasterControl(false);
              }
            } else if (Y) {
              Y();
            }
          };
          j.prototype._removeVerticalPrevious = function (G, V) {
            var Q = this.layoutSetting.spacingLeft + this.layoutSetting.spacingRight;
            var N = this.outerCellsMatrix[G].itemCount - 1;
            while (V > 0) {
              if (N >= 0) {
                if (this._removeCellAction) {
                  this._removeCellAction();
                }
                this._putOuterCellNode(this.outerCellsMatrix[G][N]);
                N--;
              } else {
                this.contentLayout.paddingTop += this.outerCellsMatrix[G].height + this.layoutSetting.spacingY;
                this.outerCellsMatrix[G].freeWidth = this.viewSize.width - Q;
                if ((G += 1) >= this.outerCellsMatrix.length - 1 || !this.outerCellsMatrix[G][0]) {
                  return;
                }
                N = this.outerCellsMatrix[G].itemCount - 1;
                V = this.content.y - this.contentLayout.paddingTop - this.outerCellsMatrix[G].height;
              }
            }
          };
          j.prototype._removeHorizontalPrevious = function (G, V) {
            var Q = this.layoutSetting.spacingTop + this.layoutSetting.spacingBottom;
            var N = this.outerCellsMatrix[G].itemCount - 1;
            while (V > 0) {
              if (N >= 0) {
                this._putOuterCellNode(this.outerCellsMatrix[G][N]);
                N--;
              } else {
                this.contentLayout.paddingLeft += this.outerCellsMatrix[G].width + this.layoutSetting.spacingX;
                this.outerCellsMatrix[G].freeHeight = this.viewSize.height - Q;
                if ((G += 1) >= this.outerCellsMatrix.length - 1 || !this.outerCellsMatrix[G][0]) {
                  return;
                }
                N = this.outerCellsMatrix[G].itemCount - 1;
                V = this.content.x * -1 - this.contentLayout.paddingLeft - this.outerCellsMatrix[G].width;
              }
            }
          };
          j.prototype._removeVerticalNext = function (G, V, Q) {
            for (var N = this.layoutSetting.spacingLeft + this.layoutSetting.spacingRight, Y = this.outerCellsMatrix[G].itemCount - 1; V < 0;) {
              if (Y >= 0) {
                if (this._removeCellAction) {
                  this._removeCellAction();
                }
                this._putOuterCellNode(this.outerCellsMatrix[G][Y]);
                Y--;
              } else {
                this.outerCellsMatrix[G].freeWidth = this.viewSize.width - N;
                if ((G -= 1) <= 0 || !this.outerCellsMatrix[G][0]) {
                  return;
                }
                Y = this.outerCellsMatrix[G].itemCount - 1;
                Q = this._getRowTotalHeight(G) - this.viewSize.height;
                V = this.content.y - Q + this.layoutSetting.spacingY + this.outerCellsMatrix[G].height;
              }
            }
          };
          j.prototype._removeHorizontalNext = function (G, V, Q) {
            var N = this.layoutSetting.spacingTop + this.layoutSetting.spacingBottom;
            var Y = this.outerCellsMatrix[G].itemCount - 1;
            while (V < 0) {
              if (Y >= 0) {
                if (this._removeCellAction) {
                  this._removeCellAction();
                }
                this._putOuterCellNode(this.outerCellsMatrix[G][Y]);
                Y--;
              } else {
                this.outerCellsMatrix[G].freeHeight = this.viewSize.height - N;
                if ((G -= 1) <= 0 || !this.outerCellsMatrix[G][0]) {
                  return;
                }
                Y = this.outerCellsMatrix[G].itemCount - 1;
                Q = this._getColTotalWidth(G) - this.viewSize.width;
                V = this.content.x * -1 - Q + this.layoutSetting.spacingX + this.outerCellsMatrix[G].width;
              }
            }
          };
          j.prototype.removeUselessItems = function (G, V) {
            this._setDataCount(G);
            if (this.vertical) {
              for (var Q = this.content.children.length - 1; Q >= 0; Q--) {
                if (!((Y = this.content.children[Q]).zIndex > G - 1)) {
                  this.reloadCurrentData();
                  var N = Y.col + 1;
                  this.outerCellsMatrix[Y.row].itemCount = N;
                  this.outerCellsMatrix.splice(Y.row + 1, this.outerCellsMatrix.length - 1);
                  this._resetRowScrollSize();
                  this.setMasterControl(false);
                  if (V) {
                    V();
                  }
                  break;
                }
                this.outerCellsMatrix[Y.row].freeWidth += this.outerCellsMatrix[Y.row][Y.col].width + this.layoutSetting.spacingX;
                this._putOuterCellNode(Y);
                if (Q === 0) {
                  this._resetRowScrollSize();
                  this.setMasterControl(false);
                  if (V) {
                    V();
                  }
                }
              }
            } else {
              for (Q = this.content.children.length - 1; Q >= 0; Q--) {
                var Y;
                if (!((Y = this.content.children[Q]).zIndex >= G - 1)) {
                  this.reloadCurrentData();
                  N = Y.row + 1;
                  this.outerCellsMatrix[Y.col].itemCount = N;
                  this.outerCellsMatrix.splice(Y.col + 1, this.outerCellsMatrix.length - 1);
                  this._resetColScrollSize();
                  this.setMasterControl(false);
                  if (V) {
                    V();
                  }
                  break;
                }
                this.outerCellsMatrix[Y.col].freeHeight += this.outerCellsMatrix[Y.col][Y.row].height + this.layoutSetting.spacingY;
                this._putOuterCellNode(Y);
                if (Q === 0) {
                  this._resetRowScrollSize();
                  this.setMasterControl(false);
                  if (V) {
                    V();
                  }
                }
              }
            }
          };
          j.prototype._spawnVerticalNext = function (G, V, Q, N) {
            this.lastContentY = this.content.y;
            for (var Y, W, q, S = this.layoutSetting.spacingLeft + this.layoutSetting.spacingRight, z = G, f = V, A = this._dataCount; Q < A;) {
              W = (Y = this._dataSource.getItem(this, Q, this._sectionIndex)).width + this.layoutSetting.spacingX;
              q = Y.height;
              if (!(N > 0)) {
                this._resetRowScrollSize();
                this._enqueueReusableItem(Y);
                return;
              }
              if (!this.outerCellsMatrix[z]) {
                this.outerCellsMatrix[z] = {};
                this.outerCellsMatrix[z][f] = {};
                this.outerCellsMatrix[z].itemCount = 0;
                this.outerCellsMatrix[z].height = 0;
                this.outerCellsMatrix[z].freeWidth = this.viewSize.width - S;
              }
              if (this.outerCellsMatrix[z].freeWidth - W >= 0) {
                if (this._spawnCellAction) {
                  this._spawnCellAction();
                }
                this.outerCellsMatrix[z].height = Math.max(q, this.outerCellsMatrix[z].height);
                this._setOuterCellData(Y, z, f, Q);
                this.outerCellsMatrix[z].freeWidth -= W;
                f += 1;
                this.outerCellsMatrix[z].itemCount = f;
                if (++Q >= A) {
                  this._resetRowScrollSize();
                }
              } else if (this.outerCellsMatrix[z].freeWidth + this.layoutSetting.spacingX - W >= 0) {
                if (this._spawnCellAction) {
                  this._spawnCellAction();
                }
                this.outerCellsMatrix[z].height = Math.max(q, this.outerCellsMatrix[z].height);
                this._setOuterCellData(Y, z, f, Q);
                this.outerCellsMatrix[z].freeWidth -= W;
                f += 1;
                this.outerCellsMatrix[z].itemCount = f;
                Q++;
                this._resetRowScrollSize();
              } else {
                var M = this.content.children[this.content.children.length - 1].row;
                var E = this._getRowTotalHeight(M) - this.viewSize.height;
                N = this.content.y - E;
                this._resetRowScrollSize();
                this._enqueueReusableItem(Y);
                z += 1;
                f = 0;
              }
            }
          };
          j.prototype._spawnHorizontalNext = function (G, V, Q, N) {
            this.lastContentY = this.content.x * -1;
            var Y;
            var W;
            var q;
            var S = this.layoutSetting.spacingTop + this.layoutSetting.spacingBottom;
            var z = G;
            var f = V;
            for (var A = this._dataCount; Q < A;) {
              W = (Y = this._dataSource.getItem(this, Q, this._sectionIndex)).width;
              q = Y.height + this.layoutSetting.spacingY;
              if (!(N > 0)) {
                this._resetColScrollSize();
                this._enqueueReusableItem(Y);
                return;
              }
              if (!this.outerCellsMatrix[f]) {
                this.outerCellsMatrix[f] = {};
                this.outerCellsMatrix[f][z] = {};
                this.outerCellsMatrix[f].itemCount = 0;
                this.outerCellsMatrix[f].width = 0;
                this.outerCellsMatrix[f].freeHeight = this.viewSize.height - S;
              }
              if (this.outerCellsMatrix[f].freeHeight - q >= 0) {
                if (this._spawnCellAction) {
                  this._spawnCellAction();
                }
                this.outerCellsMatrix[f].width = Math.max(W, this.outerCellsMatrix[f].width);
                this._setOuterCellData(Y, z, f, Q);
                this.outerCellsMatrix[f].freeHeight -= q;
                z += 1;
                this.outerCellsMatrix[f].itemCount = z;
                if (++Q >= A) {
                  this._resetColScrollSize();
                }
              } else if (this.outerCellsMatrix[f].freeHeight + this.layoutSetting.spacingY - q >= 0) {
                if (this._spawnCellAction) {
                  this._spawnCellAction();
                }
                this.outerCellsMatrix[f].width = Math.max(W, this.outerCellsMatrix[f].width);
                this._setOuterCellData(Y, z, f, Q);
                this.outerCellsMatrix[f].freeHeight -= q;
                z += 1;
                this.outerCellsMatrix[f].itemCount = z;
                Q++;
                this._resetColScrollSize();
              } else {
                var M = this.content.children[this.content.children.length - 1].col;
                var E = this._getColTotalWidth(M) - this.viewSize.width;
                N = this.content.x * -1 - E;
                this._resetColScrollSize();
                this._enqueueReusableItem(Y);
                f += 1;
                z = 0;
              }
            }
          };
          j.prototype._spawnVerticalPrevious = function (G, V, Q, N) {
            if (!(G < 0)) {
              for (var Y, W, q, S = G, z = this.outerCellsMatrix[S].itemCount - 1; V >= 0;) {
                W = (Y = this._dataSource.getItem(this, V, this._sectionIndex)).width + this.layoutSetting.spacingX;
                q = Y.height;
                if (!(Q < 0)) {
                  this._resetRowScrollSize();
                  this._enqueueReusableItem(Y);
                  if (N) {
                    N();
                  }
                  return;
                }
                if (z >= 0) {
                  if (this._spawnCellAction) {
                    this._spawnCellAction();
                  }
                  this.outerCellsMatrix[S].height = Math.max(q, this.outerCellsMatrix[S].height);
                  this._setOuterCellData(Y, S, z, V);
                  this.outerCellsMatrix[S].freeWidth -= W;
                  if (V === 0) {
                    this.contentLayout.paddingTop -= this.outerCellsMatrix[S].height + this.layoutSetting.spacingY;
                    Q = this.content.y - this.contentLayout.paddingTop;
                  }
                  z -= 1;
                  V--;
                } else {
                  this.contentLayout.paddingTop -= this.outerCellsMatrix[S].height + this.layoutSetting.spacingY;
                  Q = this.content.y - this.contentLayout.paddingTop;
                  this._resetRowScrollSize();
                  this._enqueueReusableItem(Y);
                  S -= 1;
                  z = this.outerCellsMatrix[S].itemCount - 1;
                }
              }
              if (N) {
                N();
              }
            }
          };
          j.prototype._spawnHorizontalPrevious = function (G, V, Q, N) {
            if (!(G < 0)) {
              for (var Y, W, q, S = this.content.x * -1, z = G, f = this.outerCellsMatrix[z].itemCount - 1; V >= 0;) {
                W = (Y = this._dataSource.getItem(this, V, this._sectionIndex)).width;
                q = Y.height + this.layoutSetting.spacingY;
                if (!(Q < 0)) {
                  this._resetColScrollSize();
                  this._enqueueReusableItem(Y);
                  if (N) {
                    N();
                  }
                  return;
                }
                if (f >= 0) {
                  if (this._spawnCellAction) {
                    this._spawnCellAction();
                  }
                  this.outerCellsMatrix[z].width = Math.max(W, this.outerCellsMatrix[z].width);
                  this._setOuterCellData(Y, f, z, V);
                  this.outerCellsMatrix[z].freeHeight -= q;
                  if (V === 0) {
                    this.contentLayout.paddingLeft -= this.outerCellsMatrix[z].width + this.layoutSetting.spacingX;
                    Q = S - this.contentLayout.paddingLeft;
                  }
                  f -= 1;
                  V--;
                } else {
                  this.contentLayout.paddingLeft -= this.outerCellsMatrix[z].width + this.layoutSetting.spacingX;
                  Q = S - this.contentLayout.paddingLeft;
                  this._resetColScrollSize();
                  this._enqueueReusableItem(Y);
                  z -= 1;
                  f = this.outerCellsMatrix[z].itemCount - 1;
                }
              }
              if (N) {
                N();
              }
            }
          };
          j.prototype._resetRowScrollSize = function () {
            var G = this.layoutSetting.spacingTop + this.layoutSetting.spacingBottom;
            for (var V = 0; V < this.outerCellsMatrix.length; V++) {
              G += this.outerCellsMatrix[V].height;
              if (V !== this.outerCellsMatrix.length - 1) {
                G += this.layoutSetting.spacingY;
              } else if (this.content.height !== G) {
                this.content.height = G;
              }
            }
          };
          j.prototype._resetColScrollSize = function () {
            var G = this.layoutSetting.spacingLeft + this.layoutSetting.spacingRight;
            for (var V = 0; V < this.outerCellsMatrix.length; V++) {
              G += this.outerCellsMatrix[V].width;
              if (V !== this.outerCellsMatrix.length - 1) {
                G += this.layoutSetting.spacingX;
              } else if (this.content.width !== G) {
                this.content.width = G;
              }
            }
          };
          j.prototype._setOuterCellData = function (G, V, Q, N) {
            var Y = this._getOuterCellNode();
            if (this.vertical) {
              this.outerCellsMatrix[V][Q] = Y;
            } else {
              this.outerCellsMatrix[Q][V] = Y;
            }
            this.content.addChild(Y);
            Y.addChild(G);
            Y.row = V;
            Y.col = Q;
            Y.zIndex = N;
            Y.width = G.width;
            Y.height = G.height;
            this.content.sortAllChildren();
          };
          j.prototype.dequeueReusableItem = function (G) {
            var V;
            var Q = this.nodePools[G];
            if (Q) {
              if (!(V = Q.get())) {
                var N = this.templates[G];
                V = cc.instantiate(N);
              }
              V.lv_type = G;
            }
            return V;
          };
          j.prototype._enqueueReusableItem = function (G) {
            var V;
            var Q = G.lv_type;
            if (Q) {
              V = this.nodePools[Q];
            }
            if (V) {
              V.put(G);
            }
          };
          j.prototype._reloadReduceData = function (G) {
            if (this.vertical) {
              var V = this._getRowOrColByIndex(this.currentIndex);
              if (this.currentIndex <= G - 1) {
                this.removeUselessItems(G);
              } else if (V !== null) {
                this.isReducingData = true;
                this.newDataCount = G;
                this.setMasterControl(true);
                this.scrollTo(0);
              } else {
                this.removeUselessItems(G);
              }
            } else {
              var Q = this._getRowOrColByIndex(this.currentIndex);
              if (this.currentIndex < G - 1) {
                this.removeUselessItems(G);
              } else if (Q !== null) {
                this.isReducingData = true;
                this.stopAutoScroll();
                this.setMasterControl(true);
                this.scrollTo(0);
              } else {
                this.removeUselessItems(G);
              }
            }
          };
          j.prototype._reloadAddData = function () {
            if (this.vertical) {
              if (!this.content.children.length) {
                this._spawnVerticalInit(0, 0, this.viewSize.height);
                return;
              }
              var G = (q = this.content.children[this.content.children.length - 1]).row;
              var V = G - 1;
              if (V < 0) {
                V = 0;
              }
              var Q = this._getRowTotalHeight(V) - this.viewSize.height;
              var N = q.zIndex;
              var Y = this.content.y - Q;
              var W = (f = this._dataSource.getItem(this, N + 1, this._sectionIndex)).width + this.layoutSetting.spacingX;
              this._enqueueReusableItem(f);
              if (this.outerCellsMatrix[G].freeWidth - W >= 0) {
                this._spawnVerticalNext(G, this.outerCellsMatrix[G].itemCount, N + 1, Y);
              } else if (this.outerCellsMatrix[G].freeWidth + this.layoutSetting.spacingX - W >= 0) {
                this._spawnVerticalNext(G, this.outerCellsMatrix[G].itemCount, N + 1, Y);
              }
              this.setMasterControl(false);
            } else {
              if (!this.content.children.length) {
                this._spawnHorizontalInit(0, 0, this.viewSize.width);
                return;
              }
              var q;
              var S = (q = this.content.children[this.content.children.length - 1]).col;
              var z = S - 1;
              if (z < 0) {
                z = 0;
              }
              Q = this._getColTotalWidth(z) - this.viewSize.width;
              var f;
              var A = q.zIndex;
              var M = this.content.x * -1 - Q;
              var E = (f = this._dataSource.getItem(this, A + 1, this._sectionIndex)).height + this.layoutSetting.spacingY;
              this._enqueueReusableItem(f);
              if (this.outerCellsMatrix[S].freeHeight - E >= 0) {
                this._spawnHorizontalNext(this.outerCellsMatrix[A].itemCount, S, A + 1, M);
              } else if (this.outerCellsMatrix[S].freeWidth + this.layoutSetting.spacingX - E >= 0) {
                this._spawnHorizontalNext(this.outerCellsMatrix[S].itemCount, S, A + 1, M);
              }
              this.setMasterControl(false);
            }
          };
          j.prototype.reloadCurrentData = function (G) {
            if (this.content.children.length) {
              for (var V = 0; V < this.content.children.length; V++) {
                this._enqueueReusableItem(this.content.children[V].children[0]);
                var Q = this._dataSource.getItem(this, this.content.children[V].zIndex, this._sectionIndex);
                this.content.children[V].addChild(Q);
                this.content.sortAllChildren();
              }
            }
            if (G) {
              G();
            }
          };
          j.prototype._putOuterCellNode = function (G) {
            var V = G;
            if (V !== null && V.row !== null && V.col !== null) {
              if (this.vertical) {
                this.outerCellsMatrix[V.row][V.col] = null;
              } else {
                this.outerCellsMatrix[V.col][V.row] = null;
              }
              if (V.children.length) {
                this._enqueueReusableItem(V.children[0]);
              }
              this._nodePool.put(V);
              this.content.sortAllChildren();
            }
          };
          j.prototype._getOuterCellNode = function () {
            if (this._nodePool) {
              if (this._nodePool.size()) {
                return this._nodePool.get();
              } else {
                return new cc.Node();
              }
            } else {
              this._nodePool = new cc.NodePool();
              return new cc.Node();
            }
          };
          j.prototype._lerp1D = function (G, V, Q, N = 1, Y) {
            if (L(cc.v2(G, 0), cc.v2(V, 0)) <= 1) {
              this._lerpDone(Y);
              return V;
            }
            this._dispatchEvent("scrolling");
            var W = G + (Q *= N) * (V - G);
            if (G >= V) {
              if (W <= V) {
                this._lerpDone(Y);
                W = V;
              }
            } else if (W >= V) {
              this._lerpDone(Y);
              W = V;
            }
            return W;
          };
          j.prototype._lerpDone = function (G) {
            var V = this;
            if (this.isReducingData) {
              this.isReducingData = false;
              this.removeUselessItems(this.newDataCount, function () {
                V.setMasterControl(false);
                V.setSnapDone(true);
                V.stopAutoScroll();
                V._dispatchEvent("scroll-ended");
                if (V.currentIndex === null) {
                  var N = V._getNearestItem();
                  V.currentIndex = V.outerCellsMatrix[N][0].zIndex;
                }
                if (V.snapFinish) {
                  V.snapFinish(V.currentIndex);
                }
                if (G) {
                  G();
                }
              });
            } else {
              this.setMasterControl(false);
              this.setSnapDone(true);
              this.stopAutoScroll();
              this._dispatchEvent("scroll-ended");
              if (this.currentIndex === null) {
                var Q = this._getNearestItem();
                this.currentIndex = this.outerCellsMatrix[Q][0].zIndex;
              }
              if (this.snapFinish) {
                this.snapFinish(this.currentIndex);
              }
              if (G) {
                G();
              }
            }
          };
          j.prototype._getFirstIndexByRowOrCol = function (G) {
            var V = 0;
            for (var Q = 0; Q <= G; Q++) {
              if (G === Q) {
                return V;
              }
              V += this.outerCellsMatrix[Q].itemCount;
            }
          };
          j.prototype._getRowOrColByIndex = function (G) {
            for (var V = this.outerCellsMatrix.length - 1, Q = 0; Q <= V; Q++) {
              if (!((G -= this.outerCellsMatrix[Q].itemCount) >= 0)) {
                return Q;
              }
              if (Q === V) {
                return null;
              }
            }
          };
          j.prototype.destroy = function () {
            this._unbindListener();
            u.prototype.destroy.call(this);
          };
          j.prototype._bindListener = function () {
            this.content.on(cc.Node.EventType.POSITION_CHANGED, this._recycle, this);
            if (this.autoSnap) {
              this.node.on("scroll-ended", this._autoSnapTo, this);
            }
            this.node.on(cc.Node.EventType.SIZE_CHANGED, this._onSizeChanged, this);
          };
          j.prototype._unbindListener = function () {
            this.content.off(cc.Node.EventType.POSITION_CHANGED, this._recycle, this);
            if (this.autoSnap) {
              this.node.off("scroll-ended", this._autoSnapTo, this);
            }
            this.node.off(cc.Node.EventType.SIZE_CHANGED, this._onSizeChanged, this);
          };
          j.prototype._resetScrollView = function () {
            this._topBoundary = 0;
            this._bottomBoundary = 0;
            this._leftBoundary = 0;
            this._rightBoundary = 0;
            this._touchMoveDisplacements = [];
            this._touchMoveTimeDeltas = [];
            this._touchMovePreviousTimestamp = 0;
            this._touchMoved = false;
            this._autoScrolling = false;
            this._autoScrollAttenuate = false;
            this._autoScrollStartPosition = cc.v2(0, 0);
            this._autoScrollTargetDelta = cc.v2(0, 0);
            this._autoScrollTotalTime = 0;
            this._autoScrollAccumulatedTime = 0;
            this._autoScrollCurrentlyOutOfBoundary = false;
            this._autoScrollBraking = false;
            this._autoScrollBrakingStartPosition = cc.v2(0, 0);
            this._outOfBoundaryAmount = cc.v2(0, 0);
            this._outOfBoundaryAmountDirty = true;
            this._stopMouseWheel = false;
            this._mouseWheelEventElapsedTime = 0;
            this._isScrollEndedWithThresholdEventFired = false;
            this._scrollEventEmitMask = 0;
            this._isBouncing = false;
            this._scrolling = false;
          };
          j.prototype.update = function (G) {
            if (!this.pauseUpdate) {
              if (this.snapPause) {
                this.setSnapDone(true);
                this.stopAutoScroll();
                return;
              }
              if (!this.snapDone) {
                if (!this.content.children.length) {
                  this.content.setPosition(cc.v2(0, 0));
                  this.setSnapDone(true);
                  return;
                }
                if (!this.suddenStopIndex || !(this.content.children[this.content.children.length - 1].zIndex >= this.suddenStopIndex)) {
                  this.stopAutoScroll();
                  if (this.vertical) {
                    this.content.y = this._lerp1D(this.content.y, this.target, G, this.lerpSpeed);
                  } else {
                    this.content.x = this._lerp1D(this.content.x * -1, this.target, G, this.lerpSpeed) * -1;
                  }
                  return;
                }
                this.setMasterControl(true);
                this.scrollTo(this.suddenStopIndex);
                this.suddenStopIndex = null;
              }
              u.prototype.update.call(this, G);
            }
          };
          j.prototype._onTouchBegan = function (G, V) {
            this.elastic = this.originalElastic;
            this.touchPos = G.touch.getLocation();
            if (!this._masterControl && this.content.children.length) {
              this.unschedule(this._checkMouseWheel);
              this._stopMouseWheel = false;
              this.snapPause = true;
              this.setSnapDone(true);
              u.prototype._onTouchBegan.call(this, G, V);
            }
          };
          j.prototype._onTouchMoved = function (G, V) {
            this.elastic = this.originalElastic;
            if (!this._masterControl && this.content.children.length) {
              if (this.vertical) {
                this._verticalPullAction(G);
              } else {
                this._horizontalPullAction(G);
              }
              if (!this.pauseUpdate) {
                u.prototype._onTouchMoved.call(this, G, V);
              }
            }
          };
          j.prototype._mouseWheelVertical = function () {
            if (this._mouseWheelEvent && this._mouseWheelEvent.getScrollY() > 0) {
              if (this._pullingUpAction && this.pullDir === 2) {
                this._pullingUpAction(0);
              }
              if (this._pullingDownAction && this._getContentTopBoundary() <= this._topBoundary) {
                if (!this.pauseUpdate) {
                  this.beginPullPos = cc.v2(0, this._mouseWheelEvent.getScrollY());
                }
                if ((G = this.beginPullPos.y - this._mouseWheelEvent.getScrollY()) > 0) {
                  G = 0;
                }
                this._pullingDownAction(Math.abs(G));
                this.pauseUpdate = true;
                this.pullDir = 1;
              }
              if (this.content.children[0].zIndex > 0) {
                this.elastic = true;
              }
            } else if (this._mouseWheelEvent && this._mouseWheelEvent.getScrollY() < 0) {
              var G;
              if (this._pullingDownAction && this.pullDir === 1) {
                this._pullingDownAction(0);
              }
              if (this._pullingUpAction && Math.round(this._getContentBottomBoundary()) >= Math.round(this._bottomBoundary)) {
                if (!this.content.children.length || this.content.children[this.content.children.length - 1].zIndex === this._dataCount - 1) {
                  if (!this.pauseUpdate) {
                    this.beginPullPos = cc.v2(0, this._mouseWheelEvent.getScrollY());
                  }
                  if ((G = this.beginPullPos.y - this._mouseWheelEvent.getScrollY()) < 0) {
                    G = 0;
                  }
                  this._pullingUpAction(G);
                  this.pauseUpdate = true;
                  this.pullDir = 2;
                }
              }
              if (this.content.children[this.content.children.length - 1].zIndex < this._dataCount - 1) {
                this.elastic = true;
              }
            }
          };
          j.prototype._mouseWheelHorizontal = function () {
            if (this._mouseWheelEvent && this._mouseWheelEvent.getScrollY() > 0) {
              if (this._pullingUpAction && this.pullDir === 2) {
                this._pullingRightAction(0);
              }
              if (this._pullingLeftAction && this._getContentRightBoundary() <= this._rightBoundary) {
                if (!this.pauseUpdate) {
                  this.beginPullPos = cc.v2(this._mouseWheelEvent.getScrollY(), 0);
                }
                if ((G = this.beginPullPos.x - this._mouseWheelEvent.getScrollY()) > 0) {
                  G = 0;
                }
                this._pullingLeftAction(Math.abs(G));
                this.pauseUpdate = true;
                this.pullDir = 1;
              }
              if (this.content.children[0].zIndex > 0) {
                this.elastic = true;
              }
            } else if (this._mouseWheelEvent && this._mouseWheelEvent.getScrollY() < 0) {
              var G;
              if (this._pullingDownAction && this.pullDir === 1) {
                this._pullingLeftAction(0);
              }
              if (this._pullingRightAction && this._getContentLeftBoundary() >= this._leftBoundary) {
                if (!this.content.children.length || this.content.children[this.content.children.length - 1].zIndex === this._dataCount - 1) {
                  if (!this.pauseUpdate) {
                    this.beginPullPos = cc.v2(this._mouseWheelEvent.getScrollY(), 0);
                  }
                  if ((G = this.beginPullPos.x - this._mouseWheelEvent.getScrollY()) < 0) {
                    G = 0;
                  }
                  this._pullingRightAction(G);
                  this.pauseUpdate = true;
                  this.pullDir = 2;
                }
              }
              if (this.content.children[this.content.children.length - 1].zIndex < this._dataCount - 1) {
                this.elastic = true;
              }
            }
          };
          j.prototype._verticalPullAction = function (G) {
            if (this.touchPos.y > G.touch.getLocation().y) {
              if (this._pullingUpAction && this.pullDir === 2) {
                this._pullingUpAction(0);
              }
              if (this._pullingDownAction && this._getContentTopBoundary() <= this._topBoundary) {
                if (!this.pauseUpdate) {
                  this.beginPullPos = G.touch.getLocation();
                }
                if ((V = this.beginPullPos.y - G.touch.getLocation().y) < 0) {
                  V = 0;
                }
                this._pullingDownAction(V);
                this.pauseUpdate = true;
                this.pullDir = 1;
              }
              if (this.content.children[0].zIndex > 0) {
                this.elastic = true;
              }
            } else if (this.touchPos.y < G.touch.getLocation().y) {
              var V;
              if (this._pullingDownAction && this.pullDir === 1) {
                this._pullingDownAction(0);
              }
              if (this._pullingUpAction && Math.round(this._getContentBottomBoundary()) >= Math.round(this._bottomBoundary)) {
                if (!this.content.children.length || this.content.children[this.content.children.length - 1].zIndex === this._dataCount - 1) {
                  if (!this.pauseUpdate) {
                    this.beginPullPos = G.touch.getLocation();
                  }
                  if ((V = this.beginPullPos.y - G.touch.getLocation().y) > 0) {
                    V = 0;
                  }
                  this._pullingUpAction(Math.abs(V));
                  this.pauseUpdate = true;
                  this.pullDir = 2;
                }
              }
              if (this.content.children[this.content.children.length - 1].zIndex < this._dataCount - 1) {
                this.elastic = true;
              }
            }
          };
          j.prototype._horizontalPullAction = function (G) {
            if (this.touchPos.x > G.touch.getLocation().x) {
              if (this._pullingRightAction && this.pullDir === 1) {
                this._pullingRightAction(0);
              }
              if (this._pullingLeftAction && this._getContentRightBoundary() <= this._rightBoundary) {
                if (!this.content.children.length || this.content.children[this.content.children.length - 1].zIndex === this._dataCount - 1) {
                  if (!this.pauseUpdate) {
                    this.beginPullPos = G.touch.getLocation();
                  }
                  if ((V = this.beginPullPos.x - G.touch.getLocation().x) < 0) {
                    V = 0;
                  }
                  this._pullingLeftAction(V);
                  this.pauseUpdate = true;
                  this.pullDir = 2;
                }
              }
              if (this.content.children[this.content.children.length - 1].zIndex < this._dataCount - 1) {
                this.elastic = true;
              }
            } else if (this.touchPos.x < G.touch.getLocation().x) {
              var V;
              if (this._pullingLeftAction && this.pullDir === 2) {
                this._pullingLeftAction(0);
              }
              if (this._pullingRightAction && this._getContentLeftBoundary() >= this._leftBoundary) {
                if (!this.pauseUpdate) {
                  this.beginPullPos = G.touch.getLocation();
                }
                if ((V = this.beginPullPos.x - G.touch.getLocation().x) > 0) {
                  V = 0;
                }
                this._pullingRightAction(Math.abs(V));
                this.pauseUpdate = true;
                this.pullDir = 1;
              }
              if (this.content.children[0].zIndex > 0) {
                this.elastic = true;
              }
            }
          };
          j.prototype._onTouchEnded = function (G, V) {
            if (L(this.touchPos, G.touch.getLocation()) >= 50) {
              G.stopPropagationImmediate();
            }
            if (!this._masterControl && this.content.children.length) {
              if (this.pauseUpdate) {
                if (this.vertical) {
                  var Q = this.beginPullPos.y - G.touch.getLocation().y;
                  if (this._pullDownEndAction && this.pullDir === 1) {
                    if (Q < 0) {
                      Q = 0;
                    }
                    this._pullDownEndAction(Q);
                  } else if (this._pullUpEndAction && this.pullDir === 2) {
                    if (Q > 0) {
                      Q = 0;
                    }
                    this._pullUpEndAction(Math.abs(Q));
                  }
                } else {
                  Q = this.beginPullPos.x - G.touch.getLocation().x;
                  if (this._pullRightEndAction && this.pullDir === 1) {
                    if (Q > 0) {
                      Q = 0;
                    }
                    this._pullRightEndAction(Math.abs(Q));
                  } else if (this._pullLeftEndAction && this.pullDir === 2) {
                    if (Q < 0) {
                      Q = 0;
                    }
                    this._pullLeftEndAction(Q);
                  }
                }
                this.pullDir = null;
              }
              this.snapPause = false;
              this.requestSnap = true;
              u.prototype._onTouchEnded.call(this, G, V);
            }
          };
          j.prototype._onTouchCancelled = function (G, V) {
            if (L(this.touchPos, G.touch.getLocation()) >= 50) {
              G.stopPropagationImmediate();
            }
            if (!this._masterControl && this.content.children.length) {
              if (this.pauseUpdate) {
                if (this.vertical) {
                  var Q = this.beginPullPos.y - G.touch.getLocation().y;
                  if (this._pullDownEndAction && this.pullDir === 1) {
                    if (Q < 0) {
                      Q = 0;
                    }
                    this._pullDownEndAction(Q);
                  } else if (this._pullUpEndAction && this.pullDir === 2) {
                    if (Q > 0) {
                      Q = 0;
                    }
                    this._pullUpEndAction(Math.abs(Q));
                  }
                } else {
                  Q = this.beginPullPos.x - G.touch.getLocation().x;
                  if (this._pullRightEndAction && this.pullDir === 1) {
                    if (Q > 0) {
                      Q = 0;
                    }
                    this._pullRightEndAction(Math.abs(Q));
                  } else if (this._pullLeftEndAction && this.pullDir === 2) {
                    if (Q < 0) {
                      Q = 0;
                    }
                    this._pullLeftEndAction(Q);
                  }
                }
                this.pullDir = null;
              }
              this.snapPause = false;
              this.requestSnap = true;
              u.prototype._onTouchCancelled.call(this, G, V);
            }
          };
          j.prototype._onMouseWheelStart = function () {
            this.snapPause = true;
            this.setSnapDone(true);
          };
          j.prototype._onMouseWheelEnd = function () {
            if (!this._masterControl) {
              if (this.pauseUpdate) {
                if (this.vertical) {
                  var G = this.beginPullPos.y - this._mouseWheelEvent.getScrollY();
                  if (this._pullDownEndAction && this.pullDir === 1) {
                    if (G > 0) {
                      G = 0;
                    }
                    this._pullDownEndAction(Math.abs(G));
                  } else if (this._pullUpEndAction && this.pullDir === 2) {
                    if (G < 0) {
                      G = 0;
                    }
                    this._pullUpEndAction(G);
                  }
                } else {
                  G = this.beginPullPos.x - this._mouseWheelEvent.getScrollY();
                  if (this._pullRightEndAction && this.pullDir === 1) {
                    if (G > 0) {
                      G = 0;
                    }
                    this._pullRightEndAction(Math.abs(G));
                  } else if (this._pullLeftEndAction && this.pullDir === 2) {
                    if (G < 0) {
                      G = 0;
                    }
                    this._pullLeftEndAction(G);
                  }
                }
                this.pullDir = null;
              }
              this.snapPause = false;
              this.requestSnap = true;
              if (this.autoSnap) {
                this._autoSnapTo();
              }
              this._mouseWheelEvent = undefined;
            }
          };
          j.prototype._onMouseWheel = function (G, V) {
            this.elastic = this.originalElastic;
            if (!this._masterControl && this.content.children.length && this.enabledInHierarchy && !this._hasNestedViewGroup(G, V)) {
              this._mouseWheelEvent = G;
              var Q = cc.v2(0, 0);
              if (this.vertical) {
                Q = cc.v2(0, G.getScrollY() * -0.1);
                this._mouseWheelVertical();
              } else if (this.horizontal) {
                Q = cc.v2(G.getScrollY() * -0.1, 0);
                this._mouseWheelHorizontal();
              }
              this._mouseWheelEventElapsedTime = 0;
              this._processDeltaMove(Q);
              if (!this._stopMouseWheel) {
                this._handlePressLogic();
                this.schedule(this._checkMouseWheel, 1 / 60);
                this._stopMouseWheel = true;
                this._onMouseWheelStart();
              }
              this._stopPropagationIfTargetIsMe(G);
            }
          };
          j.prototype._checkMouseWheel = function (G) {
            if (!this._masterControl) {
              var V = this._getHowMuchOutOfBoundary();
              if (!x(V, cc.v2(0, 0), 0.0001)) {
                this._processInertiaScroll();
                this.unschedule(this._checkMouseWheel);
                this._stopMouseWheel = false;
                this._onMouseWheelEnd();
                return;
              }
              this._mouseWheelEventElapsedTime += G;
              if (this._mouseWheelEventElapsedTime > 0.1) {
                this._onScrollBarTouchEnded();
                this.unschedule(this._checkMouseWheel);
                this._stopMouseWheel = false;
                this._onMouseWheelEnd();
              }
            }
          };
          j.prototype._processAutoScrolling = function (G) {
            var V = this._isNecessaryAutoScrollBrake();
            var Q = V ? 0.05 : 1;
            this._autoScrollAccumulatedTime += G * (1 / Q);
            var N;
            var Y = Math.min(1, this._autoScrollAccumulatedTime / this._autoScrollTotalTime);
            if (this._autoScrollAttenuate) {
              N = Y;
              Y = (N -= 1) * N * N * N * N + 1;
            }
            var W = this._autoScrollStartPosition.add(this._autoScrollTargetDelta.mul(Y));
            var q = Y > 0.5;
            if (Math.abs(Y - 1) <= this.getScrollEndedEventTiming() && !this._isScrollEndedWithThresholdEventFired) {
              this._dispatchEvent("scroll-ended-with-threshold");
              this._isScrollEndedWithThresholdEventFired = true;
            }
            if (this.elastic) {
              var S = W.sub(this._autoScrollBrakingStartPosition);
              if (V) {
                S = S.mul(Q);
              }
              W = this._autoScrollBrakingStartPosition.add(S);
            } else {
              var z = W.sub(this.getContentPosition());
              var f = this._getHowMuchOutOfBoundary(z);
              if (!f.fuzzyEquals(cc.v2(0, 0), 0.0001)) {
                W = W.add(f);
                q = true;
              }
            }
            if (q) {
              this._autoScrolling = false;
            }
            var A = W.sub(this.getContentPosition());
            this._moveContent(this._clampDelta(A), q);
            this._dispatchEvent("scrolling");
            if (!this._autoScrolling) {
              this._isBouncing = false;
              this._scrolling = false;
              this._dispatchEvent("scroll-ended");
            }
          };
          j.prototype._hasNestedViewGroup = function () {
            return false;
          };
          j.prototype._processInertiaScroll = function () {
            if (!this._startBounceBackIfNeeded() && this.inertia) {
              var G = this._calculateTouchMoveVelocity();
              if (!x(G, cc.v2(0, 0), 0.0001) && this.brake < 1) {
                this._startInertiaScroll(G);
              } else if (this.autoSnap) {
                this._autoSnapTo();
              }
            }
            this._onScrollBarTouchEnded();
          };
          return __decorate([k], j);
        }(T.default);
        K.default = C;
        cc._RF.pop();
      }
    }, {
      ScrollViewEx: "ScrollViewEx"
    }],
    HitPassThrough: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "c55eeQvpvBJQ70BFU5konXG", "HitPassThrough")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T;
        var x = cc._decorator;
        var L = x.ccclass;
        var D = x.property;
        (function (C) {
          C._hitTest = "_hitTest";
        })(T ||= {});
        var k = function (C) {
          function u() {
            var c = C !== null && C.apply(this, arguments) || this;
            c.passPoint = cc.v2(0, 0);
            c.passSize = cc.size(0, 0);
            return c;
          }
          __extends(u, C);
          u.prototype.onEnable = function () {
            var c = this;
            this._superHitTest = this.node[T._hitTest];
            this.node[T._hitTest] = function (j, G) {
              if (!c._superHitTest.call(this, j, G)) {
                return false;
              }
              var V = c.passPoint.x + this.x - c.passSize.width / 2;
              var Q = c.passPoint.y + this.y - c.passSize.height / 2;
              for (var N = this.getParent(); N !== null; N = N.parent) {
                V += N.x;
                Q += N.y;
              }
              var Y = c.passSize.width;
              var W = c.passSize.height;
              var q = j.x - V;
              var S = V + Y - j.x;
              var z = Q + W - j.y;
              var f = j.y - Q;
              return !(q >= 0) || !(S >= 0) || !(z >= 0) || !(f >= 0);
            };
          };
          u.prototype.onDisable = function () {
            this.node[T._hitTest] = this._superHitTest;
            this._superHitTest = undefined;
          };
          __decorate([D(cc.Vec2)], u.prototype, "passPoint", undefined);
          __decorate([D(cc.Size)], u.prototype, "passSize", undefined);
          return __decorate([L], u);
        }(cc.Component);
        K.default = k;
        cc._RF.pop();
      }
    }, {}],
    IdleState: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "9928eUmiH5DjJzRecinmoRP", "IdleState")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("AutoSpinHandler");
        var x = I("SlotGameConstants");
        var L = I("SlotAnalyticsEnum");
        var D = I("SystemFeatureHandler");
        var k = I("AnalyticsHelper");
        var C = I("GameEventHandler");
        var j = I("UIState");
        var G = I("SpinButtonController");
        var V = I("SlotDependencyManager");
        var Q = I("SettingMenuHelper");
        var N = I("Utils");
        var Y = function (W) {
          function q(S, z, A) {
            var M = W.call(this, S, z, A) || this;
            M.name = "Idle State";
            M.autoSpinDelay = x.DEFAULT_AUTO_SPIN_DELAY_TIME;
            M._defaultCheckSystemEventConfig = {
              autoSpinCount: T.getAutoSpinCount(),
              walletHelper: V.walletHelper,
              settingMenuHelper: Q.settingMenuHelper,
              exitAutoSpinHandler: M.exitAutoSpin.bind(M),
              callback: M.tryAutoSpin.bind(M)
            };
            return M;
          }
          __extends(q, W);
          q.prototype.setSlotController = function (S) {
            this.slotController = S;
          };
          q.prototype.setSpinButtonController = function (S) {
            this.spinButtonController = S;
          };
          q.prototype.setAutoSpinDelay = function (S) {
            this.autoSpinDelay = S;
          };
          q.prototype.run = function () {
            W.prototype.run.call(this);
            var S = this._defaultCheckSystemEventConfig;
            var z = this.defineSystemEventConfigParam();
            D.handleSystemEvent(__assign(__assign({}, S), z));
          };
          q.prototype.exit = function (S) {
            this.disposeAutoSpin();
            if (!this.dataSource.isGameReplaying) {
              var z = Q.settingMenuHelper.turboSpinOn ? "Turbo" : "Normal";
              var A = S === L.SpinTrigger.AUTOSPIN ? "Auto" : "Manual";
              var M = {
                actionName: "" + z + A + "Spin"
              };
              k.sendAnalyticsEvent(M);
            }
            this.disableAvailableActions();
            this.disableSpinAction();
            this.disableSettingMenu();
            this.removeGamePauseEvent();
            this.removeGameResumeEvent();
            W.prototype.exit.call(this);
          };
          q.prototype.destroy = function () {
            W.prototype.destroy.call(this);
            this.spinButtonController = undefined;
            this.slotController = undefined;
          };
          q.prototype.onReady = function () {};
          q.prototype.onRun = function () {};
          q.prototype.onForceExit = function (S) {
            S();
          };
          q.prototype.onExit = function (S) {
            S();
          };
          q.prototype.onDestroy = function (S) {
            S();
          };
          q.prototype.onStateFullyIdle = function () {};
          q.prototype.enableAvailableActions = function () {};
          q.prototype.disableAvailableActions = function () {};
          q.prototype.preStartSpinAction = function (S) {
            S();
          };
          q.prototype.defineSystemEventConfigParam = function () {
            return {};
          };
          q.prototype.getCostPerSpin = function (S) {
            if (S === L.SpinTrigger.FEATURE_BUY) {
              throw Error("overwrite getCostPerSpin function for support feature buy spin");
            }
            var z = this.dataSource.systemModel.maxLineNumber;
            var A = this.dataSource.transactionModel;
            var M = A.betSizeValue;
            var E = A.betLevelValue;
            return N.toDecimalWithExp(M * E * z, 2);
          };
          q.prototype.onClickSpinButton = function (S) {
            if (this.spinButtonController.isAutoSpin()) {
              this.exitAutoSpin();
              this.idle();
            } else {
              this.validateSpin(S);
            }
          };
          q.prototype.enableSpinAction = function () {
            this.spinButtonController.setOnClickCallback(this.onClickSpinButton.bind(this));
          };
          q.prototype.disableSpinAction = function () {
            this.spinButtonController.clearOnClickCallback();
          };
          q.prototype.spinFreeCredit = function (S) {
            var z = this.spinButtonController;
            Q.settingMenuHelper.setWinAmount(0);
            V.walletHelper.spin();
            if (z.isAutoSpin()) {
              T.decrementAutoSpinCount(z);
            }
            this.exit(S);
          };
          q.prototype.spinCashCredit = function (S) {
            var z = this.spinButtonController;
            this.decreaseBalance(S);
            if (z.isAutoSpin()) {
              T.decrementAutoSpinCount(z);
            }
            this.exit(S);
          };
          q.prototype.spinBonusCredit = function (S) {
            this.spinCashCredit(S);
          };
          q.prototype.spinInvalidBet = function () {
            this.exitAutoSpin();
            this.idle();
          };
          q.prototype.spinInsufficientCredit = function (S) {
            this.spinInvalidBet(S);
          };
          q.prototype.tryAutoSpin = function () {
            var S = this;
            var z = this.spinButtonController;
            this.setupGamePauseEvent();
            if (z.isAutoSpin()) {
              var A = this.dataSource;
              var M = A.playerModel.balance;
              var E = A.transactionModel.accumulatedWinAmount;
              var F = Q.settingMenuHelper.isBalanceHitTargetInAutoSpinMode(E, M);
              if (!T.shouldAutoSpin() || F) {
                this.exitAutoSpin();
                this.idle();
              } else {
                this.setupGameResumeEvent(function () {
                  S.enableSpinAction();
                  var b = C.isGameStatePaused() ? 1 : 0;
                  S.delayAndStartAutoSpin(b);
                });
              }
            } else {
              this.idle();
            }
          };
          q.prototype.disposeAutoSpin = function () {
            var S = this._unscheduleAutoSpin;
            this._unscheduleAutoSpin = undefined;
            if (S) {
              S();
            }
          };
          q.prototype.disableSettingMenu = function () {
            Q.settingMenuHelper.autoSpinCallback = undefined;
            Q.settingMenuHelper.setAllButtonsInteractable(false);
          };
          q.prototype.exitAutoSpin = function () {
            this.disposeAutoSpin();
            var S = this.spinButtonController;
            T.exitAutoSpin(S);
            S.idle();
            this.enableAvailableActions();
            this.enableSettingMenu();
            this.setupGameResumeEvent(this.enableSpinAction.bind(this));
          };
          q.prototype.removeGamePauseEvent = function () {
            C.removeGamePauseEventCallback(this.name);
          };
          q.prototype.removeGameResumeEvent = function () {
            C.removeGameResumeEventCallback(this.name);
          };
          q.prototype.emitGameNotifyPause = function () {
            this.disposeAutoSpin();
            C.emitGameNotifyPauseEvent();
          };
          q.prototype.setupGamePauseEvent = function () {
            C.setGamePauseEventCallback(this.name, this.emitGameNotifyPause.bind(this));
          };
          q.prototype.setupGameResumeEvent = function (S) {
            C.setGameResumeEventCallback(this.name, S);
          };
          q.prototype.idle = function () {
            var S = this.spinButtonController;
            S.enableButton();
            S.idle();
            this.onStateFullyIdle();
            this.enableSettingMenu();
            this.enableAvailableActions();
            this.setupGameResumeEvent(this.enableSpinAction.bind(this));
          };
          q.prototype.validateSpin = function (S) {
            var z = this;
            var A = this.spinButtonController;
            if (!A || A.mode !== G.SpinButtonMode.DISABLED) {
              this.preStartSpinAction(function () {
                D.checkSpinValidity({
                  getCostPerSpinFunction: z.getCostPerSpin.bind(z, S),
                  dataSource: z.dataSource,
                  walletHelper: V.walletHelper,
                  callback: function (M) {
                    switch (M) {
                      case L.SpinCredits.FREE_GAME:
                        z.spinFreeCredit(S);
                        break;
                      case L.SpinCredits.CASH:
                        z.spinCashCredit(S);
                        break;
                      case L.SpinCredits.BONUS:
                        z.spinBonusCredit(S);
                        break;
                      case L.SpinCredits.BET_INVALID:
                        z.spinInvalidBet(S);
                        break;
                      case L.SpinCredits.INSUFFICIENT:
                        z.spinInsufficientCredit(S);
                    }
                  }
                });
              });
            }
          };
          q.prototype.enableSettingMenu = function () {
            Q.settingMenuHelper.autoSpinCallback = this.startAutoSpin.bind(this);
            Q.settingMenuHelper.setAllButtonsInteractable(true);
          };
          q.prototype.startAutoSpin = function () {
            var S = this;
            var z = Q.settingMenuHelper.autoSpinCount;
            var A = Q.settingMenuHelper.singleWinAmount;
            var M = Q.settingMenuHelper.balanceAmountMoreThan;
            var E = Q.settingMenuHelper.balanceAmountLessThan;
            var F = {
              count: z,
              single_win: A,
              increment: M,
              decrement: E
            };
            k.sendEvent(shell.ga.CATEGORY_GAME, shell.ga.EVENT_SLOT_AUTO_SPIN, F);
            this.disableSettingMenu();
            this.disableAvailableActions();
            T.startAutoSpin(z, this.spinButtonController, function () {
              S.setupGameResumeEvent(S.delayAndStartAutoSpin.bind(S, S.autoSpinDelay));
            });
          };
          q.prototype.delayAndStartAutoSpin = function (S) {
            var z = this;
            var A = this.dataSource.transactionModel.accumulatedWinAmount;
            this.disposeAutoSpin();
            var M = A > 0 ? 0 : this.autoSpinDelay;
            if (M = S || M) {
              this._unscheduleAutoSpin = N.delayCallback(M)(function () {
                z._unscheduleAutoSpin = undefined;
                z.validateSpin(L.SpinTrigger.AUTOSPIN);
              });
            } else {
              this.validateSpin(L.SpinTrigger.AUTOSPIN);
            }
          };
          q.prototype.decreaseBalance = function (S) {
            if (S === undefined) {
              throw Error("trigger cannot be undefined");
            }
            var z = this.getCostPerSpin(S);
            Q.settingMenuHelper.setWinAmount(0);
            V.walletHelper.spin(z);
          };
          return q;
        }(j.default);
        K.default = Y;
        cc._RF.pop();
      }
    }, {
      AnalyticsHelper: "AnalyticsHelper",
      AutoSpinHandler: "AutoSpinHandler",
      GameEventHandler: "GameEventHandler",
      SettingMenuHelper: "SettingMenuHelper",
      SlotAnalyticsEnum: "SlotAnalyticsEnum",
      SlotDependencyManager: "SlotDependencyManager",
      SlotGameConstants: "SlotGameConstants",
      SpinButtonController: "SpinButtonController",
      SystemFeatureHandler: "SystemFeatureHandler",
      UIState: "UIState",
      Utils: "Utils"
    }],
    InfoBoardController: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "11be0T+CdBGtrhmlBETkYkM", "InfoBoardController")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        K.InfoBoardShowState = K.InfoboardUIState = undefined;
        var T;
        var x;
        var L = I("Utils");
        var D = I("InfoboardMessageController");
        var k = I("SpaceBarInterrupter");
        var C = I("AudioConstant");
        var j = I("AudioManager");
        var G = I("WBSGameUtils");
        var V = I("GameConstant");
        var Q = cc._decorator;
        var N = Q.ccclass;
        var Y = Q.property;
        (function (q) {
          q[q.BEFORE_FINAL_WIN = 0] = "BEFORE_FINAL_WIN";
          q[q.SMALL_WIN = 1] = "SMALL_WIN";
          q[q.MEDIUM_WIN = 2] = "MEDIUM_WIN";
          q[q.NORMAL_TIPS = 3] = "NORMAL_TIPS";
          q[q.FREE_SPIN_TIPS = 4] = "FREE_SPIN_TIPS";
          q[q.FREE_SPIN_WON_TIPS = 5] = "FREE_SPIN_WON_TIPS";
          q[q.SCATTER_REQUEST_TIP = 6] = "SCATTER_REQUEST_TIP";
        })(T = K.InfoboardUIState ||= {});
        (function (q) {
          q[q.BEFORE_FINAL_PAY_WIN = 0] = "BEFORE_FINAL_PAY_WIN";
          q[q.LOW_PAY_WIN = 1] = "LOW_PAY_WIN";
          q[q.LOW_PAY_TOTAL_WIN = 2] = "LOW_PAY_TOTAL_WIN";
          q[q.HIGH_PAY_WIN = 3] = "HIGH_PAY_WIN";
          q[q.HIGH_PAY_TOTAL_WIN = 4] = "HIGH_PAY_TOTAL_WIN";
          q[q.INSTANT_HIGH_PAY_TOTAL_WIN = 5] = "INSTANT_HIGH_PAY_TOTAL_WIN";
          q[q.HIGH_PAY_BIG_TOTAL_WIN = 6] = "HIGH_PAY_BIG_TOTAL_WIN";
        })(x = K.InfoBoardShowState ||= {});
        var W = function (q) {
          function S() {
            var z = q !== null && q.apply(this, arguments) || this;
            z.infoBoardMessageController = undefined;
            z.skipButtonNode = undefined;
            z.infobar = [];
            z.infobarMaskNode = undefined;
            z.infobarMask = [];
            z.swAAnim = undefined;
            z.swB = undefined;
            z.mwAAnim = undefined;
            z.mwDAnim = undefined;
            z.mwFAnim = undefined;
            z.mwGAnim = undefined;
            z.mwB = undefined;
            z.vfxCAnim = undefined;
            z.vfxE = undefined;
            z.winTextNode = undefined;
            z._spinTipsObj = Object.create(null);
            z._infoUIState = undefined;
            z._playState = undefined;
            z._isNormalTips = false;
            z._multipliedCrowdValue = 0;
            z._isUpgrade = false;
            z._disposeShowTips = undefined;
            return z;
          }
          __extends(S, q);
          S.prototype.init = function (z) {
            this._spinTipsObj[T.NORMAL_TIPS] = z.normalSpinTips;
            this._spinTipsObj[T.FREE_SPIN_TIPS] = z.freeSpinTips;
            this._spinTipsObj[T.SCATTER_REQUEST_TIP] = [z.scatterRequestTip];
            this._spinTipsObj[T.FREE_SPIN_WON_TIPS] = [z.freeSpinWonTip];
            this.infoBoardMessageController.winText.spriteFrame = z.winText;
            this.infoBoardMessageController.totalText.spriteFrame = z.totalWinText;
            this.infoBoardMessageController.initNumberDisplayNodeEvent();
            if (V.isRTL) {
              this.winTextNode.getComponent(cc.Layout).horizontalDirection = cc.Layout.HorizontalDirection.RIGHT_TO_LEFT;
            }
          };
          S.prototype.showTips = function (z, A) {
            var M = this;
            if (A === undefined) {
              A = false;
            }
            this._isNormalTips = z === T.NORMAL_TIPS;
            this.infobarMaskNode.active = true;
            if (this._infoUIState !== z) {
              this.resetWinEffect();
              var E = A ? 0 : 0.5;
              function F() {
                M._playFadeOutAction(M.swB);
                M._playFadeOutAction(M.mwB);
                M._isUpgrade = false;
                M._disposeShowTips = undefined;
                M._resetUI();
                M._infoUIState = z;
                M.infoBoardMessageController.setSprites(M._spinTipsObj[M._infoUIState]);
                M.infoBoardMessageController.showInfoboardMessage();
                M.infoBoardMessageController.clear(true);
              }
              if (this._disposeShowTips) {
                this._disposeShowTips();
              }
              this._disposeShowTips = undefined;
              if (E) {
                this._disposeShowTips = L.delayCallback(E)(F);
              } else {
                F();
              }
            }
          };
          S.prototype.showScatterRequestTip = function () {
            if (this._infoUIState !== T.SCATTER_REQUEST_TIP) {
              this.infobarMaskNode.active = true;
              if (this._disposeShowTips) {
                this._disposeShowTips();
              }
              this._disposeShowTips = undefined;
              this._resetUI();
              this._infoUIState = T.SCATTER_REQUEST_TIP;
              this.infoBoardMessageController.setSprites(this._spinTipsObj[this._infoUIState]);
              this.infoBoardMessageController.showInfoboardMessage();
              this.infoBoardMessageController.clear(true);
              this.infoBoardMessageController.spriteMessageNode.runAction(cc.sequence(cc.scaleTo(0.3, 1.1).easing(cc.easeIn(0.2)), cc.scaleTo(0.3, 1).easing(cc.easeIn(0.2)), cc.delayTime(0.24)).repeatForever());
            }
          };
          S.prototype.showFreeSpinWonTip = function () {
            if (this._infoUIState !== T.FREE_SPIN_WON_TIPS) {
              this.infobarMaskNode.active = true;
              if (this._disposeShowTips) {
                this._disposeShowTips();
              }
              this._disposeShowTips = undefined;
              this._resetUI();
              this._infoUIState = T.FREE_SPIN_WON_TIPS;
              this.infoBoardMessageController.setSprites(this._spinTipsObj[this._infoUIState]);
              this.infoBoardMessageController.showInfoboardMessage();
              this.infoBoardMessageController.clear(true);
              this.infoBoardMessageController.spriteMessageNode.runAction(cc.sequence(cc.scaleTo(0.3, 1.1).easing(cc.easeIn(0.2)), cc.scaleTo(0.3, 1).easing(cc.easeIn(0.2)), cc.delayTime(0.24)).repeatForever());
            }
          };
          S.prototype.play = function (z, A) {
            var M = this;
            this.infobarMaskNode.active = false;
            var E = z.showWinText;
            if (E === undefined) {
              E = true;
            }
            this.infoBoardMessageController.winDisplayNode.active = E;
            var F = z.amount;
            var b = z.playState;
            this._playState = b;
            switch (this._playState) {
              case x.BEFORE_FINAL_PAY_WIN:
                if (!z.isMute) {
                  j.playAudio(C.GENERAL_AUDIO.prizeSmallwin.key);
                }
                this._showBeforeFinalPayoutWin(F, A);
                this.playSmallWinEffect();
                break;
              case x.LOW_PAY_WIN:
                if (z.multiplierNumber === 1) {
                  j.playAudio(C.GENERAL_AUDIO.prizeSmallwin.key);
                } else {
                  this._playMultiplierCrowdAudio();
                  j.playAudio(C.GENERAL_AUDIO.prizeSmallwinMultiplied.key);
                }
                this._showLowPayoutWin(F, false, A);
                this.playSmallWinEffect();
                break;
              case x.LOW_PAY_TOTAL_WIN:
                if (!z.isMute) {
                  j.playAudio(C.GENERAL_AUDIO.prizeInfobarTotalwin.key);
                }
                this._showLowPayoutWin(F, true, A);
                this.playSmallWinEffect();
                break;
              case x.HIGH_PAY_WIN:
                if (!z.isMute) {
                  if (z.multiplierNumber === 1) {
                    j.playAudio(C.GENERAL_AUDIO.prizeSmallwin.key);
                  } else {
                    this._playMultiplierCrowdAudio();
                    j.playAudio(C.GENERAL_AUDIO.prizeSmallwinMultiplied.key);
                    j.playAudio(C.GENERAL_AUDIO.prizeSmallwinMultipliedCoins.key);
                  }
                }
                this._showHighPayoutWin(F, false, false, A);
                this.playMediumWinEffect();
                break;
              case x.HIGH_PAY_TOTAL_WIN:
                if (!z.isMute) {
                  j.playAudio(C.GENERAL_AUDIO.prizeInfobarTotalwin.key);
                }
                this._showHighPayoutWin(F, true, true, function () {
                  M._showHighPayoutWin(F, true, false, A);
                  M.playMediumWinEffect();
                });
                this.playMediumWinEffect();
                break;
              case x.INSTANT_HIGH_PAY_TOTAL_WIN:
                this._showHighPayoutWin(F, true, false, A);
                this.playMediumWinEffect();
                break;
              case x.HIGH_PAY_BIG_TOTAL_WIN:
                if (!z.isMute) {
                  j.playAudio(C.GENERAL_AUDIO.prizeInfobarTotalwin.key);
                }
                this._showHighPayoutWin(F, true, false, A);
                this.playBigWinEffect();
            }
          };
          S.prototype.playSmallWinEffect = function (z) {
            this.infobar[0].active = true;
            this.infobarMask[0].active = true;
            this._playAnim(this.vfxCAnim);
            this._playAnim(this.swAAnim);
            this.swB.stopAllActions();
            this.swB.opacity = 0;
            this.swB.runAction(cc.sequence(cc.delayTime(0.03), cc.fadeIn(0.3)));
            this.vfxE.stopAllActions();
            this.vfxE.setScale(0);
            this.vfxE.opacity = 255;
            this.vfxE.runAction(cc.sequence(cc.scaleTo(0.3, 1), cc.scaleTo(1, 1.43, 1.23)));
            this.vfxE.runAction(cc.sequence(cc.delayTime(0.5), cc.fadeOut(0.8)));
            var A = this.infoBoardMessageController.winDisplayNode;
            A.stopAllActions();
            A.setScale(0);
            A.runAction(cc.sequence(cc.scaleTo(0.15, 1.1), cc.scaleTo(0.1, 0.9), cc.scaleTo(0.05, 1)));
            if (z) {
              z();
            }
          };
          S.prototype.playMediumWinEffect = function (z) {
            if (this._isUpgrade === false) {
              j.playAudio(C.GENERAL_AUDIO.prizeInfobarUpgrade.key);
            }
            this._isUpgrade = true;
            this.infobar[0].active = false;
            this.infobar[1].active = true;
            this.infobar[2].active = false;
            this.infobarMask[0].active = false;
            this.infobarMask[1].active = true;
            this.infobarMask[2].active = false;
            this._playAnim(this.vfxCAnim);
            this._playAnim(this.mwAAnim);
            this._playAnim(this.mwDAnim);
            this._playAnim(this.mwFAnim);
            this._playAnim(this.mwGAnim);
            this._playFadeOutAction(this.swB);
            this.mwB.stopAllActions();
            this.mwB.opacity = 0;
            this.mwB.runAction(cc.sequence(cc.delayTime(0.03), cc.fadeIn(0.3)));
            this.vfxE.stopAllActions();
            this.vfxE.setScale(0);
            this.vfxE.opacity = 255;
            this.vfxE.runAction(cc.sequence(cc.scaleTo(0.3, 1.43), cc.scaleTo(1, 1.63, 1.43)));
            this.vfxE.runAction(cc.sequence(cc.delayTime(0.5), cc.fadeOut(0.8)));
            var A = this.infoBoardMessageController.winDisplayNode;
            A.stopAllActions();
            A.setScale(0);
            A.runAction(cc.sequence(cc.scaleTo(0.15, 1.1), cc.scaleTo(0.1, 0.9), cc.scaleTo(0.05, 1)));
            if (z) {
              z();
            }
          };
          S.prototype.playBigWinEffect = function (z) {
            this.infobar[0].active = false;
            this.infobar[1].active = false;
            this.infobar[2].active = true;
            this.infobarMask[0].active = false;
            this.infobarMask[1].active = false;
            this.infobarMask[2].active = true;
            this._playFadeOutAction(this.swB);
            this._playFadeOutAction(this.mwB);
            if (z) {
              z();
            }
          };
          S.prototype.resetWinEffect = function (z) {
            this.infobar[0].active = true;
            this.infobar[1].active = false;
            this.infobar[2].active = false;
            this.infobarMask[0].active = true;
            this.infobarMask[1].active = false;
            this.infobarMask[2].active = false;
            this.swB.stopAllActions();
            this.swB.opacity = 0;
            this.vfxE.stopAllActions();
            this.vfxE.setScale(0);
            this.vfxE.opacity = 255;
            if (z) {
              z();
            }
          };
          S.prototype.stop = function () {
            this._resetUI();
          };
          S.prototype._playAnim = function (z) {
            z.stop();
            z.setCurrentTime(0);
            z.play();
          };
          S.prototype._playFadeOutAction = function (z) {
            z.stopAllActions();
            if (z.opacity !== 0) {
              z.runAction(cc.fadeOut(0.2));
            }
          };
          S.prototype._showBeforeFinalPayoutWin = function (z, A) {
            if (this._infoUIState !== T.BEFORE_FINAL_WIN) {
              this._resetUI();
            }
            this._infoUIState = T.BEFORE_FINAL_WIN;
            this._playCommonWinEffect();
            this.infoBoardMessageController.setTotalAndWinText(false, false);
            this.infoBoardMessageController.clearDisplayNumber();
            this._showDisplayNumber(z);
            if (A) {
              A();
            }
          };
          S.prototype._showLowPayoutWin = function (z, A, M) {
            if (this._infoUIState !== T.SMALL_WIN) {
              this._resetUI();
            }
            this._infoUIState = T.SMALL_WIN;
            this._playCommonWinEffect();
            this.infoBoardMessageController.setTotalAndWinText(A, !A);
            this.infoBoardMessageController.clearDisplayNumber();
            this._showDisplayNumber(z);
            if (M) {
              M();
            }
          };
          S.prototype._showHighPayoutWin = function (z, A, M, E) {
            var F = this;
            if (this._infoUIState !== T.MEDIUM_WIN) {
              this._resetUI();
            }
            this._infoUIState = T.MEDIUM_WIN;
            this._playCommonWinEffect();
            this.infoBoardMessageController.setTotalAndWinText(A, !A);
            this.infoBoardMessageController.clearDisplayNumber();
            if (!M) {
              this._showDisplayNumber(z);
              if (E) {
                E();
              }
              return;
            }
            this.infoBoardMessageController.showNumberRoll(1.988, 0, z, function () {
              F._disableSkipButton();
              j.playAudio(C.GENERAL_AUDIO.prizeInfobarTotalwinMedEnd.key);
              if (E) {
                E();
              }
            });
            j.playAudio(C.GENERAL_AUDIO.prizeInfobarTotalwinMedCoins.key);
            j.playAudio(C.GENERAL_AUDIO.prizeInfobarTotalwinMedMain.key);
            this._enableSkipButton();
          };
          S.prototype._playCommonWinEffect = function () {};
          S.prototype._enableSkipButton = function () {
            this.skipButtonNode.active = true;
            k.spaceBarInterrupter.subscribeEventInterrupter("highPayoutTotalWin", this.node, this.skipButtonClick.bind(this));
          };
          S.prototype._disableSkipButton = function () {
            this.skipButtonNode.active = false;
            k.spaceBarInterrupter.unsubscribeEventInterrupter("highPayoutTotalWin");
          };
          S.prototype.skipButtonClick = function () {
            this._disableSkipButton();
            if (this._playState === x.HIGH_PAY_TOTAL_WIN) {
              j.stopAudio(C.GENERAL_AUDIO.prizeInfobarTotalwinMedMain.key);
            }
            this.infoBoardMessageController.skipNumberRoll();
          };
          S.prototype._resetUI = function () {
            this.infoBoardMessageController.maskNode.stopAllActions();
            this.infoBoardMessageController.maskNode.setScale(1);
            if (this._infoUIState === T.BEFORE_FINAL_WIN || this._infoUIState === T.SMALL_WIN || this._infoUIState === T.MEDIUM_WIN) {
              this.infoBoardMessageController.setTotalAndWinText(false, false);
              this.infoBoardMessageController.clearDisplayNumber();
              this.infoBoardMessageController.clearNumberRoll();
            } else if (this._infoUIState === T.FREE_SPIN_TIPS || this._infoUIState === T.NORMAL_TIPS || this._infoUIState === T.SCATTER_REQUEST_TIP || this._infoUIState === T.FREE_SPIN_WON_TIPS) {
              this.infoBoardMessageController.hideInfoboardMessage();
              this.infoBoardMessageController.unscheduleRandomSpriteTips();
            }
            this._infoUIState = undefined;
          };
          S.prototype._handleUKGCFailCondition = function () {
            this._disableSkipButton();
            if (this._isNormalTips) {
              this.showTips(T.NORMAL_TIPS, true);
            } else {
              this.showTips(T.FREE_SPIN_TIPS, true);
            }
          };
          S.prototype._showDisplayNumber = function (z) {
            if (G.isPassUKGC(z)) {
              this.infoBoardMessageController.showDisplayNumber(z);
            } else {
              this._handleUKGCFailCondition();
            }
          };
          S.prototype._playMultiplierCrowdAudio = function () {
            switch (this._multipliedCrowdValue) {
              case 0:
                this._multipliedCrowdValue = 1;
                j.playAudio(C.GENERAL_AUDIO.prizeSmallwinMultipliedCrowd1.key);
                break;
              case 1:
                this._multipliedCrowdValue = 2;
                j.playAudio(C.GENERAL_AUDIO.prizeSmallwinMultipliedCrowd2.key);
                break;
              case 2:
                this._multipliedCrowdValue = 0;
                j.playAudio(C.GENERAL_AUDIO.prizeSmallwinMultipliedCrowd3.key);
            }
          };
          __decorate([Y({
            tooltip: false,
            type: D.default
          })], S.prototype, "infoBoardMessageController", undefined);
          __decorate([Y({
            tooltip: false,
            type: cc.Node
          })], S.prototype, "skipButtonNode", undefined);
          __decorate([Y([cc.Node])], S.prototype, "infobar", undefined);
          __decorate([Y(cc.Node)], S.prototype, "infobarMaskNode", undefined);
          __decorate([Y([cc.Node])], S.prototype, "infobarMask", undefined);
          __decorate([Y(cc.Animation)], S.prototype, "swAAnim", undefined);
          __decorate([Y(cc.Node)], S.prototype, "swB", undefined);
          __decorate([Y(cc.Animation)], S.prototype, "mwAAnim", undefined);
          __decorate([Y(cc.Animation)], S.prototype, "mwDAnim", undefined);
          __decorate([Y(cc.Animation)], S.prototype, "mwFAnim", undefined);
          __decorate([Y(cc.Animation)], S.prototype, "mwGAnim", undefined);
          __decorate([Y(cc.Node)], S.prototype, "mwB", undefined);
          __decorate([Y(cc.Animation)], S.prototype, "vfxCAnim", undefined);
          __decorate([Y(cc.Node)], S.prototype, "vfxE", undefined);
          __decorate([Y(cc.Node)], S.prototype, "winTextNode", undefined);
          return __decorate([N], S);
        }(cc.Component);
        K.default = W;
        cc._RF.pop();
      }
    }, {
      AudioConstant: "AudioConstant",
      AudioManager: "AudioManager",
      GameConstant: "GameConstant",
      InfoboardMessageController: "InfoboardMessageController",
      SpaceBarInterrupter: "SpaceBarInterrupter",
      Utils: "Utils",
      WBSGameUtils: "WBSGameUtils"
    }],
    "InfoboardMessageController.spec": [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "9a894aU+wtPzI8aYY1BbeiI", "InfoboardMessageController.spec")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        K.setWinAmount = K.setTotalAndWinText = undefined;
        K.setTotalAndWinText = function (T, x) {
          if (T || x) {
            var L = System.get("automation") && System.get("automation").GameData;
            if (L) {
              L.emit(T ? "ShowTotalWin" : "ShowWin");
            }
          }
        };
        K.setWinAmount = function (T, x) {
          if (T && T > 0) {
            var L = System.get("automation") && System.get("automation").GameData;
            if (L) {
              L.emit(x ? "ShowTotalWin" : "ShowWin");
            }
          }
        };
        cc._RF.pop();
      }
    }, {}],
    InfoboardMessageController: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "f962cm61b9P6rw9Yco9B/O4", "InfoboardMessageController")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        K.InfoboardMessageOrderState = undefined;
        var T;
        var x;
        var L = I("NumberDisplayController");
        var D = I("NumberRollController");
        var k = I("Utils");
        var C = I("AutomationDecorator");
        var j = I("InfoboardMessageController.spec");
        (function (Y) {
          Y[Y.SEQUENCE = 0] = "SEQUENCE";
          Y[Y.RANDOM = 1] = "RANDOM";
        })(T = K.InfoboardMessageOrderState ||= {});
        (function (Y) {
          Y._fntConfig = "_fntConfig";
        })(x ||= {});
        var G = cc._decorator;
        var V = G.ccclass;
        var Q = G.property;
        var N = function (Y) {
          function W() {
            var F = Y !== null && Y.apply(this, arguments) || this;
            F.maskNode = undefined;
            F.padding = 40;
            F.label = undefined;
            F.winLabelColor = new cc.Color();
            F.winLabelOutlineColor = new cc.Color();
            F.tipsLabelColor = new cc.Color();
            F.tipsLabelOutlineColor = new cc.Color();
            F.enableWinOutline = true;
            F.enableTipsOutline = true;
            F.spriteMessageNode = undefined;
            F.sprite = undefined;
            F.numberRollController = undefined;
            F.numberDisplayController = undefined;
            F.winText = undefined;
            F.totalText = undefined;
            F.winDisplayNode = undefined;
            F._initSpriteNodePos = undefined;
            F._tips = [];
            F._sprites = [];
            F._availableTips = [];
            F._availableSprites = [];
            F._isWinAmountShown = undefined;
            F._willExpire = undefined;
            F._isEventShown = undefined;
            F._numberRollCompleteCallback = undefined;
            F._labelMessageMinDelayTime = 4;
            F._labelMessageRangeOfTimeAdded = 3;
            F._spriteMessageMinDelayTime = 4;
            F._spriteMessageRangeOfTimeAdded = 3;
            F._labelOriginY = 0;
            F._maxNumberDisplayNodeWidth = 650;
            F._initialNumberDisplayNodeScale = 1;
            F._orderMessageState = T.RANDOM;
            F._anchorPoint = 0;
            F._complement = -1;
            F._winDisplayLayout = undefined;
            return F;
          }
          var q = {
            get: function () {
              return this._willExpire;
            },
            enumerable: false,
            configurable: true
          };
          __extends(W, Y);
          Object.defineProperty(W.prototype, "willExpire", q);
          W.prototype.onLoad = function () {
            if (shell.isRTLLanguage()) {
              this._anchorPoint = 1;
              this._complement = 1;
            }
            if (this.winText) {
              var F = this.winText.node.parent;
              var b = this._winDisplayLayout = F.getComponent(cc.Layout);
              if (shell.isRTLLanguage()) {
                b.horizontalDirection = cc.Layout.HorizontalDirection.RIGHT_TO_LEFT;
              }
            }
          };
          W.prototype.initNumberDisplayNodeEvent = function () {
            this._initialNumberDisplayNodeScale = this.winDisplayNode.scale;
            this.winDisplayNode.on("size-changed", this.resizeNumberDisplay, this);
          };
          W.prototype.setNumberDisplayNodeWidth = function (F) {
            this._maxNumberDisplayNodeWidth = F;
          };
          W.prototype.setEventMessage = function (F, b = true, H = false) {
            if (!this._isWinAmountShown) {
              if (H) {
                this.label.node.color = this.tipsLabelOutlineColor;
                this.label.node.getComponent(cc.LabelOutline).enabled = this.enableTipsOutline;
              }
              this._isWinAmountShown = false;
              this._isEventShown = true;
              this._willExpire = b;
              this.unschedule(this.playRandomTips);
              this.unschedule(this.playRandomSpriteTips);
              if (F instanceof cc.SpriteFrame) {
                this.setSpriteMessage(F);
              } else if (typeof F == "string") {
                this.setLabel(F);
              }
            }
          };
          W.prototype.clear = function (F = false) {
            if (this._isWinAmountShown || this._isEventShown || F || this._orderMessageState !== T.RANDOM) {
              if (this.sprite) {
                this.unschedule(this.playRandomSpriteTips);
                this.playRandomSpriteTips();
              } else if (this.label) {
                this.unschedule(this.playRandomTips);
                this.playRandomTips();
              }
            }
          };
          W.prototype.stop = function () {
            if (this.sprite) {
              this.sprite.node.stopAllActions();
            }
            if (this.label) {
              this.label.node.stopAllActions();
            }
          };
          W.prototype.setLocalizedSpriteFrame = function (F, b) {
            this.winText.spriteFrame = F;
            this.totalText.spriteFrame = b;
          };
          W.prototype.setSprites = function (F) {
            this._sprites = undefined;
            this._sprites = F;
            this._availableSprites = F.slice();
          };
          W.prototype.setOrderOfMessage = function (F = T.RANDOM) {
            this._orderMessageState = F;
          };
          W.prototype.setRandomSpriteScheduleTime = function (F = 4, b = 3) {
            this._spriteMessageRangeOfTimeAdded = b;
            this._spriteMessageMinDelayTime = F;
          };
          W.prototype.playScheduleRandomSpriteTipsOverride = function () {
            var F = Math.floor(Math.random() * this._spriteMessageRangeOfTimeAdded) + this._spriteMessageMinDelayTime;
            this.unschedule(this.playRandomSpriteTips);
            this.scheduleOnce(this.playRandomSpriteTips, F);
          };
          W.prototype.playScheduleRandomSpriteTips = function (F = 0) {
            this.unschedule(this.playRandomSpriteTips);
            this.scheduleOnce(this.playRandomSpriteTips, F);
          };
          W.prototype.unscheduleRandomSpriteTips = function () {
            this.unschedule(this.playRandomSpriteTips);
          };
          W.prototype.setTotalAndWinText = function (F, b) {
            this.totalText.node.active = F;
            this.winText.node.active = b;
            this.winDisplayNode.opacity = 255;
            if (this._winDisplayLayout) {
              this._winDisplayLayout.updateLayout();
            }
          };
          W.prototype.showInfoboardMessage = function () {
            var F = this.maskNode.getComponent(cc.Mask);
            if (F) {
              F.enabled = true;
            }
            this.spriteMessageNode.active = true;
          };
          W.prototype.hideInfoboardMessage = function () {
            this.spriteMessageNode.active = false;
            var F = this.maskNode.getComponent(cc.Mask);
            if (F) {
              F.enabled = false;
            }
          };
          W.prototype.showDisplayNumber = function (F, b = false) {
            this._isWinAmountShown = true;
            if (this.winDisplayNode) {
              this.winDisplayNode.setScale(this._initialNumberDisplayNodeScale);
            }
            this.numberDisplayController.clear();
            this.numberDisplayController.displayNumber(F, b);
            if (this._winDisplayLayout) {
              this._winDisplayLayout.updateLayout();
            }
          };
          W.prototype.clearDisplayNumber = function () {
            this.numberDisplayController.clear();
          };
          W.prototype.showNumberRoll = function (F, b, H, w, U = true) {
            this._isEventShown = false;
            this._isWinAmountShown = true;
            this._numberRollCompleteCallback = w;
            if (this.winDisplayNode) {
              this.winDisplayNode.setScale(this._initialNumberDisplayNodeScale);
            }
            this.numberRollController.rollDuration = F;
            this.numberRollController.play(b, H, this.onNumberRollComplete.bind(this), U);
          };
          W.prototype.skipNumberRoll = function () {
            this.numberRollController.skip();
            this.onNumberRollComplete();
          };
          W.prototype.clearNumberRoll = function () {
            this.numberRollController.stop();
          };
          W.prototype.setSpriteMessage = function (F) {
            var b = this;
            var H = this.padding;
            var w = this.sprite;
            var U = w.node;
            U.stopAllActions();
            w.spriteFrame = F;
            var B = this.maskNode.width;
            if (U.width * U.scaleY + H * 2 > B) {
              var P = this._complement;
              U.setAnchorPoint(this._anchorPoint, U.anchorY);
              U.setPosition(cc.v2((B / 2 - H) * P, U.y));
              this._initSpriteNodePos = U.position;
              var X = U.width * U.scaleY + H * 2;
              var y = cc.delayTime(1.5);
              var m = cc.moveBy(X / 130, cc.v2(X * P, 0));
              var v = undefined;
              v = this._willExpire ? cc.sequence(y, m, cc.callFunc(this.playScheduleRandomSpriteTips, this)) : cc.sequence(y, m, cc.callFunc(function () {
                U.position = b._initSpriteNodePos;
              })).repeatForever();
              U.runAction(v);
            } else {
              U.setAnchorPoint(0.5, U.anchorY);
              U.x = 0;
              if (!this._willExpire) {
                return;
              }
              k.deferCallback(true)(this.playScheduleRandomSpriteTipsOverride.bind(this));
            }
          };
          W.prototype.playRandomSpriteTips = function () {
            this._isWinAmountShown = false;
            this._isEventShown = false;
            this._willExpire = true;
            if (this._availableSprites.length === 0) {
              this._availableSprites = this._sprites.slice();
            }
            var F = this._availableSprites;
            if (this._orderMessageState === T.RANDOM) {
              var b = Math.floor(Math.random() * F.length);
              if (F.length > 1) {
                while (this.sprite.spriteFrame === F[b]) {
                  b = Math.floor(Math.random() * F.length);
                }
              }
              this.setSpriteMessage(F[b]);
              this._availableSprites.splice(b, 1);
            } else if (this._orderMessageState === T.SEQUENCE) {
              this.setSpriteMessage(F[0]);
              this._availableSprites.splice(0, 1);
            }
          };
          W.prototype.resizeNumberDisplay = function () {
            var F = this._maxNumberDisplayNodeWidth;
            var b = this.winDisplayNode.width * this._initialNumberDisplayNodeScale;
            var H = b - F;
            if (H > 0) {
              var w = this._initialNumberDisplayNodeScale - H / b;
              this.winDisplayNode.scale = w;
            }
          };
          W.prototype.onNumberRollComplete = function () {
            var F = this._numberRollCompleteCallback;
            this._isWinAmountShown = false;
            this._numberRollCompleteCallback = undefined;
            if (F) {
              F();
            }
          };
          W.prototype.initLabelNodeY = function () {
            this._labelOriginY = this.label.node.y;
          };
          W.prototype.setTips = function (F) {
            this._tips = F;
            this._availableTips = F.slice();
          };
          W.prototype.setLocalizedFont = function (F) {
            this.label.font = F;
          };
          W.prototype.setLabelFontHeight = function (F = 0) {
            var b = this.label.font;
            if (b[x._fntConfig]) {
              this.label.lineHeight = b[x._fntConfig].commonHeight + F;
            }
          };
          W.prototype.setWinLabelColor = function (F) {
            this.winLabelColor = F;
          };
          W.prototype.setWinLabelOutlineColor = function (F) {
            this.winLabelOutlineColor = F;
          };
          W.prototype.setTipsLabelColor = function (F) {
            this.tipsLabelColor = F;
          };
          W.prototype.setTipsLabelOutlineColor = function (F) {
            this.tipsLabelOutlineColor = F;
          };
          W.prototype.setWinAmount = function (F, b = false, H = false) {
            if (F && F > 0) {
              this.unschedule(this.playRandomTips);
              this.unschedule(this.playRandomSpriteTips);
              this._isEventShown = false;
              this._isWinAmountShown = true;
              this._willExpire = H;
              var w = this.label.node;
              var U = w.getComponent(cc.LabelOutline);
              w.color = this.winLabelColor;
              if (U) {
                U.color = this.winLabelOutlineColor;
                U.enabled = this.enableWinOutline;
              }
              var B = (b ? shell.I18n.t("InfoboardMessage.TotalWin") : shell.I18n.t("InfoboardMessage.Win")) + " " + k.formatCurrency(F, "", "");
              this.setLabel(B);
            }
          };
          W.prototype.setRandomLabelScheduleTime = function (F = 4, b = 3) {
            this._labelMessageRangeOfTimeAdded = b;
            this._labelMessageMinDelayTime = F;
          };
          W.prototype.scheduleRandomTips = function () {
            var F = Math.floor(Math.random() * this._labelMessageRangeOfTimeAdded) + this._labelMessageMinDelayTime;
            this.unschedule(this.playRandomTips);
            this.scheduleOnce(this.playRandomTips, F);
          };
          W.prototype.playScheduleRandomTips = function (F = 0) {
            this.unschedule(this.playRandomTips);
            this.scheduleOnce(this.playRandomTips, F);
          };
          W.prototype.unscheduleRandomTips = function () {
            this.unschedule(this.playRandomTips);
          };
          W.prototype.playRandomTips = function () {
            this._isWinAmountShown = false;
            this._isEventShown = false;
            if (this._tips.length !== 1) {
              this._willExpire = true;
            }
            if (this._availableTips.length === 0) {
              this._availableTips = this._tips.slice();
            }
            var F = this._availableTips;
            var b = Math.floor(Math.random() * F.length);
            var H = this.label.node;
            H.color = this.tipsLabelColor;
            var w = H.getComponent(cc.LabelOutline);
            if (w) {
              w.color = this.tipsLabelOutlineColor;
              w.enabled = this.enableTipsOutline;
            }
            this.setLabel(F[b]);
            this._availableTips.splice(b, 1);
          };
          W.prototype.setLabel = function (F) {
            var b = this.label;
            b.string = F;
            b.node.y = this.maskNode.height * 2;
            this.unschedule(this.determineOverFlow);
            this.scheduleOnce(this.determineOverFlow);
          };
          W.prototype.determineOverFlow = function () {
            var F = this.label.node;
            var b = this.padding;
            if (F.width + b * 2 > this.maskNode.width) {
              this.scrollLabel();
            } else {
              F.stopAllActions();
              F.setAnchorPoint(0.5, F.anchorY);
              F.x = 0;
              if (this._willExpire) {
                this.scheduleRandomTips();
              }
            }
            F.y = this._labelOriginY;
          };
          W.prototype.scrollLabel = function () {
            var F = this.label;
            var b = this.padding;
            var H = F.node;
            var w = this._complement;
            H.stopAllActions();
            H.setAnchorPoint(this._anchorPoint, H.anchorY);
            H.setPosition(cc.v2((this.maskNode.width / 2 - b) * w, H.y));
            var U;
            var B = H.width + b * 2;
            var P = cc.delayTime(1.5);
            var X = cc.moveBy(B / 130, cc.v2(B * w, 0));
            U = this._willExpire ? cc.sequence(P, X, cc.callFunc(this.playScheduleRandomTips, this)) : cc.sequence(P, X, cc.callFunc(this.scrollLabel, this));
            H.runAction(U);
          };
          W.prototype._reset = function () {
            this.stop();
            this.numberRollController.stop();
            this.numberDisplayController.clear();
            this.unschedule(this.scheduleRandomTips);
            this.unschedule(this.playRandomSpriteTips);
            this.unschedule(this.playRandomTips);
            this.padding = 40;
            this._maxNumberDisplayNodeWidth = 650;
            this._labelOriginY = 0;
            this._orderMessageState = T.RANDOM;
            this.enableTipsOutline = true;
            this.enableWinOutline = true;
            this._isWinAmountShown = false;
            this._tips = [];
            this._sprites = [];
            this._availableSprites = [];
            this._availableTips = undefined;
            this._willExpire = undefined;
            this._isEventShown = undefined;
            this.tipsLabelColor = undefined;
            this.tipsLabelOutlineColor = undefined;
            this._numberRollCompleteCallback = undefined;
          };
          W.prototype.destroy = function () {
            this._reset();
            this.node.destroy();
            return Y.prototype.destroy.call(this);
          };
          __decorate([Q({
            type: cc.Node,
            tooltip: false
          })], W.prototype, "maskNode", undefined);
          __decorate([Q({
            type: cc.Float,
            tooltip: false
          })], W.prototype, "padding", undefined);
          __decorate([Q({
            type: cc.Label,
            tooltip: false
          })], W.prototype, "label", undefined);
          __decorate([Q({
            tooltip: false
          })], W.prototype, "winLabelColor", undefined);
          __decorate([Q({
            tooltip: false
          })], W.prototype, "winLabelOutlineColor", undefined);
          __decorate([Q({
            tooltip: false
          })], W.prototype, "tipsLabelColor", undefined);
          __decorate([Q({
            tooltip: false
          })], W.prototype, "tipsLabelOutlineColor", undefined);
          __decorate([Q({
            tooltip: false
          })], W.prototype, "enableWinOutline", undefined);
          __decorate([Q({
            tooltip: false
          })], W.prototype, "enableTipsOutline", undefined);
          __decorate([Q({
            type: cc.Node,
            tooltip: false
          })], W.prototype, "spriteMessageNode", undefined);
          __decorate([Q({
            type: cc.Sprite,
            tooltip: false
          })], W.prototype, "sprite", undefined);
          __decorate([Q({
            type: D.default,
            tooltip: false
          })], W.prototype, "numberRollController", undefined);
          __decorate([Q({
            type: L.default,
            tooltip: false
          })], W.prototype, "numberDisplayController", undefined);
          __decorate([Q({
            type: cc.Sprite,
            tooltip: false
          })], W.prototype, "winText", undefined);
          __decorate([Q({
            type: cc.Sprite,
            tooltip: false
          })], W.prototype, "totalText", undefined);
          __decorate([Q({
            type: cc.Node,
            tooltip: false
          })], W.prototype, "winDisplayNode", undefined);
          __decorate([C.automationDec({
            func: j.setTotalAndWinText
          })], W.prototype, "setTotalAndWinText", null);
          __decorate([C.automationDec({
            func: j.setWinAmount
          })], W.prototype, "setWinAmount", null);
          return __decorate([V], W);
        }(cc.Component);
        K.default = N;
        cc._RF.pop();
      }
    }, {
      AutomationDecorator: "AutomationDecorator",
      "InfoboardMessageController.spec": "InfoboardMessageController.spec",
      NumberDisplayController: "NumberDisplayController",
      NumberRollController: "NumberRollController",
      Utils: "Utils"
    }],
    JSONSerializer: [function (Z, I) {
      'use strict';

      if (!cc._RF.push(I, "1252bHHaiZC15bpK+5v9l5B", "JSONSerializer")) {
        var R = System.get("common").JSONSerialiser;
        I.exports.JSONSerializer = R;
        I.exports.__esModule = true;
        cc._RF.pop();
      }
    }, {}],
    LabelLocalized: [function (Z, I, R) {
      'use strict';

      if (!cc._RF.push(I, "f5f30hTmFFOcLgg2elp0I0D", "LabelLocalized")) {
        R.__esModule = true;
        R.default = undefined;
        var K = cc.Class({
          extends: cc.Component,
          editor: false,
          properties: {
            key: {
              tooltip: false,
              default: "",
              notify: function () {
                this._updateString();
              }
            }
          },
          onLoad: function () {
            this._label = this.node.getComponent(cc.Label);
            this._label ||= this.node.getComponent(cc.RichText);
            this._updateString();
          },
          _updateString: function () {
            var g = this._label;
            if (g) {
              g.string = shell.I18n.t(this.key);
            }
          }
        });
        R.default = K;
        I.exports = R.default;
        cc._RF.pop();
      }
    }, {}],
    LabelTheme: [function (x, L, D) {
      'use strict';

      if (!cc._RF.push(L, "05b6c8yPn1LZIH3AnSTBq8U", "LabelTheme")) {
        D.__esModule = true;
        D.default = undefined;
        var C;
        var j = function (E) {
          if (E && E.__esModule) {
            return E;
          }
          if (E === null || typeof E != "object" && typeof E != "function") {
            return {
              default: E
            };
          }
          var F = M(undefined);
          if (F && F.has(E)) {
            return F.get(E);
          }
          var h = {};
          var b = Object.defineProperty && Object.getOwnPropertyDescriptor;
          for (var H in E) {
            if (H !== "default" && Object.prototype.hasOwnProperty.call(E, H)) {
              var w = b ? Object.getOwnPropertyDescriptor(E, H) : null;
              if (w && (w.get || w.set)) {
                Object.defineProperty(h, H, w);
              } else {
                h[H] = E[H];
              }
            }
          }
          h.default = E;
          if (F) {
            F.set(E, h);
          }
          return h;
        }(x("ResRC"));
        var G = x("ResourceQualifierHelper");
        var V = x("Utils");
        var Q = x("UIAppearanceHelper");
        var N = cc.Enum({
          _updateRichText: "_updateRichText",
          _isBold: "_isBold",
          _isItalic: "_isItalic"
        });
        var Y = (0, V.getCocosMajor)();
        C = typeof Y == "number" && Y >= 4 ? function (E) {
          return E.markForRender(true);
        } : function (E) {
          return E.markForUpdateRenderData(true);
        };
        var A = cc.Class({
          extends: cc.Component,
          ctor: function () {},
          editor: false,
          properties: {
            followThemeColor: false,
            followFont: false,
            domainKey: {
              tooltip: false,
              default: ""
            },
            colorKey: {
              tooltip: false,
              default: "",
              notify: function () {
                this._updateColor();
              }
            },
            fontFamilyKey: {
              tooltip: false,
              default: "theme_font"
            },
            fontKey: {
              tooltip: false,
              default: ""
            },
            fontWeightKey: {
              tooltip: false,
              default: ""
            },
            fontStyleKey: {
              tooltip: false,
              default: ""
            }
          },
          onLoad: function () {
            this._label = this.node.getComponent(cc.Label);
            this._label ||= this.node.getComponent(cc.RichText);
            this._updateColor();
            this._updateFont();
          },
          _updateColor: function () {
            if (this.followThemeColor) {
              var E = this.node;
              this.domainKey;
              this.colorKey;
              if (E && this.colorKey != "") {
                var F = Q.uiAppearanceHelper.v(this.domainKey + "." + this.colorKey);
                E.color = new cc.Color(F.r, F.g, F.b);
                E.opacity = F.getA();
              }
            }
          },
          _updateFont: function () {
            var E = this;
            if (this.followFont) {
              var F = this._label;
              if (F) {
                F.offsetY = (0, Q.getOffsetY)();
                if (this.fontFamilyKey && this.domainKey) {
                  var h = Q.uiAppearanceHelper.v(this.domainKey + "." + this.fontFamilyKey);
                  this._updateLabelFontFamily(h);
                }
                if (this.fontWeightKey) {
                  var b = this.fontWeightKey;
                  this._updateLabelWeight(b);
                }
                if (this.fontStyleKey) {
                  var H = this.fontStyleKey;
                  this._updateLabelStyle(H);
                }
                if (!this.fontFamilyKey && this.fontKey && this.domainKey) {
                  var w = Q.uiAppearanceHelper.v(this.domainKey + "." + this.fontKey);
                  if (typeof w == "object") {
                    this._updateLabelFont(w);
                    return;
                  }
                  if (w) {
                    var U = (0, G.getResourceURL)(w);
                    if (U) {
                      j.load(U, cc.Font, function (B, P) {
                        if (!B) {
                          E._updateLabelFont(P);
                        }
                      });
                    }
                    return;
                  }
                }
              }
            }
          },
          _updateLabelFont: function (E) {
            var F = this._label;
            if (cc.isValid(this.node)) {
              F.font = E;
              if (F instanceof cc.Label) {
                C(F);
              } else if (F instanceof cc.RichText) {
                F[N._updateRichText]();
              }
            }
          },
          _updateLabelFontFamily: function (E) {
            var F = this._label;
            if (cc.isValid(this.node)) {
              F.fontFamily = E;
              if (F instanceof cc.Label) {
                C(F);
              } else if (F instanceof cc.RichText) {
                F[N._updateRichText]();
              }
            }
          },
          _updateLabelWeight: function (E) {
            var F = this._label;
            if (cc.isValid(this.node)) {
              F[N._isBold] = E;
              if (F instanceof cc.Label) {
                C(F);
              } else {
                cc.RichText;
              }
            }
          },
          _updateLabelStyle: function (E) {
            var F = this._label;
            if (cc.isValid(this.node)) {
              F[N._isItalic] = E;
              if (F instanceof cc.Label) {
                C(F);
              } else {
                cc.RichText;
              }
            }
          }
        });
        D.default = A;
        L.exports = D.default;
        cc._RF.pop();
      }
      function M(E) {
        if (typeof WeakMap != "function") {
          return null;
        }
        var F = new WeakMap();
        var h = new WeakMap();
        return (M = function (b) {
          if (b) {
            return h;
          } else {
            return F;
          }
        })(E);
      }
    }, {
      ResRC: "ResRC",
      ResourceQualifierHelper: "ResourceQualifierHelper",
      UIAppearanceHelper: "UIAppearanceHelper",
      Utils: "Utils"
    }],
    LandscapeSettingInfoFooterController: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "e550bCO+rxMtaTFsIcS7wfm", "LandscapeSettingInfoFooterController")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("SettingInfoFooterController");
        var x = I("UIAppearanceHelper");
        var L = I("Utils");
        var D = cc._decorator;
        var k = D.ccclass;
        var C = D.property;
        var u = function (p) {
          function j() {
            var G = p !== null && p.apply(this, arguments) || this;
            G.borders = [];
            G.descriptionLabel = [];
            G.landscapeSoundButtonHolder = undefined;
            return G;
          }
          __extends(j, p);
          j.prototype.boot = function () {
            p.prototype.boot.call(this);
            var G = x.uiAppearanceHelper.v("setting.secondary_theme_color");
            this.borders.forEach(function (Q) {
              L.setNodeColorWithOpacity(Q, G);
            });
            var V = x.uiAppearanceHelper.v("setting.tertiary_theme_color");
            this.descriptionLabel.forEach(function (Q) {
              L.setNodeColorWithOpacity(Q.node, V);
            });
            this.betOptionsButton.normalColor = x.uiAppearanceHelper.v("setting.tertiary_theme_color");
            this.betOptionsButton.pressedColor = x.uiAppearanceHelper.v("setting.color_button_transition_a.pressed");
            this.betOptionsButton.hoverColor = x.uiAppearanceHelper.v("setting.tertiary_theme_color");
            this.betOptionsButton.disabledColor = x.uiAppearanceHelper.v("setting.tertiary_theme_color");
            this.walletButton.normalColor = x.uiAppearanceHelper.v("setting.tertiary_theme_color");
            this.walletButton.pressedColor = x.uiAppearanceHelper.v("setting.color_button_transition_a.pressed");
            this.walletButton.hoverColor = x.uiAppearanceHelper.v("setting.tertiary_theme_color");
            this.walletButton.disabledColor = x.uiAppearanceHelper.v("setting.tertiary_theme_color");
            this.winButton.normalColor = x.uiAppearanceHelper.v("setting.tertiary_theme_color");
            this.winButton.pressedColor = x.uiAppearanceHelper.v("setting.color_button_transition_a.pressed");
            this.winButton.hoverColor = x.uiAppearanceHelper.v("setting.tertiary_theme_color");
            this.winButton.disabledColor = x.uiAppearanceHelper.v("setting.tertiary_theme_color");
          };
          j.prototype.setWalletNavigateIcon = function (G) {
            this._setDescription();
            switch (G) {
              case T.WALLET_FOOTER_TYPE.CASH:
                this.walletNavigateIcon.getComponent(cc.Sprite).spriteFrame = this.walletFooterTypeSFList[G - 1];
                break;
              case T.WALLET_FOOTER_TYPE.FREE_GAME:
                this.walletNavigateIcon.getComponent(cc.Sprite).spriteFrame = this.walletFooterTypeSFList[G - 1];
                this.specialIcon.spriteFrame = this.rewardFooterTypeSFList[G - 2];
                this.descriptionLabel[2].string = shell.I18n.t("SettingMenu.FreeGame");
                break;
              case T.WALLET_FOOTER_TYPE.BONUS:
                this.walletNavigateIcon.getComponent(cc.Sprite).spriteFrame = this.walletFooterTypeSFList[G - 1];
                this.specialIcon.spriteFrame = this.rewardFooterTypeSFList[G - 2];
                this.descriptionLabel[2].string = shell.I18n.t("SettingMenu.RollOver");
                break;
              default:
                this.walletNavigateIcon.getComponent(cc.Sprite).spriteFrame = undefined;
            }
          };
          j.prototype._setDescription = function () {
            this.descriptionLabel[0].string = shell.I18n.t("WalletHelper.Balance");
            this.descriptionLabel[1].string = shell.I18n.t("SettingMenu.WinPrizeWord");
            this.descriptionLabel[2].string = "";
            this.descriptionLabel[3].string = shell.I18n.t("SettingMenu.Bet");
          };
          __decorate([C([cc.Node])], j.prototype, "borders", undefined);
          __decorate([C([cc.Label])], j.prototype, "descriptionLabel", undefined);
          __decorate([C(cc.Node)], j.prototype, "landscapeSoundButtonHolder", undefined);
          return __decorate([k], j);
        }(T.SettingInfoFooterController);
        K.default = u;
        cc._RF.pop();
      }
    }, {
      SettingInfoFooterController: "SettingInfoFooterController",
      UIAppearanceHelper: "UIAppearanceHelper",
      Utils: "Utils"
    }],
    LandscapeSettingMenuController: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "0a93fcJrXdI5b2EdfUH4UAj", "LandscapeSettingMenuController")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        K.LandscapeSettingMenuController = undefined;
        var T = I("SettingMenuController");
        var x = I("CanvasResizeBroadcaster");
        var L = I("UIAppearanceHelper");
        var D = cc._decorator;
        var k = D.ccclass;
        var C = D.property;
        var u = function (p) {
          function j() {
            var G = p !== null && p.apply(this, arguments) || this;
            G.landscapeSoundButtonHolder = undefined;
            G.moreMenuLayoutNode = undefined;
            G.moreMenuBGNode = undefined;
            G._moreMenuLayerNodePosition = undefined;
            return G;
          }
          __extends(j, p);
          j.prototype.onLoad = function () {
            this._onMoreSettingLayerSizeChanged();
            this.moreMenuLayoutNode.on("size-changed", this._onMoreSettingLayerSizeChanged.bind(this));
            this._moreMenuLayerNodePosition = this.moreMenuLayerNode.position;
            this.settingTurboSprite.node.color = L.uiAppearanceHelper.v("setting.theme_color");
            this.defaultMenuLayerNode.y = 0;
            this.settingToast.opacity = 0;
            this.featureBuyToast.opacity = 0;
            this.featureBuyToast.active = false;
            this.moreMenuLayerNode.y = -(this.moreMenuLayerNode.height + this._getGapBetweenBottomScreenValue());
            this.reminderBoard.active = false;
            this.reminderBoard.opacity = 1;
            this.settingMenuUIBlock.active = false;
            this.subControllerHolder.height = this._currentUsingHeight = cc.view.getVisibleSize().height;
            this._unsubscribeBroadcaster = x.default.subscribe(this._onSizeChanged.bind(this));
          };
          j.prototype.showMoreMenuLayer = function () {
            var G = this;
            if (!this._isSwitchingLayer) {
              this._isSwitchingLayer = true;
              this._showingDefaultMenu = true;
              this._reloadMenuItems();
              this.moreMenuLayerNode.active = true;
              this.moreMenuLayerNode.stopAllActions();
              this.moreMenuLayerNode.runAction(cc.sequence(cc.spawn(cc.moveTo(0.2, this._moreMenuLayerNodePosition.x, this._moreMenuLayerNodePosition.y).easing(cc.easeQuadraticActionOut()), cc.fadeIn(0.2).easing(cc.easeQuadraticActionOut())), cc.callFunc(function () {
                G._isSwitchingLayer = false;
                if (G.onMenuEndChanged) {
                  G.onMenuEndChanged();
                }
              })));
              var V = this.onMenuStartChanged;
              if (V) {
                V(true, true);
              }
            }
          };
          j.prototype.hideMoreMenuLayer = function () {
            var G = this;
            if (!this._isSwitchingLayer) {
              this._isSwitchingLayer = true;
              this._showingDefaultMenu = true;
              this._reloadMenuItems();
              this.moreMenuLayerNode.stopAllActions();
              this.moreMenuLayerNode.runAction(cc.sequence(cc.spawn(cc.moveTo(0.2, this._moreMenuLayerNodePosition.x, -this.moreMenuLayerNode.height).easing(cc.easeQuadraticActionOut()), cc.fadeOut(0.2).easing(cc.easeQuadraticActionOut())), cc.callFunc(function () {
                G._isSwitchingLayer = false;
                G.moreMenuLayerNode.active = false;
                if (G.onMenuEndChanged) {
                  G.onMenuEndChanged();
                }
              })));
              if (this.moreMenuLayerNode.active === false) {
                this._isSwitchingLayer = false;
              }
              var V = this.onMenuStartChanged;
              if (V) {
                V(false, true);
              }
            }
          };
          j.prototype._onMoreSettingLayerSizeChanged = function () {
            this.moreMenuBGNode.width = this.moreMenuLayoutNode.width;
            this.moreMenuBGNode.height = this.moreMenuLayoutNode.height;
          };
          __decorate([C(cc.Node)], j.prototype, "landscapeSoundButtonHolder", undefined);
          __decorate([C(cc.Node)], j.prototype, "moreMenuLayoutNode", undefined);
          __decorate([C(cc.Node)], j.prototype, "moreMenuBGNode", undefined);
          return __decorate([k], j);
        }(T.SettingMenuController);
        K.LandscapeSettingMenuController = u;
        cc._RF.pop();
      }
    }, {
      CanvasResizeBroadcaster: "CanvasResizeBroadcaster",
      SettingMenuController: "SettingMenuController",
      UIAppearanceHelper: "UIAppearanceHelper"
    }],
    LandscapeSoundButton: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "948ffXQc5hNbqpouW3VdkkX", "LandscapeSoundButton")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("SoundButton");
        var x = I("UIAppearanceHelper");
        var L = I("Utils");
        var D = cc._decorator;
        var k = D.ccclass;
        var C = D.property;
        var u = function (p) {
          function j() {
            var G = p !== null && p.apply(this, arguments) || this;
            G.largeSprite = undefined;
            G.largeSoundOnIcon = undefined;
            G.largeSoundOffIcon = undefined;
            return G;
          }
          __extends(j, p);
          j.prototype.onLoad = function () {
            this.enableTouchInteraction();
            if (this.buttonTheme) {
              var G = x.uiAppearanceHelper.v(this.buttonTheme.domainKey + "." + this.buttonTheme.colorKey + ".normal");
              L.setNodeColorWithOpacity(this.largeSprite.node, G);
            }
          };
          j.prototype.changeButtonPressedColor = function (G) {
            if (this.buttonTheme) {
              var V = x.uiAppearanceHelper.v(this.buttonTheme.domainKey + "." + this.buttonTheme.colorKey + ".normal");
              var Q = x.uiAppearanceHelper.v(this.buttonTheme.domainKey + "." + this.buttonTheme.colorKey + ".pressed");
              L.setNodeColorWithOpacity(this.largeSprite.node, G ? Q : V);
            }
          };
          j.prototype.interactableButtonColor = function (G) {
            if (this.buttonTheme) {
              var V = x.uiAppearanceHelper.v(this.buttonTheme.domainKey + "." + this.buttonTheme.colorKey + ".normal");
              var Q = x.uiAppearanceHelper.v(this.buttonTheme.domainKey + "." + this.buttonTheme.colorKey + ".disabled");
              L.setNodeColorWithOpacity(this.largeSprite.node, G ? V : Q);
            }
          };
          __decorate([C(cc.Sprite)], j.prototype, "largeSprite", undefined);
          __decorate([C(cc.SpriteFrame)], j.prototype, "largeSoundOnIcon", undefined);
          __decorate([C(cc.SpriteFrame)], j.prototype, "largeSoundOffIcon", undefined);
          return __decorate([k], j);
        }(T.default);
        K.default = u;
        cc._RF.pop();
      }
    }, {
      SoundButton: "SoundButton",
      UIAppearanceHelper: "UIAppearanceHelper",
      Utils: "Utils"
    }],
    LateAssetConfig: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "5d24d/GWolJbqwR5IfZUeJ0", "LateAssetConfig")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        K.lateAssetConfig = undefined;
        K.lateAssetConfig = [];
        cc._RF.pop();
      }
    }, {}],
    LaunchConfig: [function (Z, I) {
      'use strict';

      if (!cc._RF.push(I, "9687e72GwxLXpeDvVqr6s0O", "LaunchConfig")) {
        var R = System.get("bvframework").LaunchConfig;
        for (var K in R) {
          I.exports[K] = R[K];
        }
        I.exports.__esModule = true;
        cc._RF.pop();
      }
    }, {}],
    ListViewCellUpdateAnim: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "5502dsWooBCr7Ubvh4+KVSO", "ListViewCellUpdateAnim")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = cc._decorator.ccclass;
        var x = function () {
          function L() {}
          L.prototype.layoutDuration = function () {
            return 0.5;
          };
          L.prototype.layoutDelay = function () {
            return 0.5;
          };
          L.prototype.updateCellAmimation = function () {};
          L.prototype.animationEnd = function () {};
          return __decorate([T], L);
        }();
        K.default = x;
        cc._RF.pop();
      }
    }, {}],
    ListViewEnum: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "1db1bgDOdFP2LjHMP1kDfIt", "ListViewEnum")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        K.cellUpdateAction = K.scrollPosition = undefined;
        (function (T) {
          T[T.scrollPositionTop = 0] = "scrollPositionTop";
          T[T.scrollPositionMiddle = 1] = "scrollPositionMiddle";
          T[T.scrollPositionBottom = 2] = "scrollPositionBottom";
        })(K.scrollPosition ||= {});
        (function (T) {
          T[T.cellUpdateActionInsert = 0] = "cellUpdateActionInsert";
          T[T.cellUpdateActionRemove = 1] = "cellUpdateActionRemove";
          T[T.cellUpdateActionUpdate = 2] = "cellUpdateActionUpdate";
        })(K.cellUpdateAction ||= {});
        cc._RF.pop();
      }
    }, {}],
    ListView: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "3d710qNmRNP1LLRNNBcLNnF", "ListView")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("ListViewEnum");
        var x = cc._decorator;
        var L = x.ccclass;
        var D = x.property;
        var k = function (p) {
          function j() {
            var N = p !== null && p.apply(this, arguments) || this;
            N.view = undefined;
            N.contentWidget = undefined;
            N._nodePools = {};
            N._templates = {};
            N._visibleItems = [];
            N._firstPosition = 0;
            N._selectScrollPosition = 0;
            N._cellCount = 0;
            N._estimateCellHeight = 0;
            N._shouldIgnoreContentEvent = false;
            N._isReloadPending = false;
            N._disableScroll = false;
            N._dataSource = undefined;
            return N;
          }
          var G = {
            get: function () {
              return this._nodePools;
            },
            enumerable: false,
            configurable: true
          };
          var V = {
            get: function () {
              return this._templates;
            },
            enumerable: false,
            configurable: true
          };
          var Q = {
            get: function () {
              return this._visibleItems;
            },
            enumerable: false,
            configurable: true
          };
          __extends(j, p);
          Object.defineProperty(j.prototype, "nodePools", G);
          Object.defineProperty(j.prototype, "templates", V);
          Object.defineProperty(j.prototype, "visibleCells", Q);
          j.prototype.onLoad = function () {
            this.content.originY = this.content.y;
          };
          j.prototype.start = function () {
            p.prototype.start.call(this);
            cc.director.once(cc.Director.EVENT_AFTER_DRAW, this._disableTopWidget, this);
          };
          j.prototype.onDisable = function () {
            p.prototype.onDisable.call(this);
            this.content.off("position-changed", this._onContentMoved, this);
            this.node.off("scroll-to-top", this._scrollToTop, this);
            this.node.off("scroll-to-bottom", this._scrollToBottom, this);
            this.node.off("scroll-ended", this._scrollEnded, this);
            this.node.off("scrolling", this._whenScrolling, this);
            this.node.off("size-changed", this._onSizeChanged, this);
          };
          j.prototype.onEnable = function () {
            p.prototype.onEnable.call(this);
            this.content.on("position-changed", this._onContentMoved, this);
            this.node.on("scroll-to-top", this._scrollToTop, this);
            this.node.on("scroll-to-bottom", this._scrollToBottom, this);
            this.node.on("scroll-ended", this._scrollEnded, this);
            this.node.on("scrolling", this._whenScrolling, this);
            this.node.on("size-changed", this._onSizeChanged, this);
            if (this._isReloadPending) {
              this.reloadData();
              this._isReloadPending = false;
            }
          };
          j.prototype.viewWillLayoutSubviews = function () {};
          j.prototype.viewDidLayoutSubviews = function () {
            var N = this.node.width;
            var Y = this.node.height;
            this.view.setContentSize(N, Y);
            this.content.width = N;
            while (this._shouldPushBottom()) {
              this._pushAtBottom();
            }
            while (this._shouldPopTop()) {
              this._popFromTop();
            }
            while (this._shouldPushTop()) {
              this._pushAtTop();
            }
            while (this._shouldPopBottom()) {
              this._popFromBottom();
            }
          };
          j.prototype.setDataSource = function (N) {
            this._dataSource = N;
          };
          j.prototype.register = function (N, Y, W) {
            if (this.nodePools[N]) ;else if (Y) {
              var q;
              q = W ? new cc.NodePool(W) : new cc.NodePool();
              this.templates[N] = Y;
              this.nodePools[N] = q;
            }
          };
          j.prototype.dequeueReusableItem = function (N) {
            var Y;
            var W = this.nodePools[N];
            if (W) {
              if (!(Y = W.get())) {
                var q = this.templates[N];
                Y = cc.instantiate(q);
              }
              Y.lv_type = N;
            }
            return Y;
          };
          j.prototype.reloadData = function () {
            var N = this;
            if (this._dataSource) {
              if (this._isOnLoadCalled) {
                this.stopAutoScroll();
                var Y = this._visibleItems;
                var W = this._cellCount = this._dataSource.getCount(this);
                var q = 0;
                var z = 0;
                var A = 0;
                if (Y && Y.length && Y.length > 0) {
                  q = (Z0 = Y[0]).listViewIndex;
                  z = C(Z0);
                  A = Y[Y.length - 1].listViewIndex;
                }
                this._shouldIgnoreContentEvent = true;
                if (Y && Y.length && (W === 0 || A >= W)) {
                  for (var M = Y.length - 1; A >= W && (H = Y[M]);) {
                    if (H) {
                      this._enqueueReusableItem(H);
                    }
                    A--;
                    M--;
                  }
                }
                var E = this._visibleItems = [];
                if (q < W) {
                  for (var F = 0, b = (M = q, z); M < W && this._shouldPushBottom();) {
                    var H;
                    if (H = this._itemAtIndexInArr(M, Y)) {
                      this._enqueueReusableItem(H);
                    }
                    if (X = this._dataSource.getItem(this, M)) {
                      X.lv_type;
                      X.x = 0;
                      X.y = b - X.height * X.anchorY;
                      X.listViewIndex = M;
                      F += X.height;
                      this.content.addChild(X);
                      E.push(X);
                      b = u(X);
                      M++;
                    }
                  }
                  var w = this.content.originY - b - this.view.height;
                  this.content.height = Math.abs(b);
                  if (F < this.view.height && q > 0) {
                    M = q - 1;
                    for (var U = this.view.height - F, B = 0, P = z; M >= 0 && B < U;) {
                      if (X = this._dataSource.getItem(this, M)) {
                        X.lv_type;
                        X.x = 0;
                        X.y = P + X.height * (1 - X.anchorY);
                        X.listViewIndex = M;
                        B += X.height;
                        this.content.addChild(X);
                        E.unshift(X);
                        P = C(X);
                        M--;
                      }
                    }
                    this.content.runAction(cc.sequence(cc.moveTo(0.2, cc.v2(0, w)), cc.callFunc(function () {
                      N.content.y = w;
                      N.content.oldY = w;
                      N._shouldIgnoreContentEvent = false;
                      N._finishReload();
                    })));
                  } else {
                    this._shouldIgnoreContentEvent = false;
                    this._finishReload();
                  }
                } else {
                  F = 0;
                  M = W - 1;
                  P = -W * this._estimateCellHeight;
                  while (M >= 0 && F < this.view.height) {
                    var X;
                    if (X = this._dataSource.getItem(this, M)) {
                      X.lv_type;
                      X.x = 0;
                      X.y = P + X.height * (1 - X.anchorY);
                      X.listViewIndex = M;
                      F += X.height;
                      this.content.addChild(X);
                      E.unshift(X);
                      P = C(X);
                      M--;
                    }
                  }
                  U = 0;
                  if (F > this.view.height) {
                    U = F - this.view.height;
                  } else if (F < this.view.height) {
                    this._requestLayout(true);
                  }
                  var J = this.content.originY + U;
                  this.content.runAction(cc.sequence(cc.moveTo(0.2, cc.v2(0, J)), cc.callFunc(function () {
                    N.content.y = J;
                    N.content.oldY = J;
                    N._shouldIgnoreContentEvent = false;
                    N._finishReload();
                  })));
                }
                if (E.length && E.length > 0) {
                  var Z0 = E[0];
                  var Z1 = E[E.length - 1];
                  this._estimateCellHeight = (C(Z0) - u(Z1)) / (Z1.listViewIndex - Z0.listViewIndex + 1);
                  this.content.height = this._estimateCellHeight * W;
                }
              } else {
                this._isReloadPending = true;
              }
            }
          };
          j.prototype.scrollToRow = function (N, Y, W) {
            var q = this;
            if (Y === undefined) {
              Y = T.scrollPosition.scrollPositionTop;
            }
            if (W === undefined) {
              W = true;
            }
            this.stopAutoScroll();
            var S = this.content.y;
            if (!(N < 0) && !(N >= this._cellCount)) {
              var z = this._visibleItems;
              if (z && z.length && !(z.length <= 0)) {
                this.content.off("position-changed", this._onContentMoved, this);
                var f = this._selectScrollPosition = N;
                z = this._preloadCells(f, z);
                this._visibleItems = z;
                if (z[0].listViewIndex === 0) {
                  this._requestLayout(true);
                }
                var A;
                var M;
                var E = this.itemAtIndex(N);
                var F = z.indexOf(E);
                var b = 0;
                M = Y === T.scrollPosition.scrollPositionTop ? 0 : Y === T.scrollPosition.scrollPositionMiddle ? this.view.height / 2 - E.height * E.anchorY : this.view.height;
                if (Y === T.scrollPosition.scrollPositionBottom) {
                  b = (b = M - (H = this._calculateIfReachHeight(F, z, M, false))) >= 0 ? b : 0;
                  A = this.content.originY + Math.abs(E.y) + E.height * E.anchorY - M + b;
                } else if (Y === T.scrollPosition.scrollPositionTop) {
                  var H = this._calculateIfReachHeight(F, z, this.view.height - M, true);
                  b = (b = this.view.height - M - H) >= 0 ? b : 0;
                  A = this.content.originY + Math.abs(E.y) - E.height * E.anchorY - M - b;
                } else {
                  H = this._calculateIfReachHeight(F, z, this.view.height - M, true);
                  if ((b = this.view.height - M - H) <= 0) {
                    b = M - (H = this._calculateIfReachHeight(F - 1, z, M, false));
                  }
                  b = b >= 0 ? b : 0;
                  A = this.content.originY + Math.abs(E.y) - E.height * E.anchorY - M - b;
                }
                if (S === (A = A >= this.content.originY ? A : this.content.originY)) {
                  this.content.y = A;
                  this.content.oldY = A;
                  this._popAllInvisibleItems(f);
                  this.content.on("position-changed", this._onContentMoved, this);
                  return;
                }
                if (W) {
                  this.content.runAction(cc.sequence(cc.moveTo(0.2, cc.v2(this.content.x, A)), cc.callFunc(function () {
                    q.content.y = A;
                    q.content.oldY = A;
                    q._popAllInvisibleItems(f);
                    q.content.on("position-changed", q._onContentMoved, q);
                  })));
                } else {
                  this.content.y = A;
                  this.content.oldY = A;
                  this._popAllInvisibleItems(f);
                  this.content.on("position-changed", this._onContentMoved, this);
                }
              }
            }
          };
          j.prototype.visibleItems = function () {
            return this._visibleItems;
          };
          j.prototype.itemAtIndex = function (N) {
            return this._itemAtIndexInArr(N, this._visibleItems);
          };
          j.prototype.insertCellAtIndex = function (N, Y) {
            var W = this;
            if (Y === undefined) {
              Y = true;
            }
            if (!(N > this._cellCount)) {
              this.stopAutoScroll();
              this._cellCount += 1;
              this.content.height = this._estimateCellHeight * this._cellCount;
              var q = this.itemAtIndex(N);
              var S = this._visibleItems;
              var z = this._cellUpdateAnimCallback;
              if (!q) {
                var f = S[0];
                if (f.listViewIndex > N) {
                  this._updateCellsListIndex(0, f.listViewIndex + 1);
                } else if (this._shouldPushBottom()) {
                  this._pushAtBottom();
                }
                if (z) {
                  z.updateCellAmimation(null, T.cellUpdateAction.cellUpdateActionInsert);
                }
                if (z) {
                  z.animationEnd();
                }
                return;
              }
              var A = S.indexOf(q);
              var M = C(q);
              var E = this._dataSource.getItem(this, N);
              E.x = 0;
              E.y = M - E.height * E.anchorY;
              E.listViewIndex = N;
              this.content.addChild(E);
              S.splice(A, 0, E);
              M = u(E);
              this._updateCellsListIndex(A + 1, N + 1);
              if (z) {
                z.updateCellAmimation(E, T.cellUpdateAction.cellUpdateActionInsert);
              }
              this._updateCells(A + 1, M, T.cellUpdateAction.cellUpdateActionInsert, Y, function () {
                while (W._shouldPopBottom()) {
                  W._popFromBottom();
                }
                W._resizeContentHeight();
                W._isStartUpdateCell = false;
              });
            }
          };
          j.prototype.removeCellAtIndex = function (N, Y) {
            var W = this;
            if (Y === undefined) {
              Y = true;
            }
            if (!(N >= this._cellCount)) {
              var q = this._visibleItems;
              this._cellCount -= 1;
              var S = this.itemAtIndex(N);
              var z = this._cellUpdateAnimCallback;
              if (!S) {
                var f = q[0];
                if (f.listViewIndex > N) {
                  this._updateCellsListIndex(0, f.listViewIndex - 1);
                }
                if (z) {
                  z.updateCellAmimation(null, T.cellUpdateAction.cellUpdateActionRemove);
                }
                if (z) {
                  z.animationEnd();
                }
                return;
              }
              this.stopAutoScroll();
              var A = q.indexOf(S);
              var M = C(S);
              q.splice(A, 1);
              this._updateCellsListIndex(A, N);
              if (this._cellUpdateAnimCallback) {
                z.updateCellAmimation(S, T.cellUpdateAction.cellUpdateActionRemove, function () {
                  W._enqueueReusableItem(S);
                  S.removeFromParent();
                });
              } else {
                this._enqueueReusableItem(S);
                S.removeFromParent();
              }
              this._updateCells(A, M, T.cellUpdateAction.cellUpdateActionRemove, Y, function () {
                while (W._shouldPushTop()) {
                  W._pushAtTop();
                }
                while (W._shouldPushBottom()) {
                  W._pushAtBottom();
                }
                W._resizeContentHeight();
                W._isStartUpdateCell = false;
              });
            }
          };
          j.prototype.updateCellAtIndex = function (N, Y) {
            var W = this;
            if (Y === undefined) {
              Y = true;
            }
            var q = this.itemAtIndex(N);
            if (q) {
              var S = this._visibleItems;
              var z = S.indexOf(q);
              var f = C(q);
              var A = q.height;
              var M = this._dataSource.getItem(this, N);
              if (M && (this._enqueueReusableItem(q), M.x = 0, M.y = f - M.height * M.anchorY, M.listViewIndex = N, this.content.addChild(M), S[z] = M, A !== M.height)) {
                f = u(M);
                this._updateCells(z + 1, f, T.cellUpdateAction.cellUpdateActionUpdate, Y, function () {
                  if (A < M.height) {
                    while (W._shouldPopBottom()) {
                      W._popFromBottom();
                    }
                  } else {
                    while (W._shouldPushBottom()) {
                      W._pushAtBottom();
                    }
                  }
                  W._resizeContentHeight();
                  W._isStartUpdateCell = false;
                });
              }
            }
          };
          j.prototype.setScrollToTopCallback = function (N) {
            this._scrollToTopCallback = N;
          };
          j.prototype.setScrollToBottomCallback = function (N) {
            this._scrollToButtomCallback = N;
          };
          j.prototype.setScrollEndedCallback = function (N) {
            this._scrollToEndedCallback = N;
          };
          j.prototype.setScrollingCallback = function (N) {
            this._scrollingCallback = N;
          };
          j.prototype.setCellUpdateAnimCallback = function (N) {
            this._cellUpdateAnimCallback = N;
          };
          j.prototype._disableTopWidget = function () {
            if (this.contentWidget) {
              this.contentWidget.isAlignTop = false;
            }
          };
          j.prototype._enqueueReusableItem = function (N) {
            var Y;
            var W = N.lv_type;
            if (W) {
              Y = this.nodePools[W];
            }
            if (Y) {
              Y.put(N);
            }
          };
          j.prototype._resizeContentHeight = function () {
            var N = this._visibleItems;
            if (N.length > 0) {
              var Y = N[N.length - 1];
              var W = N[0];
              var q = Math.abs(Y.y) + Y.height * Y.anchorY;
              if (q > this.content.height) {
                this.content.height = q;
              } else if (q < this.view.height && W.listViewIndex === 0) {
                this.content.y = this.content.originY;
                this.content.oldY = this.content.originY;
                this.content.height = q;
              } else if (Y.listViewIndex === this._cellCount - 1) {
                this.content.height = q;
              }
            } else {
              this.content.height = 0;
            }
          };
          j.prototype._requestLayoutIfNecessary = function () {
            var N = this._visibleItems;
            if (N && N.length && !(N.length <= 0)) {
              var Y = N[0];
              var W = C(Y);
              var q = N[N.length - 1];
              if (Y.listViewIndex !== 0 || W === 0) {
                if (W > -this._estimateCellHeight && Y.listViewIndex > 1) {
                  this._adjustPosition(true);
                } else if (q.listViewIndex === this._cellCount - 1 && Math.abs(q.y) + q.height * q.anchorY < this.content.height) {
                  this._adjustPosition(true);
                } else if (Math.abs(q.y) + q.height * q.anchorY > this.content.height) {
                  this._adjustPosition(false);
                }
              } else {
                this._adjustPosition(true);
              }
            }
          };
          j.prototype._adjustPosition = function (N, Y = true) {
            this._shouldIgnoreContentEvent = true;
            this._requestLayout(N);
            this._shouldIgnoreContentEvent = false;
            this._autoScrollStartPosition.y = this.content.y;
            if (Y) {
              this._continueAutoScroll();
            }
          };
          j.prototype._requestLayout = function (N) {
            var Y = this._visibleItems;
            if (Y && Y.length && !(Y.length <= 0)) {
              this.stopAutoScroll();
              if (N) {
                var W = -Y[0].listViewIndex * this._estimateCellHeight;
                for (var q = 0; q < Y.length;) {
                  (z = Y[q]).x = 0;
                  z.y = W - z.height * z.anchorY;
                  W = u(z);
                  q++;
                }
              } else {
                var S = -Y[Y.length - 1].listViewIndex * this._estimateCellHeight;
                for (q = Y.length - 1; q >= 0;) {
                  var z;
                  (z = Y[q]).x = 0;
                  z.y = S - z.height * z.anchorY + z.height;
                  S = C(z);
                  q--;
                }
              }
              var f = Y[0];
              var A = this.content.originY - u(f);
              this.content.y = A;
              this.content.oldY = A;
              this._resizeContentHeight();
            }
          };
          j.prototype._continueAutoScroll = function () {
            this._autoScrolling = true;
            this._autoScrollTotalTime = this._storedAutoScrollLeftTime;
            this._autoScrollAccumulatedTime = 0;
            this._autoScrollTargetDelta = this._leftScrollDelta;
          };
          j.prototype._shouldPushBottom = function () {
            var N = false;
            var Y = this._visibleItems;
            if (Y.length > 0) {
              var W = Y[Y.length - 1];
              if (W.listViewIndex === this._cellCount - 1) {
                return false;
              }
              var q = u(W);
              var S = this.content.convertToWorldSpaceAR(cc.v2(0, q));
              var z = u(this.view);
              var f = this.view.parent.convertToWorldSpaceAR(cc.v2(0, z));
              if (S.y >= f.y) {
                N = true;
              }
            } else if (Y.length === 0 && this._cellCount > 0) {
              N = true;
            }
            return N;
          };
          j.prototype._shouldPushTop = function () {
            var N = false;
            var Y = this._visibleItems;
            if (Y.length > 0) {
              var W = Y[0];
              if (W.listViewIndex === 0) {
                return false;
              }
              var q = C(W);
              var S = this.content.convertToWorldSpaceAR(cc.v2(0, q));
              var z = C(this.view);
              var f = this.view.parent.convertToWorldSpaceAR(cc.v2(0, z));
              if (S.y <= f.y) {
                N = true;
              }
            }
            return N;
          };
          j.prototype._shouldPopBottom = function () {
            var N = false;
            var Y = this._visibleItems;
            if (Y.length > 1) {
              var W = C(Y[Y.length - 1]);
              var q = this.content.convertToWorldSpaceAR(cc.v2(0, W));
              var S = u(this.view);
              var z = this.view.parent.convertToWorldSpaceAR(cc.v2(0, S));
              if (q.y < z.y) {
                N = true;
              }
            }
            return N;
          };
          j.prototype._shouldPopTop = function () {
            var N = false;
            var Y = this._visibleItems;
            if (Y.length > 1) {
              var W = u(Y[0]);
              var q = this.content.convertToWorldSpaceAR(cc.v2(0, W));
              var S = C(this.view);
              var z = this.view.parent.convertToWorldSpaceAR(cc.v2(0, S));
              if (q.y > z.y) {
                N = true;
              }
            }
            return N;
          };
          j.prototype._pushAtBottom = function () {
            var N = this._visibleItems;
            if (N.length > 0) {
              var Y = this._cellCount;
              var W = N[N.length - 1];
              var q = W.listViewIndex + 1;
              if (q < Y) {
                var S = this._dataSource.getItem(this, q);
                S.lv_type;
                var z = u(W);
                S.x = 0;
                S.y = z - S.height * S.anchorY;
                S.listViewIndex = q;
                this.content.addChild(S);
                N.push(S);
              }
            }
          };
          j.prototype._pushAtTop = function () {
            var N = this._visibleItems;
            if (N.length > 0) {
              var Y = N[0];
              var W = Y.listViewIndex - 1;
              if (W >= 0) {
                var q = this._dataSource.getItem(this, W);
                q.lv_type;
                var S = C(Y);
                q.x = 0;
                q.y = S - q.height * q.anchorY + q.height;
                q.listViewIndex = W;
                this.content.addChild(q);
                N.unshift(q);
              }
            }
          };
          j.prototype._popFromTop = function () {
            var N = this._visibleItems;
            if (N.length > 0) {
              var Y = N[0];
              this._enqueueReusableItem(Y);
              N.shift();
            }
          };
          j.prototype._popFromBottom = function () {
            var N = this._visibleItems;
            if (N.length > 0) {
              var Y = N[N.length - 1];
              this._enqueueReusableItem(Y);
              N.pop();
            }
          };
          j.prototype._popAllTopInvisibleItems = function () {
            var N = this._visibleItems;
            if (N.length > 0) {
              for (var Y = 0; Y < N.length && this._shouldPopTop();) {
                this._popFromTop();
                Y++;
              }
            }
          };
          j.prototype._popAllBottomInvisibleItems = function () {
            var N = this._visibleItems;
            if (N.length > 0) {
              for (var Y = N[N.length - 1]; Y >= 0 && this._shouldPopBottom();) {
                this._popFromBottom();
                Y--;
              }
            }
          };
          j.prototype._popAllInvisibleItems = function (N) {
            this._popAllTopInvisibleItems();
            this._popAllBottomInvisibleItems();
            var Y = this._visibleItems;
            var W = this.itemAtIndex(N);
            var q = Y.indexOf(W);
            if (q !== -1) {
              var S = q;
              var z = [];
              var A = -1;
              var M = -1;
              if (Y.length > S) {
                var E = Y[S];
                var F = E.listViewIndex;
                S++;
                z.push(E);
                while (S < Y.length) {
                  if ((b = (U = Y[S]).listViewIndex) - F != 1) {
                    A = b;
                    break;
                  }
                  z.push(U);
                  S++;
                  F = b;
                }
                S = q - 1;
                F = E.listViewIndex;
                while (S >= 0) {
                  var b;
                  if (F - (b = (U = Y[S]).listViewIndex) != 1) {
                    M = b;
                    break;
                  }
                  z.unshift(U);
                  S--;
                  F = b;
                }
              }
              if (A >= 0) {
                var H = this.itemAtIndex(A);
                for (var w = Y.indexOf(H); Y.length > w;) {
                  var U = Y[w];
                  this._enqueueReusableItem(U);
                  w++;
                }
              }
              if (M >= 0) {
                var B = this.itemAtIndex(M);
                for (var P = Y.indexOf(B); P >= 0;) {
                  U = Y[P];
                  this._enqueueReusableItem(U);
                  P--;
                }
              }
              this._visibleItems = z;
            }
          };
          j.prototype._createOrReuseCellFromTopToBottom = function (N, Y) {
            var W = this._visibleItems;
            for (var q = W[0], S = W[W.length - 1], z = N, f = 0, A = []; z < this._cellCount && f <= Y && z !== q.listViewIndex && z !== S.listViewIndex;) {
              var M = this._dataSource.getItem(this, z);
              M.listViewIndex = z;
              this.content.addChild(M);
              A.push(M);
              f += M.height;
              z++;
            }
            return A;
          };
          j.prototype._createOrReuseCellFromBottomToTop = function (N, Y) {
            var W = this._visibleItems;
            for (var q = W[0], S = W[W.length - 1], z = N, f = 0, A = []; z >= 0 && f <= Y && z !== q.listViewIndex && z !== S.listViewIndex;) {
              var M = this._dataSource.getItem(this, z);
              M.listViewIndex = z;
              this.content.addChild(M);
              A.unshift(M);
              f += M.height;
              z--;
            }
            return A;
          };
          j.prototype._layoutCellsFromTopToBottom = function (N, Y) {
            if (!Y || !Y.length || Y.length <= 0) {
              return null;
            }
            for (var W = 0; W < Y.length; W++) {
              var q = Y[W];
              q.x = 0;
              q.y = N - q.height * q.anchorY;
              N -= q.height;
            }
            return Y;
          };
          j.prototype._layoutCellsFromBottomToTop = function (N, Y) {
            if (!Y || !Y.length || Y.length <= 0) {
              return null;
            }
            for (var W = Y.length - 1; W >= 0; W--) {
              var q = Y[W];
              q.x = 0;
              q.y = N + q.height * q.anchorY;
              N += q.height;
            }
            return Y;
          };
          j.prototype._calculateIfReachHeight = function (N, Y, W, q) {
            var S = N;
            var z = 0;
            if (q) {
              for (var f = S; f < Y.length && !((z += Y[f].height) >= W); f++);
            } else {
              for (f = S; f >= 0 && !((z += Y[f].height) >= W); f--);
            }
            return z;
          };
          j.prototype._preloadCells = function (N, Y) {
            var W;
            var q;
            var S = Y[0];
            var z = Y[Y.length - 1];
            var f = this.view.height;
            if (N >= S.listViewIndex && N <= z.listViewIndex) {
              W = this._createOrReuseCellFromTopToBottom(z.listViewIndex + 1, f);
              q = this._createOrReuseCellFromBottomToTop(S.listViewIndex - 1, f);
              W = this._layoutCellsFromTopToBottom(u(z), W);
              if (q = this._layoutCellsFromBottomToTop(C(S), q)) {
                Y = q.concat(Y);
              }
              if (W) {
                Y = Y.concat(W);
              }
            } else {
              var A = N;
              W = this._createOrReuseCellFromTopToBottom(A, f);
              A = N;
              var M = undefined;
              M = (q = this._createOrReuseCellFromBottomToTop(A - 1, f)) && W ? q.concat(W) : q || W;
              if (N > z.listViewIndex) {
                M = this._layoutCellsFromTopToBottom(u(z), M);
                Y = Y.concat(M);
              } else if (M = this._layoutCellsFromBottomToTop(C(S), M)) {
                Y = M.concat(Y);
              }
            }
            return Y;
          };
          j.prototype._isLastCellLoaded = function () {
            var N = this._visibleItems;
            return !(N.length > 0) || N[N.length - 1].listViewIndex === this._cellCount - 1;
          };
          j.prototype._itemAtIndexInArr = function (N, Y) {
            if (!Y || !Y.length || Y.length <= 0) {
              return null;
            }
            var W = null;
            for (var q = 0; q < Y.length;) {
              var S = Y[q];
              if (S.listViewIndex === N) {
                W = S;
                break;
              }
              q++;
            }
            return W;
          };
          j.prototype._finishReload = function () {
            this._resizeContentHeight();
            if (this._dataSource.didReloadData) {
              this._dataSource.didReloadData(this);
            }
          };
          j.prototype._updateCells = function (N, Y, W, q, S) {
            var z = this;
            var f = this._cellUpdateAnimCallback;
            this._isStartUpdateCell = true;
            var A;
            for (var M = this._visibleItems, E = f ? f.layoutDuration() : 0.5, F = f ? f.layoutDelay(W) : 0, b = function (U) {
                var B = M[U];
                var P = B.y;
                var X = Y - B.height * B.anchorY;
                Y = X - B.height * B.anchorY;
                if (U === M.length - 1) {
                  A = Math.abs(X) + B.height * B.anchorY;
                }
                if (P !== X && q) {
                  B.runAction(cc.sequence(cc.delayTime(F), cc.moveTo(E, cc.v2(B.x, X)), cc.callFunc(function () {
                    B.y = X;
                    if (U === M.length - 1) {
                      z._LayoutUpdatedCells(A);
                      if (S) {
                        S();
                      }
                      if (f) {
                        f.animationEnd();
                      }
                    }
                  })));
                } else {
                  B.y = X;
                  if (U === M.length - 1) {
                    H._LayoutUpdatedCells(A);
                    if (S) {
                      S();
                    }
                    if (f) {
                      f.animationEnd();
                    }
                  }
                }
              }, H = this, w = N; w < M.length; w++) {
              b(w);
            }
            if (N >= M.length) {
              if (S) {
                S();
              }
              if (f) {
                f.animationEnd();
              }
            }
          };
          j.prototype._LayoutUpdatedCells = function (N) {
            var Y = N + this.content.originY - this.content.y - this.view.height;
            if (Y < 0) {
              this.content.oldY += Y;
              this.content.y += Y;
            }
          };
          j.prototype._updateCellsListIndex = function (N, Y) {
            for (var W = this._visibleItems, q = N; q < W.length; q++) {
              W[q].listViewIndex = Y;
              Y += 1;
            }
          };
          j.prototype._onContentMoved = function () {
            var N = this.content;
            var Y = N.y - N.oldY;
            N.oldY = N.y;
            if (!this._shouldIgnoreContentEvent) {
              if (Y > 0) {
                while (this._shouldPushBottom()) {
                  this._pushAtBottom();
                }
                while (this._shouldPopTop()) {
                  this._popFromTop();
                }
              } else if (Y < 0) {
                while (this._shouldPushTop()) {
                  this._pushAtTop();
                }
                while (this._shouldPopBottom()) {
                  this._popFromBottom();
                }
              }
              this._requestLayoutIfNecessary();
            }
          };
          j.prototype._scrollToTop = function () {
            this._isScrollToTop = true;
          };
          j.prototype._scrollToBottom = function () {
            this._isScrollToBottom = true;
          };
          j.prototype._scrollEnded = function () {
            if (this._scrollToEndedCallback) {
              this._scrollToEndedCallback();
            }
          };
          j.prototype._whenScrolling = function () {
            var N = this._getHowMuchOutOfBoundary();
            if (this._scrollingCallback) {
              this._scrollingCallback(N.y);
            }
          };
          j.prototype._onSizeChanged = function () {
            this.viewDidLayoutSubviews();
          };
          j.prototype.stopAutoScroll = function () {
            if (this._shouldIgnoreContentEvent) {
              this._storedAutoScrollLeftTime = this._autoScrollTotalTime - this._autoScrollAccumulatedTime;
              var N = Math.min(1, this._autoScrollAccumulatedTime / this._autoScrollTotalTime);
              if (this._autoScrollAttenuate) {
                W = N;
                N = (W -= 1) * W * W * W * W + 1;
              }
              this._leftScrollDelta = (Y = 1 - N, this._autoScrollTargetDelta.mul(Y));
            }
            var Y;
            var W;
            p.prototype.stopAutoScroll.call(this);
          };
          j.prototype._processInertiaScroll = function () {
            var N = this;
            if (this._isScrollToTop && this._scrollToTopCallback) {
              var Y = this._getHowMuchOutOfBoundary();
              this._scrollToTopCallback(function () {
                N._isScrollToTop = false;
                N._startInertiaScroll(cc.v2(0, 0));
              }, Y);
            } else if (this._isScrollToBottom && this._scrollToButtomCallback && this._isLastCellLoaded()) {
              this._scrollToButtomCallback(function (W) {
                N._isScrollToBottom = false;
                var q = N._cellCount = N._dataSource.getCount(N);
                N.content.height = N._estimateCellHeight * q;
                var S = N._visibleItems;
                if (S && S.length && S.length > 0) {
                  var z = S[S.length - 1].listViewIndex;
                  for (N.content.off("position-changed", N._onContentMoved, N); z < q && N._shouldPushBottom();) {
                    N._pushAtBottom();
                    z += 1;
                  }
                  N._resizeContentHeight();
                  N.content.on("position-changed", N._onContentMoved, N);
                }
                if (W) {
                  N._processInertiaScroll();
                }
              });
            } else {
              this._isScrollToTop = false;
              this._isScrollToBottom = false;
              p.prototype._processInertiaScroll.call(this);
            }
          };
          j.prototype._handleMoveLogic = function (N) {
            if (!this._isStartUpdateCell) {
              p.prototype._handleMoveLogic.call(this, N);
            }
          };
          __decorate([D(cc.Node)], j.prototype, "view", undefined);
          __decorate([D(cc.Widget)], j.prototype, "contentWidget", undefined);
          return __decorate([L], j);
        }(cc.ScrollView);
        K.default = k;
        cc._RF.pop();
      }
      function C(p) {
        return p.y - p.height * p.anchorY + p.height;
      }
      function u(p) {
        return p.y - p.height * p.anchorY;
      }
    }, {
      ListViewEnum: "ListViewEnum"
    }],
    LoadingController: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "34a3aP50jNA1ItVjcX3dhLy", "LoadingController")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var x = I("BVFrameworkEnum");
        var L = I("SlotImageHandler");
        var D = I("Utils");
        var k = I("BaseLoadingController");
        var C = I("AudioAssetConfig");
        var j = I("GeneralAssetConfig");
        var G = I("LateAssetConfig");
        var V = I("BonusAssetConfig");
        var Q = I("NodePoolHandler");
        var N = I("GameConstant");
        var Y = I("FreeSpinWonController");
        var W = I("EffectItemRegisterHandler");
        var q = I("PayoutEffectFrontController");
        var z = I("PayoutEffectBackController");
        var A = cc._decorator;
        var M = A.ccclass;
        var E = A.property;
        var F = function (b) {
          function H() {
            var w = b !== null && b.apply(this, arguments) || this;
            w.backgroundHolder = undefined;
            w.foregroundHolder = undefined;
            w.clickEffectHolder = undefined;
            w.slotControllerHolder = undefined;
            w.slotTintHolder = undefined;
            w.fastSpinHolder = undefined;
            w.spinButtonHolder = undefined;
            w.bigWinHolder = undefined;
            w.totalWinHolder = undefined;
            w.bonusLoadingHolder = undefined;
            w.infoboardHolder = undefined;
            w.remainingFreeSpinHolder = undefined;
            w.freeSpinWonHolder = undefined;
            w.symbolPopOutButtonHolder = undefined;
            w.symbolPopOutDisplayHolder = undefined;
            w.symbolPopOutTintHolder = undefined;
            w.multiplierHolder = undefined;
            w.waysHolder = undefined;
            w.slowDropHolder = undefined;
            w.feature_buy_button_holder = undefined;
            w.feature_buy_dialog_holder = undefined;
            w.payoutEffectBackItem = undefined;
            w.payoutEffectFrontItem = undefined;
            w._completedCallback = undefined;
            w._isShowBonusLoading = false;
            w._isLateAssetsLoaded = false;
            w._hasBonusLoaded = false;
            w._bonusLoadingTexture = undefined;
            return w;
          }
          __extends(H, b);
          H.prototype.hasBonusLoaded = function () {
            return this._hasBonusLoaded;
          };
          H.prototype.setup = function (w) {
            b.prototype.setup.call(this, w);
            this._setupHolderZIndex();
          };
          H.prototype.progressCallback = function (w, U) {
            if (this._isShowBonusLoading) {
              this.generalControllers.bonusLoadingController.updateProgress(w, U);
            } else {
              b.prototype.progressCallback.call(this, w, U);
            }
          };
          H.prototype._setupHolderZIndex = function () {
            this.spinButtonHolder.zIndex = x.EN_GAME_LAYER_Z_INDEX_HIGH + 50;
            this.settingMenuHolder.zIndex = x.EN_GAME_LAYER_Z_INDEX_HIGH + 51;
            this.feature_buy_dialog_holder.zIndex = x.EN_GAME_LAYER_Z_INDEX_HIGH + 52;
            this.bonusLoadingHolder.zIndex = x.EN_GAME_LAYER_Z_INDEX_HIGH + 53;
            this.settingMenuFooterHolder.zIndex = x.EN_GAME_LAYER_Z_INDEX_HIGH + 54;
            this.bigWinHolder.zIndex = x.EN_GAME_LAYER_Z_INDEX_HIGH + 55;
            this.totalWinHolder.zIndex = x.EN_GAME_LAYER_Z_INDEX_HIGH + 56;
          };
          H.prototype.loadAllBundle = function (w) {
            shell.setProgressVisible(true);
            this._completedCallback = w;
            this._isShowBonusLoading = false;
            var U = C.getAudioAssetConfig();
            var B = [].concat(j.generalAssetConfig, U, V.bonusAssetConfig);
            if (!this._isLateAssetsLoaded) {
              this._isLateAssetsLoaded = true;
              B = B.concat(G.lateAssetConfig);
            }
            this.loadBundle(B, this._onAllTaskCompleteCallback.bind(this));
          };
          H.prototype.loadBonusBundle = function (w) {
            this._completedCallback = w;
            this._isShowBonusLoading = true;
            var U = [].concat(V.bonusAssetConfig);
            if (!this._isLateAssetsLoaded) {
              this._isLateAssetsLoaded = true;
              U = U.concat(G.lateAssetConfig);
            }
            var B = this._bonusTaskComplete.bind(this);
            this.loadBundle(U, B);
          };
          H.prototype.loadGeneralBundle = function (w) {
            var U = this;
            shell.setProgressVisible(true);
            this._completedCallback = w;
            this._isShowBonusLoading = false;
            var B = C.getAudioAssetConfig();
            var P = [].concat(j.generalAssetConfig, B);
            if (P.length) {
              this.loadBundle(P, function (X) {
                U._normalTaskComplete(X);
                if (w) {
                  w();
                }
              });
            } else if (w) {
              w();
            }
          };
          H.prototype._onAllTaskCompleteCallback = function (w) {
            this._normalTaskComplete(w);
            this._bonusTaskComplete(w);
            var U = this._completedCallback;
            this._completedCallback = undefined;
            if (U) {
              U();
            }
          };
          H.prototype._normalTaskComplete = function (X) {
            var J = X.click_effect;
            var Z0 = X.spin_button_controller;
            var Z1 = X.slot_controller;
            var Z2 = X.slot_tint_controller;
            var Z3 = X.background_controller;
            var Z4 = X.fast_spin_controller;
            var Z5 = X.foreground_controller;
            var Z6 = X.infoboard_controller;
            var Z7 = X.bonus_loading_controller;
            var Z8 = X.big_win_controller;
            var Z9 = X.multiplier_controller;
            var ZZ = X.symbol_payout_controller;
            var ZI = X.ways_controller;
            var Zd = X.slow_drop_effect_controller;
            var ZO = X.feature_buy_button_controller;
            var ZR = X.feature_buy_controller;
            var ZK = X.big_win_texture;
            var Zg = X.bonus_loading_texture;
            var ZT = X.info_message_texture;
            var Zx = X.feature_buy_text;
            var ZL = X.main_text;
            this._setupSymbolImage(X);
            this._setUpGameEffectItem();
            var ZD = k.instantiateController(J.result, "ClickEffectController", this.clickEffectHolder);
            this.generalControllers.clickEffectController = ZD;
            var Zn = k.instantiateController(Z0.result, "WBSSpinButtonController", this.spinButtonHolder);
            this.generalControllers.spinButtonController = Zn;
            var Zk = k.instantiateController(Z2.result, "SlotTintController", this.slotTintHolder);
            this.generalControllers.slotTintController = Zk;
            var Zt = k.instantiateController(Z3.result, "BackgroundController", this.backgroundHolder);
            this.generalControllers.backgroundController = Zt;
            var Zi = k.instantiateController(Z4.result, "FastSpinController", this.fastSpinHolder);
            this.generalControllers.fastSpinController = Zi;
            var ZC = k.instantiateController(Z5.result, "ForegroundController", this.foregroundHolder);
            var Zu = ZL.result;
            var Zc = {
              leftWay: Zu.getSpriteFrame("ways_left"),
              rightWay: Zu.getSpriteFrame("ways_right")
            };
            ZC.init(Zc);
            this.generalControllers.foregroundController = ZC;
            var Zp = k.instantiateController(Z8.result, "WBSBigWinController", this.bigWinHolder);
            var Zj = ZK.result;
            Zp.init({
              bigWin: Zj.getSpriteFrame("bw"),
              megaWin: Zj.getSpriteFrame("mw"),
              superMegaWin: Zj.getSpriteFrame("smw")
            });
            this.generalControllers.bigWinController = Zp;
            var Zl = k.instantiateController(Z6.result, "InfoBoardController", this.infoboardHolder);
            var Ze = ZT.result;
            var ZG = {
              normalSpinTips: [Ze.getSpriteFrame("info_1"), Ze.getSpriteFrame("info_2"), Ze.getSpriteFrame("info_3"), Ze.getSpriteFrame("info_4")],
              freeSpinTips: [Ze.getSpriteFrame("info_5")],
              freeSpinWonTip: Ze.getSpriteFrame("info_fs"),
              scatterRequestTip: Ze.getSpriteFrame("info_scatter"),
              winText: Ze.getSpriteFrame("info_win"),
              totalWinText: Ze.getSpriteFrame("info_tw")
            };
            Zl.init(ZG);
            this.generalControllers.infoboardController = Zl;
            var Za = k.instantiateController(ZO.result, "FeatureBuyButtonController", this.feature_buy_button_holder);
            var ZV = Zx.result;
            Za.setSpriteFrame(ZV.getSpriteFrame("fb_main"));
            this.generalControllers.featureBuyButtonController = Za;
            var ZQ = k.instantiateController(ZR.result, "FeatureBuyController", this.feature_buy_dialog_holder);
            var ZN = {
              featureBuyButtonController: Za,
              featureBuyText: Zx.result
            };
            ZQ.init(ZN);
            this.generalControllers.featureBuyController = ZQ;
            var ZY = k.instantiateController(Z7.result, "BonusLoadingController", this.bonusLoadingHolder);
            var ZW = Zg.result;
            this._bonusLoadingTexture = ZW;
            ZY.init({
              freeSpinTextSF: ZW.getSpriteFrame("fs"),
              startTextSF: ZW.getSpriteFrame("btn_start"),
              descTextSF: ZW.getSpriteFrame("bns_desc")
            });
            this.generalControllers.bonusLoadingController = ZY;
            var Zq = k.instantiateController(Z9.result, "MultiplierController", this.multiplierHolder);
            Zq.init(Zl.node);
            this.generalControllers.multiplierController = Zq;
            var ZS = k.instantiateController(ZZ.result, "SymbolPayoutController", this.symbolPopOutButtonHolder);
            ZS.setPopOutDisplayHolder(this.symbolPopOutDisplayHolder);
            ZS.setPopOutTintHolder(this.symbolPopOutTintHolder);
            this.generalControllers.symbolPayoutController = ZS;
            var Zz = k.instantiateController(ZI.result, "WaysController", this.waysHolder);
            Zz.setWaysText(Ze.getSpriteFrame("info_ways"));
            this.generalControllers.waysController = Zz;
            var Zf = k.instantiateController(Zd.result, "SlowDropEffectController", this.slowDropHolder);
            this.generalControllers.slowDropEffectController = Zf;
            var ZA = k.instantiateController(Z1.result, "WBSSlotController", this.slotControllerHolder);
            ZA.setupControllers(this.generalControllers);
            this.generalControllers.slotController = ZA;
          };
          H.prototype._bonusTaskComplete = function (w) {
            var U = w.free_spin_won_controller;
            var B = w.remaining_free_spin_controller;
            var P = w.remaining_free_spin_texture;
            var X = w.total_win_controller;
            var J = w.total_win_texture;
            if (B) {
              var Z0 = k.instantiateController(B.result, "RemainingFreeSpinController", this.remainingFreeSpinHolder);
              var Z1 = P.result;
              Z0.init({
                remainingFreeSpinSF: Z1.getSpriteFrame("rfs"),
                lastSpinRemainingSF: Z1.getSpriteFrame("lfs")
              });
              this.bonusControllers.remainingFreeSpinController = Z0;
              var Z2 = k.instantiateController(U.result, Y.default, this.remainingFreeSpinHolder);
              Z2.init(this._bonusLoadingTexture.getSpriteFrame("fs"));
              this.bonusControllers.freeSpinWonController = Z2;
              this._hasBonusLoaded = true;
            }
            var Z3 = J.result;
            var Z4 = k.instantiateController(X.result, "WBSTotalWinController", this.totalWinHolder);
            Z4.init({
              totalWinSF: Z3.getSpriteFrame("tw"),
              collectSF: Z3.getSpriteFrame("btn_collect"),
              freeSpinSF: Z3.getSpriteFrame("tw_fs")
            });
            Z4.setup();
            this.generalControllers.totalWinController = Z4;
            var Z5 = this._completedCallback;
            this._completedCallback = undefined;
            if (Z5) {
              Z5();
            }
          };
          H.prototype.releaseBonusBundle = function (w) {
            var U = this;
            if (this._hasBonusLoaded) {
              var B = [].concat(V.bonusAssetConfig);
              var P = this.bonusControllers;
              D.sequenceCallback(function (X) {
                P.remainingFreeSpinController.destroy();
                P.remainingFreeSpinController = undefined;
                P.freeSpinWonController.destroy();
                P.freeSpinWonController = undefined;
                U._hasBonusLoaded = false;
                X();
              }, function (X) {
                U.resourceLoader.releaseBundle(B, "Bonus");
                Q.nodePoolHandler.unregisterReusableItem(N.NodePoolName.RamainingFreeSpinUpgradeItem);
                X();
              })(w);
            } else if (w) {
              w();
            }
          };
          H.prototype._setupSymbolImage = function (w) {
            var U = w.symbol;
            var B = w.feature_symbol;
            var P = {};
            for (var X in w) {
              if (Object.prototype.hasOwnProperty.call(w, X)) {
                var J = w[X];
                if (J.config.type === sp.SkeletonData) {
                  P[X] = J.result;
                }
              }
            }
            var Z0 = U.result;
            var Z1 = B.result;
            var Z2 = {
              symbolAtlas: Z0,
              featureSymbolAtlas: Z1,
              spines: P
            };
            L.slotImageHandler.setup(Z2);
          };
          H.prototype._setUpGameEffectItem = function () {
            var w = {
              name: N.NodePoolName.PayoutEffectFrontItem,
              itemPrefab: this.payoutEffectFrontItem,
              handler: q.default,
              value: 30
            };
            var U = {
              name: N.NodePoolName.PayoutEffectBackItem,
              itemPrefab: this.payoutEffectBackItem,
              handler: z.default,
              value: 30
            };
            W.effectItemRegisterHandler.init([w, U]);
          };
          __decorate([E(cc.Node)], H.prototype, "backgroundHolder", undefined);
          __decorate([E(cc.Node)], H.prototype, "foregroundHolder", undefined);
          __decorate([E(cc.Node)], H.prototype, "clickEffectHolder", undefined);
          __decorate([E(cc.Node)], H.prototype, "slotControllerHolder", undefined);
          __decorate([E(cc.Node)], H.prototype, "slotTintHolder", undefined);
          __decorate([E(cc.Node)], H.prototype, "fastSpinHolder", undefined);
          __decorate([E(cc.Node)], H.prototype, "spinButtonHolder", undefined);
          __decorate([E(cc.Node)], H.prototype, "bigWinHolder", undefined);
          __decorate([E(cc.Node)], H.prototype, "totalWinHolder", undefined);
          __decorate([E(cc.Node)], H.prototype, "bonusLoadingHolder", undefined);
          __decorate([E(cc.Node)], H.prototype, "infoboardHolder", undefined);
          __decorate([E(cc.Node)], H.prototype, "remainingFreeSpinHolder", undefined);
          __decorate([E(cc.Node)], H.prototype, "freeSpinWonHolder", undefined);
          __decorate([E(cc.Node)], H.prototype, "symbolPopOutButtonHolder", undefined);
          __decorate([E(cc.Node)], H.prototype, "symbolPopOutDisplayHolder", undefined);
          __decorate([E(cc.Node)], H.prototype, "symbolPopOutTintHolder", undefined);
          __decorate([E(cc.Node)], H.prototype, "multiplierHolder", undefined);
          __decorate([E(cc.Node)], H.prototype, "waysHolder", undefined);
          __decorate([E(cc.Node)], H.prototype, "slowDropHolder", undefined);
          __decorate([E(cc.Node)], H.prototype, "feature_buy_button_holder", undefined);
          __decorate([E(cc.Node)], H.prototype, "feature_buy_dialog_holder", undefined);
          __decorate([E(cc.Prefab)], H.prototype, "payoutEffectBackItem", undefined);
          __decorate([E(cc.Prefab)], H.prototype, "payoutEffectFrontItem", undefined);
          return __decorate([M], H);
        }(k.default);
        K.default = F;
        cc._RF.pop();
      }
    }, {
      AudioAssetConfig: "AudioAssetConfig",
      BVFrameworkEnum: "BVFrameworkEnum",
      BaseLoadingController: "BaseLoadingController",
      BonusAssetConfig: "BonusAssetConfig",
      EffectItemRegisterHandler: "EffectItemRegisterHandler",
      FreeSpinWonController: "FreeSpinWonController",
      GameConstant: "GameConstant",
      GeneralAssetConfig: "GeneralAssetConfig",
      LateAssetConfig: "LateAssetConfig",
      NodePoolHandler: "NodePoolHandler",
      PayoutEffectBackController: "PayoutEffectBackController",
      PayoutEffectFrontController: "PayoutEffectFrontController",
      SlotImageHandler: "SlotImageHandler",
      Utils: "Utils"
    }],
    Main: [function (K, j, G) {
      'use strict';

      if (!cc._RF.push(j, "0ae50wCvn9MBav8tA9gRg+G", "Main")) {
        Object.defineProperty(G, "__esModule", {
          value: true
        });
        var Q = K("GameInitializationHandler");
        var Y = K("MultiResHandler");
        var W = K("NotifyHelper");
        var q = K("Utils");
        var z = K("GameEventHandler");
        var H = K("AnalyticsHelper");
        var U = K("TransactionStateMachineHandler");
        var X = K("UIAppearanceHelper");
        var J = K("WalletHelper");
        var Z0 = K("RequestHandler");
        var Z1 = K("SettingMenuHelper");
        var Z2 = K("SettingMenuHandlers");
        var Z3 = K("WalletHandlers");
        var Z4 = K("AppStateMachine");
        var Z5 = K("LoadingController");
        var Z6 = K("WBSDataSource");
        var Z7 = K("WBSApiClient");
        var Z8 = K("WBSRefreshWorldHandler");
        var Z9 = K("UISetupHandler");
        var ZZ = K("BGMHandler");
        var ZI = K("GameLayout");
        var Zd = K("AudioManager");
        var ZO = K("GameConstant");
        var ZR = K("SpaceBarInterrupter");
        var ZK = K("WBSNormalGameState");
        var Zg = K("WBSFreeSpinGameState");
        var ZT = K("WBSGameUtils");
        var Zx = K("AudioManager");
        var ZL = K("BVFrameworkEnum");
        var ZD = K("SpinConfigHandler");
        var Zn = K("FeatureBuyHelper");
        var Zk = K("SlotAnalyticsEnum");
        var Zt = cc._decorator;
        var Zi = Zt.ccclass;
        var ZC = Zt.property;
        var Zu = function (Zc) {
          function Zp() {
            var Zj = Zc !== null && Zc.apply(this, arguments) || this;
            Zj.blocker = undefined;
            Zj.generalControllers = Object.create(null);
            Zj.bonusControllers = Object.create(null);
            Zj._refreshWorldHandler = new Z8.default();
            return Zj;
          }
          __extends(Zp, Zc);
          Zp.prototype.onLoad = function () {
            this._setupAppStateMachine();
            Q.initializeGame({
              autoDeductBalance: true,
              socketConfig: {
                enableSessionSocket: true
              },
              dataSource: Z6.wbsDataSource,
              apiClient: Z7.wbsApiClient,
              multiResHandler: Y.default,
              callback: this._gameSetup.bind(this),
              notifyConfig: {
                theme: W.ThemeType.SLOT,
                buttonColor: X.uiAppearanceHelper.v("game.theme_color"),
                buttonTitleColor: X.uiAppearanceHelper.v("game.white_color"),
                titleColor: X.uiAppearanceHelper.v("game.white_color"),
                messageColor: X.uiAppearanceHelper.v("game.white_color")
              },
              refreshWorldCallback: this._refreshWorld.bind(this),
              updateBalanceCallback: this._settingMenuUpdateBalance.bind(this),
              gameTitle: {
                name: shell.I18n.t("WildBountyShowdown.Name"),
                fontFamily: X.uiAppearanceHelper.v("game.theme_font_family")
              },
              gameLayoutInfo: ZI.gameLayout,
              updateAudioPlayRateCallback: Zd.updatePlayRate.bind(Zd),
              gameResultVerifyConfig: true
            });
          };
          Zp.prototype._initSpinConfig = function (Zj) {
            var Zl = {
              minimumSpinningTime: 0.2,
              regularSpinningTime: 0.8,
              regularSpinningTimeOffset: -0.9,
              minimumSpinningTimeOffset: -0.9,
              jurisdictionModel: Z6.wbsDataSource.systemModel.operatorJurisdiction
            };
            ZD.initSpinConfig(Zl);
            if (Zj) {
              Zj();
            }
          };
          Zp.prototype._gameSetup = function () {
            q.sequenceCallback(this._initSpinConfig.bind(this), this._initWalletHelper.bind(this), this._getInitGameInfo.bind(this), this._initAudioManager.bind(this), this._setupSettingMenu.bind(this), this._initLoader.bind(this), this._initRefreshWorldHandler.bind(this), this._load.bind(this), this._initializeSettingMenu.bind(this), this._setupWallets.bind(this), q.deferCallback(true), this._setupSlotController.bind(this), this._setupControllers.bind(this), q.deferCallback(true), this._initGeneralLocalSlotPositions.bind(this), this._setupUI.bind(this), this._setupFeatureBuy.bind(this), this._setupTransactionStateMachine.bind(this))(this._notifyPreloadComplete.bind(this));
          };
          Zp.prototype._initWalletHelper = function (Zj) {
            var Zl = {
              getGameInfo: this._getGameInfoByWallet.bind(this)
            };
            J.walletHelper.init(Zl);
            if (Zj) {
              Zj();
            }
          };
          Zp.prototype._getGameInfoByWallet = function (Zj, Zl) {
            var Ze = Zj ? {
              wk: Zj
            } : undefined;
            this._getGameInfo(function (ZG, Za) {
              if (Zl) {
                Zl(Za);
              }
            }, Ze);
          };
          Zp.prototype._getGameInfo = function (Zj, Zl) {
            Z0.doAPIRequest({
              name: "Get Game Info",
              apiRequest: Z7.wbsApiClient.getGameInfo.bind(Z7.wbsApiClient),
              apiRequestParam: Zl,
              errorTitle: shell.I18n.t("General.ErrorLaunchFailed"),
              retryMessage: shell.I18n.t("General.LoadingInfoRetry")
            }, this._gameInfoResultReturn(Zj));
          };
          Zp.prototype._initGameInfoResultReturn = function (Zj) {
            var Zl = Date.now();
            return function (Ze, ZG) {
              J.walletHelper.processInitGameInfo(ZG, function () {
                shell.ga.sendTiming(shell.ga.CATEGORY_QUERY, shell.ga.EVENT_READ_INFO, Date.now() - Zl);
                if (Zj) {
                  Zj();
                }
              });
            };
          };
          Zp.prototype._gameInfoResultReturn = function (Zj) {
            return function (Zl, Ze) {
              if (Ze && Ze.dt) {
                var ZG = Z6.wbsDataSource.systemModel;
                var Za = ZG.betLevelList;
                var ZV = ZG.betSizeList;
                var ZQ = ZG.maxLineNumber;
                var ZN = ZG.featureBuy;
                var ZY = Z6.wbsDataSource.transactionModel;
                var ZW = ZY.betSizeValue;
                var Zq = ZY.betLevelValue;
                var ZS = Z6.wbsDataSource.playerModel.minimumBetAmount;
                Z1.settingMenuHelper.betSizeList = ZV;
                Z1.settingMenuHelper.betSizeValue = ZW;
                Z1.settingMenuHelper.betLevelList = Za;
                Z1.settingMenuHelper.betLevelValue = Zq;
                Z1.settingMenuHelper.betLineValue = ZQ;
                Z1.settingMenuHelper.minimumBetAmount = ZS;
                Z1.settingMenuHelper.featureBuyThreshold = ZN && ZN.threshold;
                Z1.settingMenuHelper.baseBet = shell.I18n.t("General.BaseBet");
                Zj(Zl, Ze);
              }
            };
          };
          Zp.prototype._getInitGameInfo = function (Zj) {
            var Zl = {
              eatk: Z6.wbsDataSource.systemModel.extraAssetTableKey
            };
            H.sendEvent(shell.ga.CATEGORY_QUERY, shell.ga.EVENT_READ_INFO);
            shell.setProgressVisible(false);
            W.showMessage(shell.I18n.t("General.LoadingInfo"));
            this._getGameInfo(this._initGameInfoResultReturn(Zj), Zl);
          };
          Zp.prototype._initAudioManager = function (Zj) {
            Zd.init();
            if (Zj) {
              Zj();
            }
          };
          Zp.prototype._setupSettingMenu = function (Zj) {
            var Zl = this;
            function Ze() {
              var Za = Zl.generalControllers;
              var ZV = Za.featureBuyController;
              var ZQ = Za.spinButtonController;
              var ZN = Z6.wbsDataSource.systemModel;
              var ZY = Z6.wbsDataSource.playerModel.minimumBetAmount;
              var ZW = ZN.featureBuy;
              if (ZW && ZW.isSupported && !ZQ.isHidden()) {
                if (Z1.settingMenuHelper.additionalBetCalculation() <= ZW.threshold) {
                  ZV.showFeatureButton();
                  ZV.enableFeatureBuy();
                  if (Z1.settingMenuHelper.additionalBetCalculation() < ZY) {
                    ZV.playButtonHoverEffect();
                  } else {
                    ZV.stopButtonHoverEffect();
                  }
                } else {
                  ZV.hideFeatureButton();
                  ZV.disableFeatureBuy();
                }
              }
            }
            var ZG = {
              apiClient: Z7.wbsApiClient,
              dataSource: Z6.wbsDataSource,
              settingMenuHelper: Z1.settingMenuHelper,
              walletHelper: J.walletHelper,
              isProgressiveGame: false,
              toggleEffectMuted: Zd.toggleEffectMuted,
              toggleMusicMuted: Zd.toggleMusicMuted,
              betChangeCallback: Ze,
              reevaluateBetCallback: Ze,
              callback: Zj
            };
            Z2.setupSettingMenu(ZG);
          };
          Zp.prototype._initLoader = function (Zj) {
            var Zl = {
              generalControllers: this.generalControllers,
              bonusControllers: this.bonusControllers
            };
            var Ze = Zl;
            this._loadingController = this.getComponent(Z5.default);
            this._loadingController.setup(Ze);
            if (Zj) {
              Zj();
            }
          };
          Zp.prototype._initRefreshWorldHandler = function (Zj) {
            this._refreshWorldHandler.initialize({
              generalController: this.generalControllers,
              loadingController: this._loadingController,
              bonusController: this.bonusControllers,
              appStateMachine: this._appStateMachine,
              apiClient: Z7.wbsApiClient,
              dataSource: Z6.wbsDataSource,
              settingMenuHelper: Z1.settingMenuHelper,
              walletHelper: J.walletHelper
            });
            if (Zj) {
              Zj();
            }
          };
          Zp.prototype._load = function (Zj) {
            var Zl = Z6.wbsDataSource.transactionModel;
            var Ze = Zl.stateTransitionTo;
            var ZG = Zl.stateTransitionFrom;
            W.showMessage(shell.I18n.t("General.LoadingResource"));
            if (ZG !== ZO.TransitionState.FREE_SPIN && ZG !== ZO.TransitionState.FREE_SPIN_RESPIN || Ze !== ZO.TransitionState.FREE_SPIN && Ze !== ZO.TransitionState.FREE_SPIN_RESPIN) {
              this._loadingController.loadGeneralBundle(Zj);
            } else {
              this._loadingController.loadAllBundle(Zj);
            }
          };
          Zp.prototype._initializeSettingMenu = function (Zj) {
            var Zl = this.generalControllers;
            var Ze = Zl.settingController;
            var ZG = Zl.settingMenuFooterController;
            var Za = Zl.spinButtonController;
            var ZV = Zl.featureBuyController;
            Z2.initializeSettingMenu({
              dataSource: Z6.wbsDataSource,
              settingMenuHelper: Z1.settingMenuHelper,
              settingController: Ze,
              settingWalletPanelController: ZG,
              spinButtonController: Za,
              settingMenuChangedHandling: function (ZQ) {
                var ZN = Z6.wbsDataSource.systemModel.featureBuy;
                var ZY = Z6.wbsDataSource.playerModel.minimumBetAmount;
                if (ZQ) {
                  Za.hide();
                  ZV.hideFeatureButton();
                  ZV.disableFeatureBuy();
                } else {
                  Za.show();
                  if (ZN && ZN.isSupported && Z1.settingMenuHelper.additionalBetCalculation() <= ZN.threshold) {
                    ZV.showFeatureButton();
                    ZV.enableFeatureBuy();
                    if (Z1.settingMenuHelper.additionalBetCalculation() < ZY) {
                      ZV.playButtonHoverEffect();
                    }
                  }
                }
              },
              callback: Zj
            });
          };
          Zp.prototype._setupFeatureBuy = function (Zj) {
            var Zl = Z6.wbsDataSource.systemModel;
            var Ze = Zl.featureBuy;
            var ZG = Zl.maxLineNumber;
            var Za = Z6.wbsDataSource.playerModel.minimumBetAmount;
            var ZV = Z6.wbsDataSource.transactionModel;
            var ZQ = ZV.betSizeValue;
            var ZN = ZV.betLevelValue;
            var ZY = this.generalControllers;
            var ZW = ZY.featureBuyController;
            var Zq = ZY.featureBuyButtonController;
            if (Ze) {
              var ZS = this.generalControllers.spinButtonController;
              var Zz = {
                confirmFeatureBuyCallback: function () {
                  Z6.wbsDataSource.isFeatureBuy = true;
                  ZS.enableButton();
                  ZS.clickSpinButton(Zk.SpinTrigger.FEATURE_BUY);
                },
                cancelBuyCallback: function () {
                  ZS.enableButton();
                  ZW.enableFeatureBuy();
                  if (Z1.settingMenuHelper.additionalBetCalculation() < Za) {
                    ZW.playButtonHoverEffect();
                  }
                },
                showDialogCallback: function () {
                  ZS.disableButton();
                  ZW.disableFeatureBuy();
                }
              };
              var Zf = ZQ * ZN * ZG;
              Zq.init(Zf, Ze.threshold);
              ZW.setupButtonConfig(Zz);
              Zn.initFeatureBuyHelper(Z6.wbsDataSource);
            } else {
              ZW.hideFeatureButton();
              ZW.disableFeatureBuy();
            }
            if (Zj) {
              Zj();
            }
          };
          Zp.prototype._setupWallets = function (Zj) {
            var Zl = {
              apiClient: Z7.wbsApiClient,
              dataSource: Z6.wbsDataSource,
              settingWalletPanelController: this.generalControllers.settingMenuFooterController,
              settingMenuHelper: Z1.settingMenuHelper,
              walletHelper: J.walletHelper,
              callback: Zj
            };
            Z3.setupWallets(Zl);
          };
          Zp.prototype._setupSlotController = function (Zj) {
            var Zl = this.generalControllers;
            var Ze = Zl.slotController;
            var ZG = Zl.spinButtonController;
            var Za = Z6.wbsDataSource.transactionModel.reels;
            var ZV = {
              reels: Za
            };
            Ze.init(ZV);
            ZG.init();
            if (Zj) {
              Zj();
            }
          };
          Zp.prototype._setupControllers = function (Zj) {
            var Zl = this.generalControllers;
            var Ze = Zl.spinButtonController;
            var ZG = Zl.slotController;
            var Za = Zl.bigWinController;
            var ZV = Zl.slowDropEffectController;
            var ZQ = Zl.backgroundController;
            ZR.spaceBarInterrupter.init({
              spinButtonClickCallback: Ze.clickSpinButton.bind(Ze),
              reelClickCallback: ZG.onSlotRegionClicked.bind(ZG)
            });
            var ZY = {
              getWinThreshold: this._getWinThreshold.bind(this),
              winDuration: {
                bigWinDuration: [4.048, 3.809],
                megaWinDuration: [3.81, 3.809],
                superMegaWinDuration: [3.81, 3.797]
              }
            };
            Za.setup(ZY);
            var ZW = ZQ.getSlowDropEfxHolder();
            var Zq = ZQ.resetSlowDropEfxHolder();
            ZV.init(ZW, Zq);
            if (Zj) {
              Zj();
            }
          };
          Zp.prototype._initGeneralLocalSlotPositions = function (Zj) {
            var Zl = this.generalControllers.slotController;
            var Ze = this.generalControllers.symbolPayoutController;
            for (var ZG = Zl.getAllSlotItemPosition(), Za = [], ZV = 0; ZV < ZG.length; ZV++) {
              var ZQ = ZG[ZV];
              Za[ZV] = this.node.convertToNodeSpaceAR(cc.v2(ZQ.x, ZQ.y));
            }
            var ZN = {
              numberOfColumn: ZO.NUMBER_OF_COLUMN,
              numberOfRow: ZO.NUMBER_OF_ROW,
              payoutData: ZO.PayOutData,
              buttonPosition: Za,
              numberOfButton: Za.length
            };
            var ZY = ZN;
            var ZW = Z6.wbsDataSource.transactionModel;
            var Zq = ZW.reels;
            var ZS = ZW.goldSymbol;
            var Zz = ZT.getProcessedReelSymbols(Zq, ZS);
            Ze.setReelData(Zz);
            Ze.init(ZY);
            if (Zj) {
              Zj();
            }
          };
          Zp.prototype._setupTransactionStateMachine = function (Zj) {
            var Zl = Z6.wbsDataSource.transactionModel.stateTransitionTo === ZO.TransitionState.NORMAL ? "setup" : "idle";
            U.initState(Zl);
            if (Zj) {
              Zj();
            }
          };
          Zp.prototype._notifyPreloadComplete = function () {
            shell.setProgressVisible(false);
            W.showMessage(shell.I18n.t("General.LoadingCompleted"));
            shell.requestGameStart(true, this._startGame.bind(this));
            this._loadingController.gameLaunched = true;
            this._gameEventSubscription();
          };
          Zp.prototype._startGame = function () {
            var Zj = this;
            this._playBGM();
            var Zl = this.generalControllers.slotController;
            var Ze = Z6.wbsDataSource.transactionModel.stateTransitionTo;
            function ZG() {
              Zj.blocker.active = false;
              ZR.spaceBarInterrupter.resume();
              Zj._appStateMachine.run();
            }
            this.blocker.zIndex = ZL.EN_GAME_LAYER_Z_INDEX_HIGH + 59;
            this.blocker.active = true;
            ZR.spaceBarInterrupter.pause();
            if (Ze === ZO.TransitionState.NORMAL) {
              Zl.gameIntroCameraZoomIn(false, ZG);
            } else {
              Zl.cameraZoomIn(true, ZG);
            }
          };
          Zp.prototype._restartGame = function () {
            if (this._appStateMachine && this._appStateMachine.isStateEnd) {
              this._setupAppStateMachine();
              this._appStateMachine.run();
            }
          };
          Zp.prototype._playBGM = function () {
            var Zj = this;
            var Zl = Z6.wbsDataSource.transactionModel.stateTransitionTo;
            Zd.toggleAudioGameStarted();
            if (Zl === ZO.TransitionState.NORMAL) {
              if (Zx.GeneralAudioPool.bgm_intro) {
                Zx.GeneralAudioPool.bgm_intro.play();
              }
              q.delayCallback(5)(function () {
                Zj._startMainBgm();
              });
            } else {
              this._startMainBgm();
            }
          };
          Zp.prototype._startMainBgm = function () {
            var Zj = Z6.wbsDataSource.transactionModel;
            var Zl = Zj.stateTransitionFrom;
            var Ze = Zj.stateTransitionTo;
            if (Zl !== ZO.TransitionState.NORMAL && Zl !== ZO.TransitionState.RESPIN || Ze !== ZO.TransitionState.FREE_SPIN) {
              ZZ.bgmHandler.playBgm(Ze);
            } else {
              ZZ.bgmHandler.playBgm(ZO.TransitionState.NORMAL);
            }
          };
          Zp.prototype._setupAppStateMachine = function () {
            var Zj = new Z4.default({
              getNextAppState: this._evaluateAppState.bind(this),
              exitAppStateMachineCallback: this._restartGame.bind(this)
            });
            this._appStateMachine = Zj;
            this._refreshWorldHandler.setAppStateMachine(Zj);
          };
          Zp.prototype._evaluateAppState = function () {
            switch (Z6.wbsDataSource.transactionModel.stateTransitionTo) {
              case ZO.TransitionState.NORMAL:
              case ZO.TransitionState.RESPIN:
                return this._getNormalSpinState();
              case ZO.TransitionState.FREE_SPIN:
              case ZO.TransitionState.FREE_SPIN_RESPIN:
                return this._getFreeSpinState();
              default:
                return;
            }
          };
          Zp.prototype._getNormalSpinState = function () {
            var Zj = this.generalControllers;
            var Zl = new ZK.default(Z6.wbsDataSource, {
              generalControllers: Zj
            }, undefined);
            Z6.wbsDataSource.isRefreshWorld = false;
            return Zl;
          };
          Zp.prototype._getFreeSpinState = function () {
            var Zj = {
              generalControllers: this.generalControllers,
              bonusControllers: this.bonusControllers,
              loadingController: this._loadingController
            };
            return new Zg.default(Z6.wbsDataSource, Zj, undefined);
          };
          Zp.prototype._gameEventSubscription = function () {
            z.subscribeGamePauseEvent();
            z.subscribeGameResumeEvent();
            var Zj = this.generalControllers;
            var Zl = Zj.spinButtonController;
            var Ze = Zj.featureBuyButtonController;
            var ZG = Zj.featureBuyController;
            z.setGamePlayUIBlockEventCallback(function (Za) {
              var ZV = Z6.wbsDataSource.playerModel.minimumBetAmount;
              if (Za) {
                Zl.node.pauseSystemEvents(true);
                Ze.node.pauseSystemEvents(true);
                ZG.stopButtonHoverEffect();
              } else {
                Zl.node.resumeSystemEvents(true);
                Ze.node.resumeSystemEvents(true);
                if (Z1.settingMenuHelper.additionalBetCalculation() < ZV) {
                  ZG.playButtonHoverEffect();
                }
              }
            });
          };
          Zp.prototype._refreshWorld = function (Zj) {
            this._refreshWorldHandler.refreshWorldByChangeWalletIdle(this._setupUI.bind(this), Zj);
          };
          Zp.prototype._setupUI = function (Zj) {
            var Zl = {
              dataSource: Z6.wbsDataSource,
              generalControllers: this.generalControllers,
              bonusControllers: this.bonusControllers
            };
            Z9.renderUIBaseOnState(Zl, Zj);
          };
          Zp.prototype._settingMenuUpdateBalance = function (Zj) {
            Z1.settingMenuHelper.setBalance(Zj);
          };
          Zp.prototype._getWinThreshold = function () {
            var Zj = Z6.wbsDataSource.systemModel;
            var Zl = Zj.maxLineNumber;
            var Ze = Zj.winThresholds;
            var ZG = Z6.wbsDataSource.transactionModel;
            var Za = ZG.betSizeValue;
            var ZV = ZG.betLevelValue;
            return Ze.getAllThresholds(Za, ZV, Zl);
          };
          __decorate([ZC(cc.Node)], Zp.prototype, "blocker", undefined);
          return __decorate([Zi], Zp);
        }(cc.Component);
        G.default = Zu;
        cc._RF.pop();
      }
    }, {
      AnalyticsHelper: "AnalyticsHelper",
      AppStateMachine: "AppStateMachine",
      AudioManager: "AudioManager",
      BGMHandler: "BGMHandler",
      BVFrameworkEnum: "BVFrameworkEnum",
      FeatureBuyHelper: "FeatureBuyHelper",
      GameConstant: "GameConstant",
      GameEventHandler: "GameEventHandler",
      GameInitializationHandler: "GameInitializationHandler",
      GameLayout: "GameLayout",
      LoadingController: "LoadingController",
      MultiResHandler: "MultiResHandler",
      NotifyHelper: "NotifyHelper",
      RequestHandler: "RequestHandler",
      SettingMenuHandlers: "SettingMenuHandlers",
      SettingMenuHelper: "SettingMenuHelper",
      SlotAnalyticsEnum: "SlotAnalyticsEnum",
      SpaceBarInterrupter: "SpaceBarInterrupter",
      SpinConfigHandler: "SpinConfigHandler",
      TransactionStateMachineHandler: "TransactionStateMachineHandler",
      UIAppearanceHelper: "UIAppearanceHelper",
      UISetupHandler: "UISetupHandler",
      Utils: "Utils",
      WBSApiClient: "WBSApiClient",
      WBSDataSource: "WBSDataSource",
      WBSFreeSpinGameState: "WBSFreeSpinGameState",
      WBSGameUtils: "WBSGameUtils",
      WBSNormalGameState: "WBSNormalGameState",
      WBSRefreshWorldHandler: "WBSRefreshWorldHandler",
      WalletHandlers: "WalletHandlers",
      WalletHelper: "WalletHelper"
    }],
    MaxBetButton: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "57d52E5rw9F7Iqp2UOZL/vK", "MaxBetButton")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("BetModifierButton");
        var x = I("UIAppearanceHelper");
        var L = I("Utils");
        var D = cc._decorator;
        var k = D.ccclass;
        var C = D.property;
        var u = function (p) {
          function j() {
            var G = p !== null && p.apply(this, arguments) || this;
            G.labelNode = undefined;
            return G;
          }
          __extends(j, p);
          j.prototype.changeButtonPressedColor = function (G) {
            if (this.buttonTheme) {
              var V = x.uiAppearanceHelper.v(this.buttonTheme.domainKey + "." + this.buttonTheme.colorKey + ".normal");
              var Q = x.uiAppearanceHelper.v(this.buttonTheme.domainKey + "." + this.buttonTheme.colorKey + ".pressed");
              if (this.isReachLimit) {
                var N = x.uiAppearanceHelper.v(this.buttonTheme.domainKey + "." + this.buttonTheme.colorKey + ".disabled");
                L.setNodeColorWithOpacity(this.iconSprite, N);
                this.labelNode.opacity = 127.5;
              } else {
                L.setNodeColorWithOpacity(this.iconSprite, G ? Q : V);
                this.labelNode.opacity = G ? 127.5 : 255;
              }
            }
          };
          j.prototype.interactableButtonColor = function (G) {
            if (this.buttonTheme) {
              var V = x.uiAppearanceHelper.v(this.buttonTheme.domainKey + "." + this.buttonTheme.colorKey + ".normal");
              var Q = x.uiAppearanceHelper.v(this.buttonTheme.domainKey + "." + this.buttonTheme.colorKey + ".disabled");
              if (this.isReachLimit) {
                L.setNodeColorWithOpacity(this.iconSprite, Q);
                this.labelNode.opacity = 127.5;
              } else {
                L.setNodeColorWithOpacity(this.iconSprite, G ? V : Q);
                this.labelNode.opacity = G ? 255 : 63.75;
              }
            }
          };
          __decorate([C(cc.Node)], j.prototype, "labelNode", undefined);
          return __decorate([k], j);
        }(T.default);
        K.default = u;
        cc._RF.pop();
      }
    }, {
      BetModifierButton: "BetModifierButton",
      UIAppearanceHelper: "UIAppearanceHelper",
      Utils: "Utils"
    }],
    MoreMenuButton: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "ea5caTag+xJsrT667bFPlnC", "MoreMenuButton")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("GenericSettingButton");
        var x = cc._decorator;
        var L = x.ccclass;
        x.property;
        var D = function (k) {
          function C() {
            return k !== null && k.apply(this, arguments) || this;
          }
          __extends(C, k);
          C.prototype.customSetup = function () {
            this.circleCollider.x = -10;
          };
          return __decorate([L], C);
        }(T.default);
        K.default = D;
        cc._RF.pop();
      }
    }, {
      GenericSettingButton: "GenericSettingButton"
    }],
    MultiResHandler: [function (Z, I) {
      'use strict';

      if (!cc._RF.push(I, "3ae3du76uBKurm1YFGdqj7/", "MultiResHandler")) {
        var R = System.get("common").MultiResHandler;
        I.exports.default = R;
        I.exports.__esModule = true;
        cc._RF.pop();
      }
    }, {}],
    MultiplierController: [function (K, T, x) {
      'use strict';

      if (!cc._RF.push(T, "dfa18t2v9JGMYU5wqlXKj6g", "MultiplierController")) {
        Object.defineProperty(x, "__esModule", {
          value: true
        });
        x.curveTo = x.threePointCurve = x.DESELECTED_MULTIPLIER_SIZE_MAP = x.SELECTED_MULTIPLIER_SIZE_MAP = x.MULTIPLIER_T = x.MULTIPLIER_SIZE = undefined;
        var D = K("Utils");
        var k = K("NodePoolHandler");
        var C = K("AudioConstant");
        var j = K("AudioManager");
        var G = K("GameConstant");
        var V = K("MultiplierItemController");
        var Q = K("MultiplierShiftHandler");
        var N = K("WBSGameUtils");
        var Y = cc._decorator;
        var W = Y.ccclass;
        var q = Y.property;
        x.MULTIPLIER_SIZE = [1, 1, 1, 1, 1];
        x.MULTIPLIER_T = [0.18, 0.32, 0.5, 0.68, 0.83];
        x.SELECTED_MULTIPLIER_SIZE_MAP = {
          "1": 1.43,
          "2": 1.43,
          "4": 1.43,
          "8": 1.43,
          "16": 1.33,
          "32": 1.33,
          "64": 1.33,
          "128": 1.23,
          "256": 1.23,
          "512": 1.23,
          "1024": 1.13
        };
        x.DESELECTED_MULTIPLIER_SIZE_MAP = {
          "1": 0.86,
          "2": 0.86,
          "4": 0.86,
          "8": 0.86,
          "16": 0.82,
          "32": 0.82,
          "64": 0.82,
          "128": 0.76,
          "256": 0.76,
          "512": 0.76,
          "1024": 0.72
        };
        var M = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024];
        var E = [8, 16, 32, 64, 128, 256, 512, 1024];
        var F = cc.v2(-600, 179);
        var H = cc.v2(0, -191);
        var w = cc.v2(600, 179);
        x.threePointCurve = B;
        x.curveTo = P;
        var U = function (X) {
          function J() {
            var Z0 = X !== null && X.apply(this, arguments) || this;
            Z0.holder = undefined;
            Z0.tint = undefined;
            Z0.multiplierItem = undefined;
            Z0.multiplierContainer = undefined;
            Z0.nextMultiplierEffect = undefined;
            Z0.numberFacingPoint = undefined;
            Z0.introAnim = undefined;
            Z0.introShine = undefined;
            Z0.shinningEffectAnim = undefined;
            Z0.freeSpinMultiplierContainer = undefined;
            Z0._multiplierShiftSlotHandler = undefined;
            Z0._multiplierItemObject = Object.create(null);
            Z0._currentMultiplierList = [];
            Z0._currentMultiplier = undefined;
            Z0._infoboardPos = cc.v2(0, -1360);
            Z0._disposeZoom = undefined;
            Z0._freeSpinMultiplierList = [];
            return Z0;
          }
          __extends(J, X);
          J.prototype.init = function () {
            this.reset();
            this._clearVfx();
            k.nodePoolHandler.registerReusableItem(G.NodePoolName.Multiplier, this.multiplierItem, "MultiplierItemController", 7);
            this._multiplierShiftSlotHandler = new Q.default();
            this._multiplierShiftSlotHandler.init({
              getMultiplierItems: this._getCurrentMultiplierItem.bind(this),
              createMultiplier: this._createMultiplier.bind(this),
              multiplierItemContainer: this.multiplierContainer
            });
          };
          J.prototype.zoomIn = function (Z0, Z1) {
            var Z2 = this;
            if (Z0 === undefined) {
              Z0 = false;
            }
            var Z3 = this.holder.y;
            var Z4 = this._disposeZoom;
            if (Z4) {
              Z4();
            }
            this._disposeZoom = undefined;
            if (Z0) {
              this.holder.setPosition(0, 893);
              if (Z1) {
                Z1();
              }
            } else {
              this._disposeZoom = N.lerpTo(function (Z5, Z6) {
                var Z7 = Z6 * (2 - Z6);
                var Z8 = cc.misc.lerp(Z3, 893, Z7);
                Z2.holder.setPosition(0, Z8);
                if (Z6 === 1 && Z1) {
                  Z1();
                }
              }, Z3, 893, 1);
            }
          };
          J.prototype.zoomOut = function (Z0, Z1) {
            var Z2 = this;
            if (Z0 === undefined) {
              Z0 = false;
            }
            var Z3 = this.holder.y;
            var Z4 = this._disposeZoom;
            if (Z4) {
              Z4();
            }
            this._disposeZoom = undefined;
            if (Z0) {
              this.holder.setPosition(0, 843);
              if (Z1) {
                Z1();
              }
            } else {
              this._disposeZoom = N.lerpTo(function (Z5, Z6) {
                var Z7 = Z6 * (2 - Z6);
                var Z8 = cc.misc.lerp(Z3, 843, Z7);
                Z2.holder.setPosition(0, Z8);
                if (Z6 === 1 && Z1) {
                  Z1();
                }
              }, Z3, 843, 4);
            }
          };
          J.prototype.playGameIntroZoomIn = function (Z0, Z1) {
            var Z2 = this;
            if (Z0 === undefined) {
              Z0 = false;
            }
            var Z3 = this.holder.y;
            var Z4 = this._disposeZoom;
            if (Z4) {
              Z4();
            }
            this._disposeZoom = undefined;
            if (Z0) {
              this.holder.setPosition(0, 893);
              if (Z1) {
                Z1();
              }
            } else {
              this._disposeZoom = N.lerpTo(function (Z5, Z6) {
                var Z7 = 1 - Math.pow(1 - Z6, 4);
                var Z8 = cc.misc.lerp(Z3, 893, Z7);
                Z2.holder.setPosition(0, Z8);
                if (Z6 === 1 && Z1) {
                  Z1();
                }
              }, Z3, 893, 1);
            }
          };
          J.prototype.playGameIntroShinningEffect = function () {
            this.shinningEffectAnim.play();
          };
          J.prototype.playBonusIntro = function (Z0) {
            var Z1 = this;
            j.playAudio(C.GENERAL_AUDIO.fsIntroStart.key);
            var Z2 = this.holder.y;
            var Z3 = this._disposeZoom;
            if (Z3) {
              Z3();
            }
            this._disposeZoom = N.lerpTo(function (Z4, Z5) {
              var Z6 = Z5 < 0.5 ? Z5 * 16 * Z5 * Z5 * Z5 * Z5 : 1 - Math.pow(Z5 * -2 + 2, 5) / 2;
              var Z7 = cc.misc.lerp(Z2, 200, Z6);
              Z1.holder.setPosition(0, Z7);
              if (Z5 === 1 && Z0) {
                Z0();
              }
            }, Z2, 200, 1);
          };
          J.prototype.exitBonusInto = function (Z0, Z1) {
            var Z2 = this;
            if (Z0 === undefined) {
              Z0 = false;
            }
            var Z3 = this.holder.y;
            var Z4 = this._disposeZoom;
            if (Z4) {
              Z4();
            }
            this._disposeZoom = undefined;
            j.playAudio(C.GENERAL_AUDIO.fsIntroEnd.key);
            if (Z0) {
              this.holder.setPosition(0, 893);
              if (Z1) {
                Z1();
              }
            } else {
              this._disposeZoom = N.lerpTo(function (Z5, Z6) {
                var Z7 = 1 - Math.pow(1 - Z6, 5);
                var Z8 = cc.misc.lerp(Z3, 893, Z7);
                Z2.holder.setPosition(0, Z8);
                if (Z6 === 1 && Z1) {
                  Z1();
                }
              }, Z3, 893, 1);
            }
          };
          J.prototype.reloadMultiplier = function (Z0, Z1) {
            var Z2 = this;
            if (Z1 === undefined) {
              Z1 = false;
            }
            this._currentMultiplier = Z0;
            this.reset();
            var Z3 = this._getMultiplierToShow(Z0, Z1);
            this._currentMultiplierList = Z3;
            Z3.forEach(function (Z4, Z5) {
              Z2._createMultiplier(Z4, Z5);
            });
          };
          J.prototype.playShiftRight = function (Z0, Z1, Z2) {
            var Z3 = this;
            this._currentMultiplier = Z0;
            if (Z0 > this._currentMultiplierList[2]) {
              var Z4 = this._getMultiplierToShow(Z0, Z1);
              this._playMultiplierUpAudio(Z0);
              this._playNextMultiplierGlowEffect();
              this._multiplierShiftSlotHandler.playShiftRight(Z4, this._currentMultiplierList, function () {
                Z3.reloadMultiplier(Z0, Z1);
                if (Z2) {
                  Z2();
                }
              });
            } else if (Z2) {
              Z2();
            }
          };
          J.prototype.playShiftLeft = function (Z0, Z1, Z2) {
            var Z3 = this;
            this._currentMultiplier = Z0;
            if (Z0 < this._currentMultiplierList[2]) {
              var Z4 = this._getMultiplierToShow(Z0, Z1);
              this._multiplierShiftSlotHandler.playShiftLeft(Z4, this._currentMultiplierList, function () {
                Z3.reloadMultiplier(Z0, Z1);
                if (Z2) {
                  Z2();
                }
              });
            } else if (Z2) {
              Z2();
            }
          };
          J.prototype.playReset = function (Z0, Z1) {
            var Z2 = Z0 ? 8 : 1;
            this.playShiftTo(Z2, Z0, Z1);
          };
          J.prototype.playShiftTo = function (Z0, Z1, Z2) {
            this._recursiveShift(Z0, Z1, Z2);
          };
          J.prototype.reset = function () {
            this._clear();
          };
          J.prototype.playMultiplier = function (Z0) {
            var Z1 = this;
            var Z2 = k.nodePoolHandler.dequeueReusableItem(G.NodePoolName.Multiplier);
            Z2.parent = this.holder;
            Z2.position = cc.v3(0, -147, 0);
            var Z3 = Z2.getComponent(V.default);
            Z3.show(this._currentMultiplier);
            Z3.showShine();
            this._setupSelectedMultiplierNode(Z3);
            this._playMultiplierFlyAudio(this._currentMultiplier);
            var Z4 = Z2.position;
            var Z5 = Z4.x;
            var Z6 = Z4.y;
            var Z7 = (Z5 + this._infoboardPos.x) / 2;
            var Z8 = (Z6 + this._infoboardPos.y) / 2;
            var Z9 = cc.v2(Z7, Z8);
            Z2.stopAllActions();
            Z2.runAction(cc.sequence(cc.delayTime(0.2), cc.callFunc(function () {
              var ZZ = Object.keys(Z1._multiplierItemObject);
              if (ZZ.length > 0) {
                ZZ.forEach(function (ZI) {
                  Z1._multiplierItemObject[ZI].hideShine(true);
                });
              }
            }), cc.spawn(cc.moveTo(0.4, Z9).easing(cc.easeOut(1.5)), cc.scaleTo(0.4, 2.5).easing(cc.easeOut(1.5))), cc.spawn(cc.moveTo(0.4, this._infoboardPos).easing(cc.easeIn(2)), cc.scaleTo(0.4, 1).easing(cc.easeIn(2))), cc.callFunc(function () {
              if (Z0) {
                Z0();
              }
            }), cc.callFunc(function () {
              var ZZ = Object.keys(Z1._multiplierItemObject);
              if (ZZ.length > 0) {
                ZZ.forEach(function (ZI) {
                  var Zd = Z1._multiplierItemObject[ZI];
                  if (Zd.multiplierNumber === 1024 && Zd.isSelected) {
                    Zd.showShine();
                  }
                });
              }
            }), cc.spawn(cc.scaleTo(0.5, 5), cc.fadeOut(0.2)), cc.callFunc(function () {
              Z2.destroy();
            })));
          };
          J.prototype.playTransformToFreeSpinMutliplier = function (Z0) {
            var Z1 = this;
            this._enableDim();
            D.sequenceCallback(this.playBonusIntro.bind(this), function (Z2) {
              Z1.playShiftTo(8, false, function () {
                var Z4 = Z1.introAnim;
                Z4.node.active = true;
                Z4.stop();
                Z4.play();
                Z2();
              });
              j.playAudio(C.GENERAL_AUDIO.fsIntroShift.key);
              var Z3 = Z1.introShine;
              Z3.stopAllActions();
              Z3.eulerAngles = cc.Vec3.ZERO;
              Z3.opacity = 0;
              Z3.runAction(cc.rotateBy(25, 360).repeatForever());
              Z3.runAction(cc.fadeIn(0.3));
            }, function (Z2) {
              var Z3 = [];
              for (var Z4 = Object.values(Z1._multiplierItemObject).slice(0, 2), Z5 = function (Z8) {
                  var Z9 = Z4[Z8];
                  var ZZ = Z4.length - 1 - Z8 * 0.15;
                  Z3.push(function (ZI) {
                    Z9.playBreak(ZZ, ZI);
                  });
                }, Z6 = 0; Z6 < Z4.length; Z6++) {
                Z5(Z6);
              }
              var Z7 = Z4.length - 1;
              D.delayCallback(Z7)(function () {
                j.playAudio(C.GENERAL_AUDIO.fsIntroChange.key);
              });
              D.spawnCallback(Z3)(Z2);
            }, this._playFreeSpinMultiplier.bind(this), this._removeFreeSpinMultiplier.bind(this), function (Z2) {
              Z1.reloadMultiplier(8, true);
              var Z3 = Z1.introAnim;
              Z3.stop();
              Z3.node.active = false;
              var Z4 = Z1.introShine;
              Z4.runAction(cc.sequence(cc.fadeOut(0.3), cc.callFunc(function () {
                Z4.stopAllActions();
                Z2();
              })));
            })(function () {
              Z1._disableDim();
              Z1.exitBonusInto(false, Z0);
            });
          };
          J.prototype._enableDim = function () {
            this.tint.stopAllActions();
            this.tint.runAction(cc.fadeTo(0.5, 102));
          };
          J.prototype._disableDim = function () {
            this.tint.stopAllActions();
            this.tint.runAction(cc.fadeOut(1));
          };
          J.prototype._recursiveShift = function (Z0, Z1, Z2) {
            var Z3 = this;
            var Z4 = this._currentMultiplier;
            function Z5() {
              Z3._recursiveShift(Z0, Z1, Z2);
            }
            if (Z0 > Z4) {
              var Z6 = Z4 * 2;
              this.playShiftRight(Z6, Z1, Z5);
            } else if (Z0 < Z4) {
              Z6 = Z4 / 2;
              this.playShiftLeft(Z6, Z1, Z5);
            } else if (Z2) {
              Z2();
            }
          };
          J.prototype._clear = function () {
            var Z0 = this;
            var Z1 = Object.keys(this._multiplierItemObject);
            if (Z1.length > 0) {
              Z1.forEach(function (Z2) {
                Z0._multiplierItemObject[Z2].node.destroy();
              });
              this._multiplierItemObject = Object.create(null);
            }
          };
          J.prototype._clearVfx = function () {
            var Z0 = this.introAnim;
            Z0.stop();
            Z0.node.active = false;
            var Z1 = this.introShine;
            Z1.stopAllActions();
            Z1.opacity = 0;
            Z1.eulerAngles = cc.Vec3.ZERO;
          };
          J.prototype._getCurrentMultiplierItem = function () {
            var Z0 = this;
            var Z1 = [];
            this._currentMultiplierList.forEach(function (Z2) {
              if (Z2 !== -1) {
                Z1.push(Z0._multiplierItemObject[Z2]);
              } else {
                Z1.push(null);
              }
            });
            return Z1;
          };
          J.prototype._getMultiplierToShow = function (Z0, Z1 = false) {
            var Z2 = Z1 ? E : M;
            var Z3 = Z2.indexOf(Z0);
            var Z4 = [];
            Z4[0] = Z2[Z3 - 2];
            Z4[1] = Z2[Z3 - 1];
            Z4[2] = Z2[Z3];
            Z4[3] = Z2[Z3 + 1];
            Z4[4] = Z2[Z3 + 2];
            switch (Z3) {
              case 0:
                Z4[0] = Z2[Z2.length - 2];
                Z4[1] = Z2[Z2.length - 1];
                break;
              case 1:
                Z4[0] = Z2[Z2.length - 1];
                Z4[1] = Z2[Z3 - 1];
                break;
              case Z2.length - 1:
                Z4[3] = Z2[0];
                Z4[4] = Z2[1];
                break;
              case Z2.length - 2:
                Z4[3] = Z2[Z3 + 1];
                Z4[4] = Z2[0];
            }
            return Z4;
          };
          J.prototype._createMultiplier = function (Z0, Z1) {
            if (Z0 !== -1) {
              var Z2 = this.numberFacingPoint;
              var Z3 = k.nodePoolHandler.dequeueReusableItem(G.NodePoolName.Multiplier);
              var Z4 = Z3.getComponent(V.default);
              var Z5 = P(x.MULTIPLIER_T[Z1]);
              this.multiplierContainer.addChild(Z3);
              Z3.setPosition(cc.v3(Z5.x, Z5.y, 0));
              Z4.init(Z2);
              Z4.show(Z0);
              if (this._currentMultiplier === Z0) {
                this._setupSelectedMultiplierNode(Z4);
              } else {
                this._setupDeselectedMultiplierNode(Z4);
              }
              this._multiplierItemObject[Z0] = Z4;
              return Z4;
            }
          };
          J.prototype._setupSelectedMultiplierNode = function (Z0) {
            Z0.selected();
          };
          J.prototype._setupDeselectedMultiplierNode = function (Z0) {
            Z0.deselected();
          };
          J.prototype._playNextMultiplierGlowEffect = function () {
            this.nextMultiplierEffect.stopAllActions();
            this.nextMultiplierEffect.runAction(cc.sequence(cc.fadeIn(0.1), cc.delayTime(0.1), cc.fadeOut(0.1)));
          };
          J.prototype._playFreeSpinMultiplier = function (Z0) {
            var Z1 = 0;
            var Z2 = 0;
            var Z3 = function (Z6) {
              Z1++;
              var Z7 = Z4.numberFacingPoint;
              var Z8 = k.nodePoolHandler.dequeueReusableItem(G.NodePoolName.Multiplier);
              var Z9 = Z8.getComponent(V.default);
              var ZZ = P(0);
              Z4.freeSpinMultiplierContainer.addChild(Z8);
              Z8.setPosition(cc.v3(ZZ.x, ZZ.y, 0));
              Z9.init(Z7);
              Z9.show(E[E.length - (2 - Z6)]);
              Z4._setupDeselectedMultiplierNode(Z9);
              Z4._freeSpinMultiplierList.push(Z8);
              var ZI = x.MULTIPLIER_T[Z6];
              var Zd = (1 - Z6) * 0.04;
              D.delayCallback(Zd)(function () {
                N.lerpTo(function (ZO) {
                  var ZR = P(ZO);
                  Z8.setPosition(ZR.x, ZR.y, 0);
                  if (ZO === ZI && Z1 === ++Z2 && Z0) {
                    Z0();
                  }
                }, 0, ZI, 0.15);
              });
            };
            var Z4 = this;
            for (var Z5 = 0; Z5 < 2; Z5++) {
              Z3(Z5);
            }
          };
          J.prototype._removeFreeSpinMultiplier = function (Z0) {
            if (this._freeSpinMultiplierList.length > 0) {
              this._freeSpinMultiplierList.forEach(function (Z1) {
                k.nodePoolHandler.enqueueReusableItem(Z1, G.NodePoolName.Multiplier);
              });
              this._freeSpinMultiplierList = [];
            }
            if (Z0) {
              Z0();
            }
          };
          J.prototype._playMultiplierUpAudio = function (Z0) {
            switch (Z0) {
              case 1:
              case 2:
                j.playAudio(C.GENERAL_AUDIO.multiUp1.key);
                break;
              case 4:
              case 8:
                j.playAudio(C.GENERAL_AUDIO.multiUp2.key);
                break;
              case 16:
              case 32:
              case 64:
                j.playAudio(C.GENERAL_AUDIO.multiUp3.key);
                break;
              case 128:
              case 256:
              case 512:
              case 1024:
                j.playAudio(C.GENERAL_AUDIO.multiUp4.key);
            }
          };
          J.prototype._playMultiplierFlyAudio = function (Z0) {
            switch (Z0) {
              case 1:
              case 2:
              case 4:
              case 8:
              case 16:
              case 32:
              case 64:
                j.playAudio(C.GENERAL_AUDIO.multiFly.key);
                break;
              case 128:
              case 256:
              case 512:
              case 1024:
                j.playAudio(C.GENERAL_AUDIO.multiFlyBig.key);
            }
          };
          __decorate([q(cc.Node)], J.prototype, "holder", undefined);
          __decorate([q(cc.Node)], J.prototype, "tint", undefined);
          __decorate([q(cc.Prefab)], J.prototype, "multiplierItem", undefined);
          __decorate([q(cc.Node)], J.prototype, "multiplierContainer", undefined);
          __decorate([q(cc.Node)], J.prototype, "nextMultiplierEffect", undefined);
          __decorate([q(cc.Node)], J.prototype, "numberFacingPoint", undefined);
          __decorate([q(cc.Animation)], J.prototype, "introAnim", undefined);
          __decorate([q(cc.Node)], J.prototype, "introShine", undefined);
          __decorate([q(cc.Animation)], J.prototype, "shinningEffectAnim", undefined);
          __decorate([q(cc.Node)], J.prototype, "freeSpinMultiplierContainer", undefined);
          return __decorate([W], J);
        }(cc.Component);
        x.default = U;
        cc._RF.pop();
      }
      function B(X, J, Z0, Z1) {
        var Z2 = Math.pow(1 - X, 2) * J.x + (1 - X) * 2 * X * Z0.x + Math.pow(X, 2) * Z1.x;
        var Z3 = Math.pow(1 - X, 2) * J.y + (1 - X) * 2 * X * Z0.y + Math.pow(X, 2) * Z1.y;
        return cc.v2(Z2, Z3);
      }
      function P(X) {
        return B(X, F, H, w);
      }
    }, {
      AudioConstant: "AudioConstant",
      AudioManager: "AudioManager",
      GameConstant: "GameConstant",
      MultiplierItemController: "MultiplierItemController",
      MultiplierShiftHandler: "MultiplierShiftHandler",
      NodePoolHandler: "NodePoolHandler",
      Utils: "Utils",
      WBSGameUtils: "WBSGameUtils"
    }],
    MultiplierItemController: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "a071dzZWHNLxLKLeUJE1kCj", "MultiplierItemController")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("Utils");
        var x = I("NumberDisplayController");
        var L = I("MultiplierController");
        var D = cc._decorator;
        var k = D.ccclass;
        var C = D.property;
        var p = function (G) {
          function V() {
            var N = G !== null && G.apply(this, arguments) || this;
            N.content = undefined;
            N.multiplierNumberDisplayController = undefined;
            N.vfxAnim = undefined;
            N.multiplierNormalSpriteFrames = [];
            N.multiplierRedSpriteFrames = [];
            N.shine = undefined;
            N.multiplierNumber = undefined;
            N._numberFacingPoint = undefined;
            N._isSelected = false;
            return N;
          }
          var Q = {
            get: function () {
              return this._isSelected;
            },
            enumerable: false,
            configurable: true
          };
          __extends(V, G);
          Object.defineProperty(V.prototype, "isSelected", Q);
          V.prototype.init = function (N) {
            this._numberFacingPoint = N;
            this.reset();
            this.enableListener();
          };
          V.prototype.selected = function () {
            this._isSelected = true;
            var N = this.multiplierNumber;
            var Y = L.SELECTED_MULTIPLIER_SIZE_MAP[N];
            this.content.setScale(Y);
            this.content.stopAllActions();
            this.content.opacity = 255;
            if (N > 1) {
              this.showShine();
            }
          };
          V.prototype.deselected = function () {
            this._isSelected = false;
            var N = this.multiplierNumber;
            var Y = L.DESELECTED_MULTIPLIER_SIZE_MAP[N];
            this.content.setScale(Y);
            this.content.stopAllActions();
            this.content.opacity = 128;
            if (N >= 512) {
              var W = cc.sequence(cc.fadeTo(1.5, 178.5), cc.fadeTo(2, 128));
              this.content.runAction(W.repeatForever());
            }
            if (N > 1) {
              this.hideShine();
            } else {
              this.hideShine(true);
            }
          };
          V.prototype.showShine = function () {
            this.hideShine(true);
            var N = cc.sequence(cc.scaleTo(0.2, 0.7), cc.scaleTo(1, 0.5));
            this.shine.active = true;
            this.shine.runAction(N.repeatForever());
          };
          V.prototype.hideShine = function (N) {
            var Y = this;
            if (N === undefined) {
              N = false;
            }
            this.shine.stopAllActions();
            if (N) {
              this.shine.setScale(0);
              this.shine.active = false;
            } else {
              this.shine.runAction(cc.sequence(cc.scaleTo(0.3, 0), cc.callFunc(function () {
                Y.shine.active = false;
              })));
            }
          };
          V.prototype.show = function (N, Y) {
            var W = this;
            this.multiplierNumber = N;
            this.node.active = true;
            if (N !== -1) {
              if (N === 1024) {
                this.multiplierNumberDisplayController.numberSprite[0] = this.multiplierRedSpriteFrames[0];
                this.multiplierNumberDisplayController.numberSprite[1] = this.multiplierRedSpriteFrames[1];
                this.multiplierNumberDisplayController.numberSprite[2] = this.multiplierRedSpriteFrames[2];
                this.multiplierNumberDisplayController.numberSprite[4] = this.multiplierRedSpriteFrames[3];
                this.multiplierNumberDisplayController.numberSprite[12] = this.multiplierRedSpriteFrames[4];
              } else {
                this.multiplierNumberDisplayController.numberSprite[0] = this.multiplierNormalSpriteFrames[0];
                this.multiplierNumberDisplayController.numberSprite[1] = this.multiplierNormalSpriteFrames[1];
                this.multiplierNumberDisplayController.numberSprite[2] = this.multiplierNormalSpriteFrames[2];
                this.multiplierNumberDisplayController.numberSprite[4] = this.multiplierNormalSpriteFrames[3];
                this.multiplierNumberDisplayController.numberSprite[12] = this.multiplierNormalSpriteFrames[4];
              }
              this.multiplierNumberDisplayController.displayNumber(N);
            } else {
              this.multiplierNumberDisplayController.clear();
            }
            T.deferCallback(true)(function () {
              W.resetFacingAngle();
            });
            if (Y) {
              Y();
            }
          };
          V.prototype.playBreak = function (N, Y) {
            var W = this;
            var q = this.multiplierNumberDisplayController.node;
            q.stopAllActions();
            q.opacity = 255;
            q.runAction(cc.sequence(cc.delayTime(N), cc.spawn(cc.fadeOut(0.2), cc.scaleTo(0.3, 3), cc.sequence(cc.delayTime(0.05), cc.callFunc(function () {
              W.vfxAnim.node.active = true;
              W.vfxAnim.stop();
              W.vfxAnim.play();
            }))), cc.callFunc(function () {
              if (Y) {
                Y();
              }
            })));
          };
          V.prototype.unuse = function () {
            this.reset();
          };
          V.prototype.enableListener = function () {
            this.node.on(cc.Node.EventType.POSITION_CHANGED, this.resetFacingAngle, this);
          };
          V.prototype.disableListener = function () {
            this.node.off(cc.Node.EventType.POSITION_CHANGED, this.resetFacingAngle, this);
          };
          V.prototype.reset = function () {
            this._isSelected = false;
            this.hideShine(true);
            this.disableListener();
            var N = this.multiplierNumberDisplayController.node;
            N.stopAllActions();
            N.opacity = 255;
            this.vfxAnim.stop();
            this.vfxAnim.node.active = false;
          };
          V.prototype.resetFacingAngle = function () {
            if (this._numberFacingPoint) {
              var N = j(this.node, this._numberFacingPoint);
              this.node.angle = N;
            }
          };
          V.prototype.onDestroy = function () {
            this.disableListener();
          };
          __decorate([C(cc.Node)], V.prototype, "content", undefined);
          __decorate([C(x.default)], V.prototype, "multiplierNumberDisplayController", undefined);
          __decorate([C(cc.Animation)], V.prototype, "vfxAnim", undefined);
          __decorate([C([cc.SpriteFrame])], V.prototype, "multiplierNormalSpriteFrames", undefined);
          __decorate([C([cc.SpriteFrame])], V.prototype, "multiplierRedSpriteFrames", undefined);
          __decorate([C(cc.Node)], V.prototype, "shine", undefined);
          return __decorate([k], V);
        }(cc.Component);
        K.default = p;
        cc._RF.pop();
      }
      function j(G, V) {
        var Q = T.convertToNodeSpaceAR(G, G.getPosition(), V);
        var N = V.getPosition().sub(Q);
        var Y = Math.atan2(N.x, N.y);
        return -cc.misc.radiansToDegrees(Y);
      }
    }, {
      MultiplierController: "MultiplierController",
      NumberDisplayController: "NumberDisplayController",
      Utils: "Utils"
    }],
    MultiplierShiftHandler: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "b5c97V/nrtGXLgW0wUdIJa2", "MultiplierShiftHandler")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("MultiplierController");
        var x = I("WBSGameUtils");
        var L = function () {
          function D() {
            this._multiplierContainer = undefined;
            this._getMultiplierItems = undefined;
            this._createMultiplier = undefined;
          }
          D.prototype.init = function (k) {
            this._multiplierContainer = k.multiplierItemContainer;
            this._getMultiplierItems = k.getMultiplierItems;
            this._createMultiplier = k.createMultiplier;
          };
          D.prototype.playShiftRight = function (k, C, j) {
            var G = this._getMultiplierItems();
            var V = 0;
            var Q = 0;
            var N = [];
            var Y = function () {
              if (V === ++Q && j) {
                j();
              }
            };
            var W = function (f) {
              V++;
              var A = C[f];
              var M = f;
              var E = k.includes(A) ? k.indexOf(A) : -1;
              var F = G[M].node;
              var b = T.MULTIPLIER_T[M];
              var H = T.MULTIPLIER_T[E] !== undefined ? T.MULTIPLIER_T[E] : 0;
              x.lerpTo(function (w, U) {
                if (f === 3) {
                  T.MULTIPLIER_DESELECTED_SIZE;
                } else if (f === 2) {
                  U * 0.4;
                  T.MULTIPLIER_SELECTED_SIZE;
                }
                var B = U * U * U;
                w = cc.misc.lerp(b, H, B);
                var P = T.curveTo(w);
                F.setPosition(P.x, P.y, 0);
                if (w === H) {
                  Y();
                }
              }, b, H, 0.15);
            };
            for (var q = 0; q < C.length; q++) {
              W(q);
            }
            k.forEach(function (f) {
              if (!C.includes(f) && f !== -1) {
                N.push(f);
              }
            });
            function S(f) {
              V++;
              var A = 5 + f;
              var M = 4 - f;
              var E = z._createMultiplier(N[f], A).node;
              var F = T.curveTo(1);
              var b = T.MULTIPLIER_T[M];
              E.setPosition(F.x, F.y, 0);
              x.lerpTo(function (H, w) {
                var U = w * w * w;
                H = cc.misc.lerp(1, b, U);
                var B = T.curveTo(H);
                E.setPosition(B.x, B.y, 0);
                if (H === b) {
                  Y();
                }
              }, 1, b, 0.15);
            }
            var z = this;
            for (q = 0; q < N.length; q++) {
              S(q);
            }
          };
          D.prototype.playShiftLeft = function (k, C, j) {
            var G = this._getMultiplierItems();
            var V = 0;
            var Q = 0;
            var N = [];
            var Y = function () {
              if (V === ++Q && j) {
                j();
              }
            };
            var W = function (f) {
              V++;
              var A = C[f];
              var M = f;
              var E = k.includes(A) ? k.indexOf(A) : -1;
              var F = G[M].node;
              var b = T.MULTIPLIER_T[M];
              var H = T.MULTIPLIER_T[E] !== undefined ? T.MULTIPLIER_T[E] : 1;
              x.lerpTo(function (w, U) {
                var B = U * U * U;
                w = cc.misc.lerp(b, H, B);
                var P = T.curveTo(w);
                F.setPosition(P.x, P.y, 0);
                if (w === H) {
                  Y();
                }
              }, b, H, 0.075);
            };
            for (var q = 0; q < C.length; q++) {
              W(q);
            }
            k.forEach(function (f) {
              if (!C.includes(f) && f !== -1) {
                N.unshift(f);
              }
            });
            function S(f) {
              V++;
              var A = -1 - f;
              var M = 0 + f;
              var E = z._createMultiplier(N[f], A).node;
              var F = T.curveTo(0);
              var b = T.MULTIPLIER_T[M];
              E.setPosition(F.x, F.y, 0);
              x.lerpTo(function (H, w) {
                var U = w * w * w;
                H = cc.misc.lerp(0, b, U);
                var B = T.curveTo(H);
                E.setPosition(B.x, B.y, 0);
                if (H === b) {
                  Y();
                }
              }, 0, b, 0.075);
            }
            var z = this;
            for (q = 0; q < N.length; q++) {
              S(q);
            }
          };
          D.prototype._setSelectedMultiplierNodeScale = function (k) {
            var C = k.multiplierNumber;
            var u = T.SELECTED_MULTIPLIER_SIZE_MAP[C];
            k.node.setScale(u);
          };
          D.prototype._setDeselectedMultiplierNodeScale = function (k) {
            var C = k.multiplierNumber;
            var u = T.DESELECTED_MULTIPLIER_SIZE_MAP[C];
            k.node.setScale(u);
          };
          return D;
        }();
        K.default = L;
        cc._RF.pop();
      }
    }, {
      MultiplierController: "MultiplierController",
      WBSGameUtils: "WBSGameUtils"
    }],
    NavigationBar: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "0dc7dijGWtKO4QKzl8UL9Pz", "NavigationBar")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = cc._decorator;
        var x = T.ccclass;
        var L = T.property;
        var D = function (k) {
          function C() {
            var u = k !== null && k.apply(this, arguments) || this;
            u._navigator = undefined;
            u.animatedLayer = undefined;
            u.defaultLeftItem = undefined;
            u.rightItemContainer = undefined;
            u.leftItemContainer = undefined;
            u.middleItemContainer = undefined;
            u.titleLabel = undefined;
            u.background = undefined;
            u.shadow = undefined;
            u._items = [];
            u._pushAnimated = false;
            u._titleLabelColor = undefined;
            return u;
          }
          __extends(C, k);
          Object.defineProperty(C.prototype, "navigator", {
            get: function () {
              return this._navigator;
            },
            set: function (u) {
              this._navigator = u;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(C.prototype, "topItem", {
            get: function () {
              if (this._items && this._items.length > 0) {
                return this._items[this._items.length - 1];
              }
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(C.prototype, "backItem", {
            get: function () {
              if (this._items && this._items.length > 1) {
                return this._items[this._items.length - 2];
              }
            },
            enumerable: false,
            configurable: true
          });
          C.prototype.onLoad = function () {
            var u = this.node.width;
            var c = this.node.height;
            this.background.node.setContentSize(u, c);
            this.shadow.y = -c;
          };
          C.prototype.getBarHeight = function (u, c) {
            var p = this.node.width;
            var j = u.height;
            var l = c.top;
            var G = j + l;
            this.animatedLayer.setContentSize(p, j);
            this.animatedLayer.y = -l;
            this.node.height = G;
            this.shadow.y = -j;
            this._setItemsConfig(u.item_space_x);
            return G;
          };
          C.prototype.pushItem = function (j, G) {
            if (j) {
              var V = this._items[this._items.length - 1];
              var Q = this.leftItemContainer.children[0];
              var N = this.middleItemContainer.children[1];
              var Y = this.rightItemContainer.children[0];
              var W = V ? V.title : "";
              var q = V && !V.leftItem;
              var S = j.title;
              var z = undefined;
              var f = undefined;
              var A = j.rightItem instanceof cc.Node ? j.rightItem : undefined;
              var M = true;
              this._items.push(j);
              this._pushAnimated = G;
              if (j.middleItem instanceof cc.Node) {
                f = j.middleItem;
                j.title = "";
              }
              if (j.leftItem instanceof cc.Node) {
                z = j.leftItem;
                M = false;
              } else if (this._items.length > 1) {
                z = cc.instantiate(this.defaultLeftItem);
                this._createDefaultLeftItemEvents(z);
                var E = z.children ? z.getComponentInChildren(cc.Label) : undefined;
                if (E instanceof cc.Label && W) {
                  E.string = W;
                }
              }
              var F = {
                leftItem: Q,
                middleItem: N,
                rightItem: Y,
                title: W,
                useDefaultLeftItem: q
              };
              var b = {
                leftItem: z,
                middleItem: f,
                rightItem: A,
                title: S,
                useDefaultLeftItem: M
              };
              if (G) {
                this._playPushAnimation(F, b);
              } else {
                this._removeFromParent(Q);
                this._addChild(this.leftItemContainer, z);
                this._removeFromParent(N);
                this._addChild(this.middleItemContainer, f);
                this._removeFromParent(Y);
                this._addChild(this.rightItemContainer, A);
                this.titleLabel.string = S;
                this._titleLabelColor = this.titleLabel.node.color;
                if (shell.environment.getOrientationMode() === "land") {
                  this.titleLabel.fontSize = 42;
                  this.titleLabel.lineHeight = 50;
                }
              }
            }
          };
          C.prototype.popItem = function (j) {
            var G = this.topItem;
            if (G) {
              var V = this.backItem;
              this._items.pop();
              if (!V) {
                this.titleLabel.string = "";
                this.rightItemContainer.removeAllChildren(false);
                this.leftItemContainer.removeAllChildren(false);
                if (this.middleItemContainer.children[1]) {
                  this.middleItemContainer.children[1].removeFromParent(false);
                }
                this._titleLabelColor = this.titleLabel.node.color;
                return;
              }
              var Q = this._items[this._items.length - 2];
              var N = "";
              if (Q && !Q.middleItem) {
                N = Q.title;
              }
              var Y = this.leftItemContainer.children[0];
              var W = this.middleItemContainer.children[1];
              var q = this.rightItemContainer.children[0];
              var S = W ? "" : G.title;
              var z = !G.leftItem;
              var A = V.title;
              var M = undefined;
              var E = undefined;
              var F = V.rightItem instanceof cc.Node ? V.rightItem : undefined;
              var b = true;
              if (V.middleItem instanceof cc.Node) {
                E = V.middleItem;
                V.title = "";
              }
              if (V.leftItem instanceof cc.Node) {
                M = V.leftItem;
                b = false;
              } else if (this._items.length > 1) {
                M = cc.instantiate(this.defaultLeftItem);
                this._createDefaultLeftItemEvents(M);
                var H = M.children ? M.getComponentInChildren(cc.Label) : null;
                if (H) {
                  H.string = N;
                }
              }
              var w = {
                leftItem: Y,
                middleItem: W,
                rightItem: q,
                title: S,
                useDefaultLeftItem: z
              };
              var U = {
                leftItem: M,
                middleItem: E,
                rightItem: F,
                title: A,
                useDefaultLeftItem: b
              };
              if (j) {
                this._playPopAnimation(w, U);
              } else {
                this._removeFromParent(Y);
                this._addChild(this.leftItemContainer, M);
                this._removeFromParent(W);
                this._addChild(this.middleItemContainer, E);
                this._removeFromParent(q);
                this._addChild(this.rightItemContainer, F);
                this.titleLabel.string = A;
                this._titleLabelColor = this.titleLabel.node.color;
              }
            }
          };
          C.prototype.enableButtons = function () {
            var u = this.leftItemContainer.children[0];
            var c = this.rightItemContainer.children[0];
            if (u) {
              var p = u.getComponent(cc.Button);
              if (p) {
                p.interactable = true;
              }
            }
            if (c) {
              var j = c.getComponent(cc.Button);
              if (j) {
                j.interactable = true;
              }
            }
          };
          C.prototype.disableButtons = function () {
            var u = this.leftItemContainer.children[0];
            var c = this.rightItemContainer.children[0];
            if (u) {
              var p = u.getComponent(cc.Button);
              if (p) {
                p.interactable = false;
              }
            }
            if (c) {
              var j = c.getComponent(cc.Button);
              if (j) {
                j.interactable = false;
              }
            }
          };
          C.prototype.setTitleColor = function (u) {
            this.titleLabel.node.color = u;
          };
          C.prototype.setTitleSize = function (u) {
            this.titleLabel.fontSize = u;
          };
          C.prototype.removeItemsAtIndex = function (u) {
            if (!(this._items.length <= u)) {
              this._items.splice(u, 1);
            }
          };
          C.prototype._assignLabel = function (u) {
            u.node.setContentSize(this.titleLabel.node.width, this.titleLabel.node.height);
            u.string = this.titleLabel.string;
            u.fontSize = this.titleLabel.fontSize;
            u.lineHeight = this.titleLabel.lineHeight;
            u.verticalAlign = 1;
            if (this.titleLabel.font) {
              u.font = this.titleLabel.font;
            }
          };
          C.prototype._createDefaultLeftItemEvents = function (u) {
            var c = new cc.Component.EventHandler();
            c.target = this.node;
            c.component = "NavigationBar";
            c.handler = "onLeftItemPressed";
            u.getComponent(cc.Button).clickEvents.push(c);
          };
          C.prototype._setItemsConfig = function (u) {
            var c = this.node.width;
            var p = this.leftItemContainer;
            var j = -c / 2 + u + p.width / 2;
            var l = this.rightItemContainer;
            var G = c / 2 - u - l.width / 2;
            p.x = j;
            l.x = G;
          };
          C.prototype.onLeftItemPressed = function () {
            var u = this.navigator;
            this.navigator.topController;
            if (u && u.topController) {
              var c = this._pushAnimated;
              this.navigator.popController(c);
            }
          };
          C.prototype._playPushAnimation = function (j, G) {
            var V = j.leftItem;
            var Q = j.middleItem;
            var N = j.rightItem;
            var Y = j.title;
            var W = j.useDefaultLeftItem;
            var q = G.leftItem;
            var S = G.middleItem;
            var z = G.rightItem;
            var f = G.title;
            var A = G.useDefaultLeftItem;
            var M = !Q && !S;
            this._playPushMiddleItemAnimation(M, Y, f, Q, S);
            this._playPushLeftItemAnimation(A, W, M, V, q);
            this._playRightContainerFadeAnim(N, z);
          };
          C.prototype._playPopAnimation = function (j, G) {
            var V = j.leftItem;
            var Q = j.middleItem;
            var N = j.rightItem;
            var Y = j.title;
            var W = j.useDefaultLeftItem;
            var q = G.leftItem;
            var S = G.middleItem;
            var z = G.rightItem;
            var f = G.title;
            var A = G.useDefaultLeftItem;
            var M = !Q && !S;
            this._playPopMiddleItemAnimation(M, Y, f, Q, S);
            this._playPopLeftItemAnimation(A, W, M, V, q);
            this._playRightContainerFadeAnim(N, z);
          };
          C.prototype._playPushMiddleItemAnimation = function (j, G, V, Q, N, Y) {
            if (j) {
              var W = this.middleItemContainer;
              var q = this.leftItemContainer;
              var S = W.x - W.width * W.anchorX - q.x - q.width * (1 - q.anchorX);
              if (G) {
                var z = this.titleLabel.node;
                var A = z.parent.convertToWorldSpaceAR(cc.v2(z.x, z.y));
                var M = this.animatedLayer.convertToNodeSpaceAR(A);
                var E = new cc.Node();
                var F = E.addComponent(cc.Label);
                E.parent = this.animatedLayer;
                E.position = M;
                F.node.color = this._titleLabelColor;
                this._assignLabel(F);
                var b = cc.spawn(cc.moveBy(0.2, cc.v2(-S / 2, 0)).easing(cc.easeIn(3)), cc.fadeOut(0.2).easing(cc.easeIn(3)));
                E.runAction(cc.sequence(b, cc.callFunc(function () {
                  E.active = false;
                  E.removeFromParent();
                })));
              }
              W.x += S;
              W.opacity = 0;
              this.titleLabel.string = V;
              var H = cc.spawn(cc.moveBy(0.3, cc.v2(-S, 0)).easing(cc.easeOut(3)), cc.fadeIn(0.3).easing(cc.easeIn(3)));
              W.runAction(cc.sequence(cc.delayTime(0.1), H, cc.callFunc(function () {
                W.active = true;
                W.opacity = 255;
                if (Y) {
                  Y();
                }
              })));
            } else {
              this._playMiddleContainerFadeAnim(Q, N, V, Y);
            }
          };
          C.prototype._playPushLeftItemAnimation = function (j, G, V, Q, N, Y) {
            var W = this;
            if (j && G && V) {
              var q = undefined;
              var z = undefined;
              var M = undefined;
              var E = undefined;
              if (Q && Q.children) {
                q = Q.getComponentInChildren(cc.Label);
                z = Q.getComponentInChildren(cc.Sprite);
              }
              if (N && N.children) {
                M = N.getComponentInChildren(cc.Label);
                E = N.getComponentInChildren(cc.Sprite);
              }
              if (M) {
                if (q) {
                  var F = q.node;
                  var H = F.x;
                  var w = F.width;
                  var U = F.anchorX;
                  var B = H - w * U - H - w * (1 - U);
                  var P = cc.spawn(cc.moveBy(0.2, cc.v2(-B * 2, 0)).easing(cc.easeOut(3)), cc.fadeOut(0.2).easing(cc.easeIn(3)));
                  F.runAction(cc.sequence(P, cc.callFunc(function () {
                    F.active = false;
                  })));
                }
                var X = this.middleItemContainer;
                var J = this.leftItemContainer;
                var Z0 = X.x - X.width * X.anchorX - J.x - J.width * (1 - J.anchorX);
                var Z1 = E.node;
                var Z2 = M.node;
                if (N) {
                  J.addChild(N);
                }
                Z1.active = false;
                Z2.opacity = 0;
                Z2.x += Z0 / 2;
                var Z3 = cc.spawn(cc.moveBy(0.2, cc.v2(-Z0 / 2, 0)).easing(cc.easeOut(3)), cc.fadeIn(0.2).easing(cc.easeIn(3)));
                Z2.runAction(cc.sequence(cc.delayTime(0.2), Z3, cc.callFunc(function () {
                  Z2.opacity = 255;
                  Z1.active = true;
                  if (Q) {
                    Q.removeFromParent(false);
                  }
                  if (Y) {
                    Y();
                  }
                })));
              } else {
                this._playLeftContainerFadeAnim(Q, N, Y);
              }
            } else if (j && G && Q) {
              q = undefined;
              z = undefined;
              if (Q && Q.children) {
                q = Q.getComponentInChildren(cc.Label);
                z = Q.getComponentInChildren(cc.Sprite);
              }
              if (!q || !z) {
                this._playLeftContainerFadeAnim(Q, N, Y);
                return;
              }
              var Z4 = z.node;
              var Z5 = q.node;
              B = Z5.x - Z5.width * Z5.anchorX - Z4.x - Z4.width * (1 - Z4.anchorX);
              P = cc.spawn(cc.moveBy(0.2, cc.v2(-B, 0)).easing(cc.easeOut(3)), cc.fadeOut(0.2).easing(cc.easeIn(3)));
              Z5.runAction(cc.sequence(P, cc.callFunc(function () {
                if (Q) {
                  Q.removeFromParent(false);
                }
                if (N) {
                  W.leftItemContainer.addChild(N);
                }
                if (Y) {
                  Y();
                }
              })));
            } else {
              this._playLeftContainerFadeAnim(Q, N, Y);
            }
          };
          C.prototype._playPopLeftItemAnimation = function (j, G, V, Q, N, Y) {
            if (j && G && V) {
              var W = undefined;
              var q = undefined;
              var z = undefined;
              var A = undefined;
              if (Q && Q.children) {
                W = Q.getComponentInChildren(cc.Label);
                q = Q.getComponentInChildren(cc.Sprite);
              }
              if (N && N.children) {
                z = N.getComponentInChildren(cc.Label);
                A = N.getComponentInChildren(cc.Sprite);
              }
              if (!z || !W) {
                this._playLeftContainerFadeAnim(Q, N, Y);
                return;
              }
              var M = this.middleItemContainer;
              var E = this.leftItemContainer;
              var F = M.x - M.width * M.anchorX - E.x - E.width * (1 - E.anchorX);
              var H = W.node;
              var w = q.node;
              var U = H.x - H.width * H.anchorX - w.x - w.width * (1 - w.anchorX);
              var B = cc.spawn(cc.moveBy(0.2, cc.v2(F / 2, 0)).easing(cc.easeOut(3)), cc.fadeOut(0.2).easing(cc.easeIn(3)));
              if (N) {
                H.runAction(cc.sequence(B, cc.callFunc(function () {
                  H.active = false;
                })));
                var P = z.node;
                var X = A.node;
                X.active = false;
                P.opacity = 0;
                E.addChild(N);
                P.x -= U * 2;
                var J = cc.spawn(cc.moveBy(0.2, cc.v2(U * 2, 0)).easing(cc.easeOut(3)), cc.fadeIn(0.2).easing(cc.easeIn(3)));
                P.runAction(cc.sequence(cc.delayTime(0.2), J, cc.callFunc(function () {
                  P.opacity = 255;
                  X.active = true;
                  if (Q) {
                    Q.removeFromParent(false);
                  }
                  if (Y) {
                    Y();
                  }
                })));
              } else {
                H.runAction(cc.sequence(B, cc.callFunc(function () {
                  if (Q) {
                    Q.removeFromParent(false);
                  }
                  if (Y) {
                    Y();
                  }
                })));
              }
            } else if (j && G) {
              z = undefined;
              A = undefined;
              if (N && N.children) {
                z = N.getComponentInChildren(cc.Label);
                A = N.getComponentInChildren(cc.Sprite);
              }
              if (!z || !A) {
                this._playLeftContainerFadeAnim(Q, N, Y);
                return;
              }
              var Z0 = z.node;
              var Z1 = A.node;
              U = Z0.x - Z0.width * Z0.anchorX - Z1.x - Z1.width * (1 - Z1.anchorX);
              if (Q) {
                Q.removeFromParent(false);
              }
              if (N) {
                this.leftItemContainer.addChild(N);
              }
              Z0.opacity = 0;
              Z0.x -= U * 2;
              J = cc.spawn(cc.moveBy(0.2, cc.v2(U * 2, 0)).easing(cc.easeOut(3)), cc.fadeIn(0.2).easing(cc.easeIn(3)));
              Z0.runAction(cc.sequence(cc.delayTime(0.2), J, cc.callFunc(function () {
                Z0.opacity = 255;
                if (Y) {
                  Y();
                }
              })));
            } else {
              this._playLeftContainerFadeAnim(Q, N, Y);
            }
          };
          C.prototype._playPopMiddleItemAnimation = function (j, G, V, Q, N, Y) {
            if (j) {
              var W = this.leftItemContainer;
              var q = this.middleItemContainer;
              var S = q.x - q.width * q.anchorX - W.x - W.width * (1 - W.anchorX);
              if (G) {
                var z = this.titleLabel.node.parent.convertToWorldSpaceAR(cc.v2(this.titleLabel.node.x, this.titleLabel.node.y));
                var A = this.animatedLayer.convertToNodeSpaceAR(z);
                var M = new cc.Node();
                M.addComponent(cc.Label);
                var E = M.getComponent(cc.Label);
                M.parent = this.animatedLayer;
                E.node.color = this._titleLabelColor;
                M.position = A;
                this._assignLabel(E);
                var F = cc.spawn(cc.moveBy(0.2, cc.v2(S / 2, 0)).easing(cc.easeOut(3)), cc.fadeOut(0.2).easing(cc.easeOut(3)));
                M.runAction(cc.sequence(F, cc.callFunc(function () {
                  M.active = false;
                  M.removeFromParent();
                })));
              }
              this.titleLabel.string = V;
              q.x -= S / 2;
              q.opacity = 0;
              var b = cc.spawn(cc.moveBy(0.3, cc.v2(S / 2, 0)).easing(cc.easeOut(3)), cc.fadeIn(0.3).easing(cc.easeIn(3)));
              this.middleItemContainer.runAction(cc.sequence(cc.delayTime(0.1), b, cc.callFunc(function () {
                q.active = true;
                q.opacity = 255;
                if (Y) {
                  Y();
                }
              })));
            } else {
              this._playMiddleContainerFadeAnim(Q, N, V, Y);
            }
          };
          C.prototype._playLeftContainerFadeAnim = function (u, c, p) {
            var j = this.leftItemContainer;
            if (u) {
              u.removeFromParent(false);
            }
            if (c) {
              this.leftItemContainer.addChild(c);
            }
            j.opacity = 0;
            j.runAction(cc.sequence(cc.fadeIn(0.3).easing(cc.easeOut(3)), cc.callFunc(function () {
              if (p) {
                p();
              }
            })));
          };
          C.prototype._playMiddleContainerFadeAnim = function (u, c, p, j) {
            var l = this.middleItemContainer;
            if (u) {
              u.removeFromParent(false);
            }
            if (c) {
              l.addChild(c);
            }
            this.titleLabel.string = p;
            l.opacity = 0;
            l.runAction(cc.sequence(cc.fadeIn(0.3), cc.callFunc(function () {
              if (j) {
                j();
              }
            })));
          };
          C.prototype._playRightContainerFadeAnim = function (u, c, p) {
            var j = this;
            if (u) {
              u.removeFromParent(false);
            }
            if (c) {
              this.rightItemContainer.addChild(c);
            }
            this.rightItemContainer.opacity = 0;
            this.rightItemContainer.runAction(cc.sequence(cc.fadeIn(0.3).easing(cc.easeOut(3)), cc.callFunc(function () {
              j._titleLabelColor = j.titleLabel.node.color;
              if (p) {
                p();
              }
            })));
          };
          C.prototype._removeFromParent = function (u) {
            if (u && u.parent) {
              u.removeFromParent(false);
            }
          };
          C.prototype._addChild = function (u, c) {
            if (u && c) {
              u.addChild(c);
            }
          };
          __decorate([L(cc.Node)], C.prototype, "animatedLayer", undefined);
          __decorate([L(cc.Prefab)], C.prototype, "defaultLeftItem", undefined);
          __decorate([L(cc.Node)], C.prototype, "rightItemContainer", undefined);
          __decorate([L(cc.Node)], C.prototype, "leftItemContainer", undefined);
          __decorate([L(cc.Node)], C.prototype, "middleItemContainer", undefined);
          __decorate([L(cc.Label)], C.prototype, "titleLabel", undefined);
          __decorate([L(cc.Sprite)], C.prototype, "background", undefined);
          __decorate([L(cc.Node)], C.prototype, "shadow", undefined);
          return __decorate([x], C);
        }(cc.Component);
        K.default = D;
        cc._RF.pop();
      }
    }, {}],
    NavigationController: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "d742diXy4tHCIVIgSy1jEIb", "NavigationController")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("ViewController");
        var x = I("NavigationBar");
        var L = I("TransitionEnum");
        var D = I("NavigationDefaultTransition");
        var k = I("TransitionContext");
        var C = I("UIKit");
        var j = I("TabBarItem");
        var G = cc._decorator;
        var V = G.ccclass;
        var Q = G.property;
        var N = function (Y) {
          function W() {
            var q = Y !== null && Y.apply(this, arguments) || this;
            q.defaultNavigationBar = undefined;
            q.statusBarPlaceholderNode = undefined;
            q.contentNode = undefined;
            q._navigationBar = undefined;
            q._controllers = [];
            q._isOnTransistion = false;
            q._tabBarItem = undefined;
            return q;
          }
          __extends(W, Y);
          Object.defineProperty(W.prototype, "controllers", {
            get: function () {
              return this._controllers.slice();
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(W.prototype, "tabBarItem", {
            get: function () {
              return this._tabBarItem;
            },
            set: function (q) {
              this._tabBarItem = q;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(W.prototype, "topController", {
            get: function () {
              var q = this.controllers;
              if (q && q.length > 0) {
                return q[q.length - 1];
              }
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(W.prototype, "backController", {
            get: function () {
              var q = this.controllers;
              if (q && q.length > 1) {
                return q[q.length - 2];
              }
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(W.prototype, "navigationBar", {
            get: function () {
              if (!this._navigationBar) {
                this._navigationBar = this.defaultNavigationBar;
                if (this._navigationBar) {
                  this._navigationBar.navigator = this;
                }
              }
              return this._navigationBar;
            },
            set: function (q) {
              if (q !== this._navigationBar) {
                var S = this._navigationBar;
                this._navigationBar = q;
                if (this._navigationBar) {
                  this._navigationBar.navigator = this;
                }
                if (S) {
                  S.navigator = undefined;
                }
              }
            },
            enumerable: false,
            configurable: true
          });
          W.prototype.onLoad = function () {
            var q = cc.Canvas.instance.designResolution;
            var S = q.height;
            var z = q.width;
            this.node.setContentSize(z, S);
            this.navigationBar.node.width = z;
            var f = shell.environment.getOrientationMode() === "land" ? C.NavigationConfigs.bar.landscape : C.NavigationConfigs.bar.portrait;
            var A = this.navigationBar.getBarHeight(f, this.safeAreaInsets);
            var M = S - A;
            this.contentNode.setContentSize(z, M);
            this.contentNode.y = -A;
            this.statusBarPlaceholderNode.height = this.safeAreaInsets.top;
            this.node.on("size-changed", this._resize, this);
          };
          W.prototype.onEnable = function () {
            var q = this.topController;
            if (q) {
              q.enabled = true;
            }
          };
          W.prototype.onDisable = function () {
            var q = this.topController;
            if (q) {
              q.enabled = false;
            }
          };
          W.prototype.viewWillAppear = function (q) {
            var S = this.topController;
            if (S) {
              S.viewWillAppear(q);
            }
          };
          W.prototype.viewDidAppear = function (q) {
            var S = this.topController;
            if (S) {
              S.viewDidAppear(q);
            }
          };
          W.prototype.viewWillDisappear = function (q) {
            var S = this.topController;
            if (S) {
              S.viewWillDisappear(q);
            }
          };
          W.prototype.viewDidDisappear = function (q) {
            var S = this.topController;
            if (S) {
              S.viewDidDisappear(q);
            }
          };
          W.prototype.viewDidLayoutSubviews = function () {};
          W.prototype.pushController = function (q, S) {
            if (!this._isOnTransistion && q) {
              this._isOnTransistion = true;
              var z = this.contentNode;
              var A = z.width;
              var M = z.height;
              q.navigator = this;
              q.view.setContentSize(A, M);
              var E = (q.node.anchorY - z.anchorY) * M;
              var F = (q.node.anchorX - z.anchorX) * A;
              if (S) {
                F = (q.node.anchorX - z.anchorX + 1) * A;
              }
              q.view.setPosition(cc.v2(F, E));
              z.addChild(q.view);
              q.enabled = true;
              if (this._checkIfNeedCallAppear()) {
                q.viewWillAppear(S);
              } else {
                S = false;
              }
              var b = this.topController;
              if (b) {
                b.viewWillDisappear(S);
              }
              this.navigationBar.pushItem(q, S);
              if (S) {
                var H = undefined;
                var w = this.navigationDelegate;
                H = w && w.animationForOperation ? w.animationForOperation(L.NavigationControllerOperation.Push) : new D.DefaultNavigationPushTransition();
                var U = b ? b.view : undefined;
                var B = new k.TransitionContext(b, q, U, q.view, z);
                var P = this._pushViewControllerAnimateEnd.bind(this, q, true);
                H.animateTransition(B, P);
              } else {
                this._pushViewControllerAnimateEnd(q, false);
              }
            }
          };
          W.prototype.popController = function (q) {
            var S = this.topController;
            var z = this.backController;
            if (!this._isOnTransistion && S && z) {
              this._isOnTransistion = true;
              z.enabled = true;
              z.viewWillAppear(q);
              S.viewWillDisappear(q);
              this.navigationBar.popItem(q);
              if (q) {
                var f = undefined;
                var A = this.navigationDelegate;
                f = A && A.animationForOperation ? A.animationForOperation(L.NavigationControllerOperation.Pop) : new D.DefaultNavigationPopTransition();
                var M = new k.TransitionContext(S, z, S.view, z.view, this.contentNode);
                var E = this._popViewControllerAnimateEnd.bind(this, true);
                f.animateTransition(M, E);
              } else {
                this._popViewControllerAnimateEnd(false);
              }
            }
          };
          W.prototype.popToController = function (q, S) {
            for (var z = this.controllers.length - S; z;) {
              var f = this.topController;
              if (f) {
                f.enabled = false;
                this.navigationBar.popItem(false);
                this.contentNode.removeChild(f.view);
                this._controllers.pop();
                f.node.destroy();
              }
              z -= 1;
            }
            this.popController(q);
          };
          W.prototype.popToRootController = function (q) {
            for (var S = this.controllers.length - 2; S;) {
              var z = this.topController;
              if (z) {
                z.enabled = false;
                this.navigationBar.popItem(false);
                this.contentNode.removeChild(z.view);
                this._controllers.pop();
                z.node.destroy();
              }
              S -= 1;
            }
            this.popController(q);
          };
          W.prototype.hideNavigationBarBackground = function () {
            this.navigationBar.background.node.active = false;
            this.navigationBar.shadow.active = false;
          };
          W.prototype.showNavigationBarBackground = function () {
            this.navigationBar.background.node.active = true;
            this.navigationBar.shadow.active = true;
          };
          W.prototype.hideNavigationBar = function (q = true) {
            this.navigationBar.node.active = false;
            if (q) {
              this._resize();
            }
          };
          W.prototype.showNavigationBar = function (q = true) {
            this.navigationBar.node.active = true;
            if (q) {
              this._resize();
            }
          };
          W.prototype.enableItems = function () {
            this.navigationBar.enableButtons();
          };
          W.prototype.disableItems = function () {
            this.navigationBar.disableButtons();
          };
          W.prototype.setControllers = function (q) {
            if (q && q.length && !(q.length < 1)) {
              var S = this.controllers;
              var z = S.filter(function (E) {
                return q.indexOf(E) < 0;
              });
              for (var f = z.length - 1; f >= 0; f--) {
                var A = z[f];
                A.enabled = false;
                this.contentNode.removeChild(A.view);
                var M = S.indexOf(A);
                this.navigationBar.removeItemsAtIndex(M);
                A.node.destroy();
              }
              this._controllers = q;
            }
          };
          W.prototype._resize = function () {
            this._resizeContentNode();
            this._resizeViewControllers();
          };
          W.prototype._resizeContentNode = function () {
            var q = this.contentNode;
            var S = this.navigationBar.node.active ? this.navigationBar.node.height : this.statusBarPlaceholderNode.height;
            var z = this.node.height - S;
            q.setContentSize(this.node.width, z);
            q.y = -S;
          };
          W.prototype._resizeViewControllers = function () {
            var q = this.contentNode;
            var S = q.width;
            var z = q.height;
            var f = q.anchorX;
            var A = q.anchorY;
            this.controllers.forEach(function (M) {
              var E = M.node;
              var F = (E.anchorX - f) * S;
              var b = (E.anchorY - A) * z;
              M.viewWillLayoutSubviews();
              E.setContentSize(S, z);
              E.setPosition(cc.v2(F, b));
              M.viewDidLayoutSubviews();
            });
          };
          W.prototype._pushViewControllerAnimateEnd = function (q, S = false) {
            if (this._checkIfNeedCallAppear()) {
              q.viewDidAppear(S);
            }
            var z = this.topController;
            this._controllers.push(q);
            q.view.setContentSize(this.contentNode.width, this.contentNode.height);
            this._isOnTransistion = false;
            if (z) {
              z.viewDidDisappear(S);
              z.enabled = false;
            }
          };
          W.prototype._popViewControllerAnimateEnd = function (q = false) {
            var S = this.backController;
            if (S) {
              S.viewDidAppear(q);
            }
            this.scheduleOnce(this._popAnimationClearStacks.bind(this, q));
          };
          W.prototype._popAnimationClearStacks = function (q) {
            var S = this.topController;
            if (S) {
              this.contentNode.removeChild(S.view);
              this._controllers.pop();
              this._isOnTransistion = false;
              S.viewDidDisappear(q);
              S.enabled = false;
              if (S.destroy) {
                S.destroy();
              }
              S.node.destroy();
            }
          };
          W.prototype._checkIfNeedCallAppear = function () {
            return !(this.tabBarItem instanceof j.default) || !!this.topController;
          };
          __decorate([Q(x.default)], W.prototype, "defaultNavigationBar", undefined);
          __decorate([Q(cc.Node)], W.prototype, "statusBarPlaceholderNode", undefined);
          __decorate([Q(cc.Node)], W.prototype, "contentNode", undefined);
          return __decorate([V], W);
        }(T.default);
        K.default = N;
        cc._RF.pop();
      }
    }, {
      NavigationBar: "NavigationBar",
      NavigationDefaultTransition: "NavigationDefaultTransition",
      TabBarItem: "TabBarItem",
      TransitionContext: "TransitionContext",
      TransitionEnum: "TransitionEnum",
      UIKit: "UIKit",
      ViewController: "ViewController"
    }],
    NavigationDefaultTransition: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "2472eYgH9NBWJvtIuLXvIEh", "NavigationDefaultTransition")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        K.DefaultNavigationPopTransition = K.DefaultNavigationPushTransition = undefined;
        var T = I("ViewControllerTransition");
        var x = function (D) {
          function k() {
            return D !== null && D.apply(this, arguments) || this;
          }
          __extends(k, D);
          k.prototype.transitionDuration = function () {};
          k.prototype.animateTransition = function (C, u) {
            var c = C.getToController();
            var p = C.getFromController();
            var j = C.getContainer();
            var G = (p.node.anchorX - j.anchorX - 1) * j.width;
            var V = (p.node.anchorY - j.anchorY) * j.height;
            p.node.runAction(cc.sequence(cc.moveTo(0.4, cc.v2(G, V)).easing(cc.easeSineIn()), cc.callFunc(function () {
              p.node.setPosition(G, V);
            })));
            var Q = (c.node.anchorX - j.anchorX) * j.width;
            var N = (c.node.anchorY - j.anchorY) * j.height;
            c.node.runAction(cc.sequence(cc.moveTo(0.4, cc.v2(Q, N)).easing(cc.easeSineIn()), cc.callFunc(function () {
              c.node.setPosition(Q, N);
              if (u) {
                u();
              }
            })));
          };
          k.prototype.animationEnd = function () {};
          return k;
        }(T.default);
        K.DefaultNavigationPushTransition = x;
        var L = function (D) {
          function k() {
            return D !== null && D.apply(this, arguments) || this;
          }
          __extends(k, D);
          k.prototype.transitionDuration = function () {};
          k.prototype.animateTransition = function (C, u) {
            var c = C.getToController();
            var p = C.getFromController();
            var j = C.getContainer();
            var G = (p.node.anchorX - j.anchorX + 1) * j.width;
            var V = (p.node.anchorY - j.anchorY) * j.height;
            p.node.runAction(cc.sequence(cc.moveTo(0.4, cc.v2(G, V)).easing(cc.easeSineIn()), cc.callFunc(function () {
              p.node.setPosition(G, V);
            })));
            var Q = (c.node.anchorX - j.anchorX) * j.width;
            var N = (c.node.anchorY - j.anchorY) * j.height;
            c.node.runAction(cc.sequence(cc.moveTo(0.4, cc.v2(Q, N)).easing(cc.easeSineIn()), cc.callFunc(function () {
              c.node.setPosition(Q, N);
              if (u) {
                u();
              }
            })));
          };
          k.prototype.animationEnd = function () {};
          return k;
        }(T.default);
        K.DefaultNavigationPopTransition = L;
        cc._RF.pop();
      }
    }, {
      ViewControllerTransition: "ViewControllerTransition"
    }],
    NoSoundAdapter: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "d85610Qhw9DzLM9jdvZsDKB", "NoSoundAdapter")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("Utils");
        var x = I("AudioAdapter");
        var L = {
          load: function (u, c) {
            setTimeout(c, 0);
          },
          unload: function () {}
        };
        var D = 2;
        var k = function (u) {
          function c(p) {
            var j = u.call(this) || this;
            j._muted = false;
            j._volume = 1;
            j._loop = false;
            j._rate = 1;
            j._duration = D;
            j._startTime = 0;
            j._pausedTime = 0;
            j._onAudioEnded = j._onAudioEnded.bind(j);
            j._onFadeEnded = j._onFadeEnded.bind(j);
            j.reset(p);
            return j;
          }
          __extends(c, u);
          c.prototype.reset = function (p) {
            this._startTime = 0;
            this._pausedTime = 0;
            if (p !== undefined) {
              var j = p.loop;
              var G = p.volume;
              var V = p.muted;
              var Q = p.rate;
              var N = p.duration;
              if (typeof j == "boolean") {
                this._loop = j;
              }
              if (typeof G == "number" && G >= 0 && G <= 1) {
                this._volume = G;
              }
              if (typeof V == "boolean") {
                this._muted = V;
              }
              if (typeof Q == "number" && Q > 0) {
                this._rate = Q;
              }
              if (typeof N == "number" && N > 0) {
                this._duration = N;
              }
            }
          };
          c.prototype.destroy = function () {
            this.reset();
            this.removeAll();
          };
          Object.defineProperty(c.prototype, "instantVolume", {
            get: function () {
              return this._volume;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(c.prototype, "volume", {
            get: function () {
              return this._volume;
            },
            set: function (p) {
              this._volume = p;
              this._setFadeDispose(undefined);
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(c.prototype, "loop", {
            get: function () {
              return this._loop;
            },
            set: function (p) {
              if (p !== this._loop) {
                this._loop = p;
                if (p) {
                  this._setScheduleDispose(undefined);
                } else {
                  this._scheduleEnd();
                }
              }
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(c.prototype, "paused", {
            get: function () {
              return this._startTime > 0 && this._pausedTime > 0;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(c.prototype, "playing", {
            get: function () {
              return this._startTime > 0 && this._pausedTime === 0;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(c.prototype, "stopped", {
            get: function () {
              return this._startTime === 0 && this._pausedTime === 0;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(c.prototype, "rate", {
            get: function () {
              return this._rate;
            },
            set: function (p) {
              if (typeof p == "number" && p > 0 && p !== this._rate) {
                this._rate = p;
              }
            },
            enumerable: false,
            configurable: true
          });
          c.prototype.pause = function () {
            if (!this.paused) {
              this._pausedTime = Date.now();
              this._setFadeDispose(undefined);
              this._setScheduleDispose(undefined);
            }
          };
          c.prototype.resume = function () {
            if (this.paused) {
              this._startTime += Date.now() - this._pausedTime;
              this._pausedTime = 0;
              if (!this._loop) {
                this._scheduleEnd();
              }
            }
          };
          Object.defineProperty(c.prototype, "muted", {
            get: function () {
              return this._muted;
            },
            set: function (p) {
              this._muted = p;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(c.prototype, "duration", {
            get: function () {
              return this._duration;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(c.prototype, "currentTime", {
            get: function () {
              if (this._pausedTime > 0) {
                return (this._pausedTime - this._startTime) / 1000 % this._duration;
              } else {
                return (Date.now() - this._startTime) / 1000 % this._duration;
              }
            },
            enumerable: false,
            configurable: true
          });
          c.prototype.seek = function (p) {
            this._setFadeDispose(undefined);
            if (p >= this._duration && !this._loop) {
              this._setScheduleDispose(undefined);
              this._startTime = 0;
              this._pausedTime = 0;
              this._onFadeEnded();
              this.emit(shell.WebAudioEvent.ENDED);
              return;
            }
            if (this.paused) {
              this.resume();
            }
            this._startTime = Date.now() - p * 1000;
            if (!this._loop) {
              this._scheduleEnd();
            }
            this.emit(shell.WebAudioEvent.SEEK);
          };
          c.prototype.play = function (p, j) {
            this._startTime = Date.now();
            this._duration = typeof j == "number" && j > 0 ? j : this._duration;
            if (!this._loop) {
              this._scheduleEnd();
            }
          };
          c.prototype._onAudioEnded = function () {
            if (this._fadeDispose) {
              this._setFadeDispose(undefined);
              this._onFadeEnded();
            }
            this._startTime = 0;
            this._pausedTime = 0;
            this.emit(shell.WebAudioEvent.ENDED);
          };
          c.prototype.stop = function () {
            this._setFadeDispose(undefined);
            this._setScheduleDispose(undefined);
            this._startTime = 0;
            this._pausedTime = 0;
            this.emit(shell.WebAudioEvent.STOP);
          };
          c.prototype.fade = function (p, j, G) {
            this._volume = j;
            this._setFadeDispose(G);
          };
          c.prototype._onFadeEnded = function () {
            this.emit(shell.WebAudioEvent.FADED);
          };
          c.prototype._scheduleEnd = function () {
            var p = this._duration - this.currentTime;
            if (p >= 0) {
              this._setScheduleDispose(p);
            } else {
              this._setScheduleDispose(undefined);
            }
          };
          c.prototype._setScheduleDispose = function (p) {
            var j = this._scheduleDispose;
            if (j) {
              j();
            }
            this._scheduleDispose = p == null ? undefined : T.delayCallback(p)(this._onAudioEnded);
          };
          c.prototype._setFadeDispose = function (p) {
            var j = this._fadeDispose;
            if (j) {
              j();
            }
            this._fadeDispose = p == null ? undefined : T.delayCallback(p)(this._onFadeEnded);
          };
          return c;
        }(shell.CustomEventTarget);
        var C = function (u) {
          function c(p) {
            var j = this;
            p.loader = L;
            (j = u.call(this, p) || this)._estimatedDuration = p.estimatedDuration || D;
            return j;
          }
          __extends(c, u);
          c.prototype.getDuration = function (p) {
            if (typeof p == "number") {
              return u.prototype.getDuration.call(this, p);
            } else {
              return this._estimatedDuration;
            }
          };
          c.prototype.getAudioFromPool = function () {
            var p = this.factory.get();
            var j = {
              duration: this._estimatedDuration
            };
            var G = {
              duration: this._estimatedDuration
            };
            if (p) {
              p.reset(j);
              return p;
            } else {
              return new k(G);
            }
          };
          return c;
        }(x.default);
        K.default = C;
        cc._RF.pop();
      }
    }, {
      AudioAdapter: "AudioAdapter",
      Utils: "Utils"
    }],
    NodePoolHandler: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "a3adfRiBcZJbqfI73O63apo", "NodePoolHandler")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        K.nodePoolHandler = K.NodePoolHandler = undefined;
        var T = function () {
          function D() {
            this._nodePools = Object.create(null);
            this._registeredPrefabs = Object.create(null);
          }
          D.prototype.registerReusableItem = function (k, C, u, c = 0) {
            var p = this._registeredPrefabs;
            var j = this._nodePools;
            if (L(k) || L(C) || !L(j[k]) || !L(p[k])) {
              throw Error("registerReusableItem fail");
            }
            j[k] = new cc.NodePool(u);
            p[k] = C;
            if (c > 0) {
              for (var G = 0; G < c; G++) {
                var V = cc.instantiate(C);
                V._nodePoolPrefabId = C._uuid;
                this.enqueueReusableItem(V, k);
              }
            }
          };
          D.prototype.replaceReusableItem = function (k, C, u, c = 0) {
            this.unregisterReusableItem(k);
            this.registerReusableItem(k, C, u, c);
          };
          D.prototype.dequeueReusableItem = function (k) {
            var C = this._nodePools[k];
            if (C.size() > 0) {
              return C.get();
            }
            var u = this._registeredPrefabs[k];
            var c = cc.instantiate(u);
            c._nodePoolPrefabId = u._uuid;
            return c;
          };
          D.prototype.enqueueReusableItem = function (k, C) {
            var u = this._nodePools[C];
            var c = this._registeredPrefabs[C];
            if (k._nodePoolPrefabId === c._uuid) {
              k.removeFromParent();
              u.put(k);
            } else {
              k.destroy();
            }
          };
          D.prototype.unregisterReusableItem = function (k) {
            this.clear(k);
            delete this._nodePools[k];
            delete this._registeredPrefabs[k];
          };
          D.prototype.unregisterAllReusableItem = function () {
            var k;
            var C;
            var u = this._nodePools;
            var c = Object.keys(u);
            try {
              for (var p = __values(c), j = p.next(); !j.done; j = p.next()) {
                var l = j.value;
                this.unregisterReusableItem(l);
              }
            } catch (V) {
              var G = {
                error: V
              };
              k = G;
            } finally {
              try {
                if (j && !j.done && (C = p.return)) {
                  C.call(p);
                }
              } finally {
                if (k) {
                  throw k.error;
                }
              }
            }
          };
          D.prototype.clear = function (k) {
            var C = this._nodePools[k];
            if (C) {
              C.clear();
            }
          };
          D.prototype.clearAll = function () {
            var k;
            var C;
            var u = this._nodePools;
            var c = Object.keys(u);
            try {
              for (var p = __values(c), j = p.next(); !j.done; j = p.next()) {
                var l = j.value;
                this.clear(l);
              }
            } catch (V) {
              var G = {
                error: V
              };
              k = G;
            } finally {
              try {
                if (j && !j.done && (C = p.return)) {
                  C.call(p);
                }
              } finally {
                if (k) {
                  throw k.error;
                }
              }
            }
          };
          D.prototype.destroy = function () {
            this.unregisterAllReusableItem();
          };
          return D;
        }();
        K.NodePoolHandler = T;
        var x = new T();
        K.nodePoolHandler = x;
        cc._RF.pop();
      }
      function L(D) {
        return D == null;
      }
    }, {}],
    NotifyHelper: [function (Z, I) {
      'use strict';

      if (!cc._RF.push(I, "9dba9c1YjJGvYgyg8KnkuQD", "NotifyHelper")) {
        var R = System.get("bvframework").Notify;
        for (var K in R) {
          I.exports[K] = R[K];
        }
        I.exports.__esModule = true;
        cc._RF.pop();
      }
    }, {}],
    NumberCurvedController: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "22ff3ETL9NJ6LV0gfCqckfH", "NumberCurvedController")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("NumberDisplayController");
        var x = cc._decorator;
        var L = x.ccclass;
        var D = x.property;
        var k = function (C) {
          function u() {
            var c = C !== null && C.apply(this, arguments) || this;
            c.curveness = 0.1;
            return c;
          }
          __extends(u, C);
          u.prototype.dequeueNumberContainer = function (c) {
            var p = this.numberContainer.children[c];
            if (!p) {
              (p = new cc.Node("container")).width = this.nodeNumberWidth;
              this.numberContainer.addChild(p);
              var j = new cc.Node("numberSprite");
              j.addComponent(cc.Sprite);
              p.addChild(j);
            }
            return p;
          };
          u.prototype.displayNumber = function (p, j = true, G) {
            C.prototype.displayNumber.call(this, p, j, G);
            this._layout.updateLayout();
            var V = 0;
            this.numberContainer.children.forEach(function (z) {
              V += z.width;
            });
            for (var Q = 0; Q < this.numberContainer.children.length; Q++) {
              var N = this.dequeueNumberContainer(Q);
              var Y = V / 2;
              var W = (100 / Math.abs(this.curveness) + Y) / this.numberContainer.scale;
              var q = undefined;
              var S = undefined;
              if (this.curveness > 0) {
                q = Math.sqrt(Math.pow(W, 2) - Math.pow(N.x, 2));
                S = Math.atan2(Math.abs(q), N.x) * 180 / Math.PI;
                N.angle = -(90 - S);
              } else if (this.curveness < 0) {
                q = Math.sqrt(Math.pow(W, 2) + Math.pow(N.x, 2));
                S = Math.atan2(Math.abs(q), N.x) * 180 / Math.PI;
                N.angle = 90 - S;
              } else {
                N.angle = 0;
              }
              N.y = q - W;
            }
          };
          __decorate([D({
            min: -10,
            max: 10,
            slide: true,
            tooltip: false,
            type: cc.Float
          })], u.prototype, "curveness", undefined);
          return __decorate([L], u);
        }(T.default);
        K.default = k;
        cc._RF.pop();
      }
    }, {
      NumberDisplayController: "NumberDisplayController"
    }],
    NumberDisplayController: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "e13cc9FLShL66GevrFVSv5p", "NumberDisplayController")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("Utils");
        var x = I("NumberDisplayInterface");
        var L = cc._decorator;
        var D = L.ccclass;
        var k = L.property;
        var C = function (u) {
          function G() {
            var V = u !== null && u.apply(this, arguments) || this;
            V.numberSpriteAtlas = undefined;
            V.numberBlurSpriteAtlas = undefined;
            V.numberSprite = [];
            V.numberBlurSprite = [];
            V.kSprite = undefined;
            V.srcBlendFactor = cc.macro.BlendFactor.SRC_ALPHA;
            V.dstBlendFactor = cc.macro.BlendFactor.ONE_MINUS_SRC_ALPHA;
            V.nodeNumberWidth = 141;
            V.nodeNumberY = 0;
            V.nodeNumberScale = 1;
            V.commaWidth = 50;
            V.commaY = 0;
            V.commaScale = 1;
            V.decimalWidth = 60;
            V.decimalY = 0;
            V.decimalScale = 1;
            V.decimalNumberWidth = 121;
            V.decimalNumberY = 1;
            V.decimalNumberScale = 0.9;
            V.multiplySpriteWidth = 50;
            V.multiplySpriteY = 0;
            V.multiplySpriteScale = 1;
            V.layoutSpacingX = 0;
            V.layoutSpacingY = 0;
            V.blurScale = 1;
            V.spriteColor = "FFFFFF";
            V.disableFixedWidth = false;
            V.enablePrefixNumber = false;
            V._isScaling = false;
            V._widthBeforePreview = 0;
            V._preview = false;
            V._previewNumber = "0";
            V._originalScaleX = 0;
            V._originalScaleY = 0;
            V.attributesForNumberContainer = undefined;
            return V;
          }
          __extends(G, u);
          Object.defineProperty(G.prototype, "preview", {
            get: function () {
              return this._preview;
            },
            set: function (V) {
              this._preview = V;
              if (V) {
                this._widthBeforePreview = this.node.width;
                this.displayNumber(this.previewNumber);
              } else {
                this.clear();
                this.numberContainer.removeComponent(cc.Layout);
                this.node.width = this._widthBeforePreview;
                this._layout = undefined;
              }
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(G.prototype, "previewNumber", {
            get: function () {
              return this._previewNumber;
            },
            set: function (V) {
              this._previewNumber = V;
              this.displayNumber(V);
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(G.prototype, "currentNumberBlurSprite", {
            get: function () {
              if (this.numberBlurSpriteAtlas) {
                return this.numberBlurSpriteAtlas.getSpriteFrames();
              } else {
                return this.numberBlurSprite;
              }
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(G.prototype, "currentNumberSprite", {
            get: function () {
              if (this.numberSpriteAtlas) {
                return this.numberSpriteAtlas.getSpriteFrames();
              } else {
                return this.numberSprite;
              }
            },
            enumerable: false,
            configurable: true
          });
          G.prototype.onLoad = function () {
            this._originalScaleX = this.numberContainer.scaleX;
            this._originalScaleY = this.numberContainer.scaleY;
            this.numberContainer.on(cc.Node.EventType.SIZE_CHANGED, this.resizeNumberIfNeeded, this);
          };
          G.prototype.getNumberList = function (V, Q) {
            var N = /(?:\d+)(?:\.\d+)?/gm.exec(V.toString());
            if (N) {
              var Y = parseFloat(N[0]);
              var W = this._getNumberDisplay(Y, Q);
              var q = typeof V == "number" ? W : V.replace(N[0], W);
              var S = Array.from(q);
              if (this.enablePrefixNumber) {
                S.unshift("x");
              }
              return S;
            }
            return Array.from(V.toString());
          };
          G.prototype.getSpriteConfig = function (V) {
            switch (V) {
              case ",":
                var Q = {
                  width: this.commaWidth,
                  scale: this.commaScale,
                  y: this.commaY,
                  spriteFrame: this.currentNumberSprite[10]
                };
                return Q;
              case ".":
                var N = {
                  width: this.decimalWidth,
                  scale: this.decimalScale,
                  y: this.decimalY,
                  spriteFrame: this.currentNumberSprite[11]
                };
                return N;
              case "x":
                var Y = {
                  width: this.multiplySpriteWidth,
                  scale: this.multiplySpriteScale,
                  y: this.multiplySpriteY,
                  spriteFrame: this.currentNumberSprite[12]
                };
                return Y;
              case "k":
                var W = {
                  width: this.nodeNumberWidth,
                  scale: this.nodeNumberScale,
                  y: this.nodeNumberY,
                  spriteFrame: this.kSprite
                };
                return W;
              case " ":
                var q = {
                  width: this.commaWidth,
                  scale: this.commaScale,
                  y: this.commaY,
                  spriteFrame: undefined
                };
                return q;
              default:
                return;
            }
          };
          G.prototype.getNumberSpriteConfig = function (V, Q, N) {
            if (N) {
              return {
                scale: Q ? this.decimalNumberScale * this.blurScale : this.decimalNumberScale,
                width: this.decimalNumberWidth,
                y: this.decimalNumberY,
                spriteFrame: Q ? this.currentNumberBlurSprite[parseInt(V, 10)] : this.currentNumberSprite[parseInt(V, 10)]
              };
            } else {
              return {
                scale: this.nodeNumberScale,
                width: this.nodeNumberWidth,
                y: this.nodeNumberY,
                spriteFrame: Q ? this.currentNumberBlurSprite[parseInt(V, 10)] : this.currentNumberSprite[parseInt(V, 10)]
              };
            }
          };
          G.prototype.displayNumber = function (V, Q = true, N) {
            this._setupNumberContainer();
            var Y = this.getNumberList(V, Q);
            Y = Y.reverse();
            var W = false;
            this._clearNumberIfLenghtChange(Y.length);
            for (var q = 0; q < Y.length; q++) {
              var S = this.dequeueNumberContainer(q);
              var z = S.getChildByName("numberSprite").getComponent(cc.Sprite);
              var f = this.getSpriteConfig(Y[q]);
              if (f) {
                S.width = f.width;
                S.scaleX = S.scaleY = f.scale;
                z.node.y = f.y;
                z.spriteFrame = f.spriteFrame;
              } else {
                W = false;
                var A = T.getDefaultCurrencyFormat().decimalSeparator;
                var M = q < Y.indexOf(A);
                if (M && Y.indexOf(A) !== -1) {
                  W = !Q;
                }
                var E = this.getNumberSpriteConfig(Y[q], W, M && Y.indexOf(A) !== -1);
                S.scale = E.scale;
                S.width = E.width;
                z.node.y = E.y;
                z.spriteFrame = E.spriteFrame;
              }
              if (this.disableFixedWidth || S.width === -1) {
                S.width = z.node.width;
              }
              this._attributesForNumberContainer(q, Y[q], W, S);
            }
            if (this._layout) {
              this._layout.updateLayout();
            }
            if (N) {
              N();
            }
          };
          G.prototype._clearNumberIfLenghtChange = function (V) {
            var Q = this.numberContainer.children.length;
            if (V < Q) {
              for (var N = Q - V; N !== 0;) {
                var Y = this.numberContainer.children[0];
                Y.removeFromParent();
                Y.destroy();
                N--;
              }
            }
          };
          G.prototype.clear = function () {
            for (var V = this.numberContainer.children.length - 1; V > -1; V--) {
              var Q = this.numberContainer.children[V];
              Q.removeFromParent();
              Q.destroy();
            }
            this._revertScale();
            this.numberContainer.width = 0;
          };
          G.prototype._revertScale = function () {
            if (this._originalScaleX && this._originalScaleY) {
              this.numberContainer.scaleX = this._originalScaleX;
              this.numberContainer.scaleY = this._originalScaleY;
            }
          };
          G.prototype._getNumberDisplay = function (V, Q) {
            var N = V;
            var Y = "";
            var W = 1;
            if (this.enableShortenNumber && V > 999) {
              W = 1000;
              Y = "k";
            }
            var q = !T.getDefaultCurrencyFormat().hideDecimal && this.enableDecimal;
            N = q ? Math.floor(N / W) : Math.round(N / W);
            if (this.enableComma) {
              N = this.numberWithComma(N);
            }
            if (q) {
              N += this._getDecimalStringFrom(V, Q);
            }
            return N + Y;
          };
          G.prototype._getDecimalStringFrom = function (V, Q) {
            var N;
            var Y;
            var W;
            var q = T.getDefaultCurrencyFormat().decimalSeparator;
            if (this.enableShortenNumber && V > 999) {
              N = Math.round(V / 100) / 10;
              Y = 2;
              W = Q ? "" : q + "0";
            } else {
              N = V;
              Y = 3;
              W = q + "00";
            }
            var S = N.toString();
            if (S.indexOf(".") !== -1) {
              for (W = q + (W = S.substring(S.indexOf(".") + 1, S.indexOf(".") + Y)); W.length !== Y;) {
                W += "0";
              }
            }
            return W;
          };
          G.prototype._attributesForNumberContainer = function (V, Q, N, Y) {
            if (this.attributesForNumberContainer) {
              this.attributesForNumberContainer(V, Q, N, Y);
            }
          };
          G.prototype.dequeueNumberContainer = function (V) {
            var Q = this.numberContainer.children[V];
            if (!Q) {
              (Q = new cc.Node("container")).width = this.nodeNumberWidth;
              this.numberContainer.addChild(Q);
              var N = new cc.Node("numberSprite");
              N.addComponent(cc.Sprite);
              var Y = N.getComponent(cc.Sprite);
              Y.srcBlendFactor = this.srcBlendFactor;
              Y.dstBlendFactor = this.dstBlendFactor;
              Q.addChild(N);
              N.color = new cc.Color().fromHEX(this.spriteColor);
            }
            return Q;
          };
          G.prototype.resizeNumberIfNeeded = function () {
            var V = this.numberContainer.width;
            var Q = this.maxContainerSize / V;
            var N = V * this.numberContainer.scaleX;
            if (isFinite(Q) && Math.round(N) > this.maxContainerSize) {
              this.numberContainer.scale = Q;
            }
          };
          G.prototype._bounceEffect = function (V, Q, N) {
            this.numberContainer.runAction(cc.sequence(cc.scaleTo(0.08, V), cc.scaleTo(0.05, Q), cc.callFunc(N, this)));
          };
          G.prototype._setupNumberContainer = function () {
            if (!this._layout) {
              var V = this._layout = this.numberContainer.getComponent(cc.Layout);
              V ||= this._layout = this.numberContainer.addComponent(cc.Layout);
              V.resizeMode = cc.Layout.ResizeMode.CONTAINER;
              V.horizontalDirection = cc.Layout.HorizontalDirection.RIGHT_TO_LEFT;
              V.type = cc.Layout.Type.HORIZONTAL;
              V.spacingX = this.layoutSpacingX;
              V.spacingY = this.layoutSpacingY;
            }
          };
          G.prototype.onDestroy = function () {
            this.attributesForNumberContainer = undefined;
          };
          __decorate([k({
            type: cc.SpriteAtlas,
            tooltip: false
          })], G.prototype, "numberSpriteAtlas", undefined);
          __decorate([k({
            type: cc.SpriteAtlas,
            tooltip: false
          })], G.prototype, "numberBlurSpriteAtlas", undefined);
          __decorate([k({
            type: [cc.SpriteFrame],
            tooltip: false
          })], G.prototype, "numberSprite", undefined);
          __decorate([k({
            type: [cc.SpriteFrame]
          })], G.prototype, "numberBlurSprite", undefined);
          __decorate([k({
            type: cc.SpriteFrame
          })], G.prototype, "kSprite", undefined);
          __decorate([k({
            type: cc.macro.BlendFactor,
            tooltip: false
          }), k({
            type: cc.macro.BlendFactor,
            tooltip: false
          })], G.prototype, "srcBlendFactor", undefined);
          __decorate([k({
            type: cc.macro.BlendFactor,
            tooltip: false
          })], G.prototype, "dstBlendFactor", undefined);
          __decorate([k({
            type: cc.Integer,
            tooltip: false
          })], G.prototype, "nodeNumberWidth", undefined);
          __decorate([k({
            type: cc.Integer,
            tooltip: false
          })], G.prototype, "nodeNumberY", undefined);
          __decorate([k({
            type: cc.Float,
            tooltip: false
          })], G.prototype, "nodeNumberScale", undefined);
          __decorate([k({
            type: cc.Float,
            tooltip: false
          })], G.prototype, "commaWidth", undefined);
          __decorate([k({
            type: cc.Integer,
            tooltip: false
          })], G.prototype, "commaY", undefined);
          __decorate([k({
            type: cc.Float,
            tooltip: false
          })], G.prototype, "commaScale", undefined);
          __decorate([k({
            type: cc.Integer,
            tooltip: false
          })], G.prototype, "decimalWidth", undefined);
          __decorate([k({
            type: cc.Integer,
            tooltip: false
          })], G.prototype, "decimalY", undefined);
          __decorate([k({
            type: cc.Float,
            tooltip: false
          })], G.prototype, "decimalScale", undefined);
          __decorate([k({
            type: cc.Integer,
            tooltip: false
          })], G.prototype, "decimalNumberWidth", undefined);
          __decorate([k({
            type: cc.Integer,
            tooltip: false
          })], G.prototype, "decimalNumberY", undefined);
          __decorate([k({
            type: cc.Float,
            tooltip: false
          })], G.prototype, "decimalNumberScale", undefined);
          __decorate([k({
            type: cc.Integer,
            tooltip: false
          })], G.prototype, "multiplySpriteWidth", undefined);
          __decorate([k({
            type: cc.Integer,
            tooltip: false
          })], G.prototype, "multiplySpriteY", undefined);
          __decorate([k({
            type: cc.Float,
            tooltip: false
          })], G.prototype, "multiplySpriteScale", undefined);
          __decorate([k({
            type: cc.Float,
            tooltip: false
          })], G.prototype, "layoutSpacingX", undefined);
          __decorate([k({
            type: cc.Float,
            tooltip: false
          })], G.prototype, "layoutSpacingY", undefined);
          __decorate([k({
            type: cc.Float,
            tooltip: false
          })], G.prototype, "blurScale", undefined);
          __decorate([k({
            tooltip: false
          })], G.prototype, "spriteColor", undefined);
          __decorate([k({
            tooltip: false
          })], G.prototype, "disableFixedWidth", undefined);
          __decorate([k({
            tooltip: false
          })], G.prototype, "enablePrefixNumber", undefined);
          __decorate([k], G.prototype, "preview", null);
          __decorate([k({
            type: cc.String,
            visible: function () {
              return this.preview;
            }
          })], G.prototype, "previewNumber", null);
          return __decorate([D], G);
        }(x.default);
        K.default = C;
        cc._RF.pop();
      }
    }, {
      NumberDisplayInterface: "NumberDisplayInterface",
      Utils: "Utils"
    }],
    NumberDisplayInterface: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "6e9deOwoQZHDb/Mv4FAbr3R", "NumberDisplayInterface")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("Utils");
        var x = cc._decorator;
        var L = x.ccclass;
        var D = x.property;
        var k = function (C) {
          function u() {
            var l = C !== null && C.apply(this, arguments) || this;
            l.numberContainer = undefined;
            l.maxContainerSize = 1142;
            l.enableComma = true;
            l.enableDecimal = true;
            l.enableShortenNumber = false;
            return l;
          }
          __extends(u, C);
          u.prototype.numberWithComma = function (l) {
            var G = T.getDefaultCurrencyFormat().groupSeparator;
            return l.toString().replace(/\B(?=(\d{3})+(?!\d))/g, G);
          };
          u.prototype.setResizeAnimation = function (l) {
            this._resizeFunc = l;
          };
          u.prototype.displayNumber = function (l, G = true) {
            throw Error("NumberDisplayInterface: method must be overriden");
          };
          u.prototype.clear = function () {
            throw Error("NumberDisplayInterface: method must be overriden");
          };
          u.prototype.resizeNumberIfNeeded = function () {
            throw Error("NumberDisplayInterface: method must be overriden");
          };
          __decorate([D(cc.Node)], u.prototype, "numberContainer", undefined);
          __decorate([D(cc.Float)], u.prototype, "maxContainerSize", undefined);
          __decorate([D({
            tooltip: false
          })], u.prototype, "enableComma", undefined);
          __decorate([D({
            tooltip: false
          })], u.prototype, "enableDecimal", undefined);
          __decorate([D({
            tooltip: false
          })], u.prototype, "enableShortenNumber", undefined);
          return __decorate([L], u);
        }(cc.Component);
        K.default = k;
        cc._RF.pop();
      }
    }, {
      Utils: "Utils"
    }],
    NumberLabelControllerLite: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "88c0bvJUDVGt4Zbi3DnKpmf", "NumberLabelControllerLite")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("Utils");
        var x = cc.misc.lerp;
        var L = cc._decorator;
        var D = L.ccclass;
        var k = L.property;
        var C = function (u) {
          function c() {
            var p = u !== null && u.apply(this, arguments) || this;
            p.label = undefined;
            p.rollDuration = 2;
            p.maxWidth = 0;
            p._isIncrement = false;
            p._time = 0;
            p._startValue = 0;
            p._endValue = 0;
            p._counting = false;
            return p;
          }
          __extends(c, u);
          c.prototype.play = function (p, j) {
            if (this._counting) {
              this.unschedule(this._calculateNumber);
              this._counting = false;
            }
            this._startValue = p;
            this._endValue = j;
            this._time = 0;
            this._counting = true;
            this._isIncrement = !(p > j);
            this.schedule(this._calculateNumber, 0);
          };
          c.prototype.skip = function (p) {
            if (this._counting) {
              this.unschedule(this._calculateNumber);
              this._counting = false;
            }
            this.label.string = T.formatCurrency(p);
          };
          c.prototype._calculateNumber = function (p) {
            this._time += p;
            var j = this._time / this.rollDuration;
            j = j >= 1 ? 1 : 1 - Math.cos(j * Math.PI * 0.5);
            var G = x(this._startValue, this._endValue, j);
            if (this._isIncrement) {
              if (G >= this._endValue) {
                G = this._endValue;
                this.unschedule(this._calculateNumber);
                this._counting = false;
              }
            } else if (G <= this._endValue) {
              G = this._endValue;
              this.unschedule(this._calculateNumber);
              this._counting = false;
            }
            this.label.string = T.formatCurrency(G);
          };
          __decorate([k(cc.Label)], c.prototype, "label", undefined);
          __decorate([k(cc.Integer)], c.prototype, "rollDuration", undefined);
          __decorate([k(cc.Float)], c.prototype, "maxWidth", undefined);
          return __decorate([D], c);
        }(cc.Component);
        K.default = C;
        cc._RF.pop();
      }
    }, {
      Utils: "Utils"
    }],
    NumberLabelController: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "b6e176hgIFCvo12TMjQIRc7", "NumberLabelController")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("NumberDisplayInterface");
        var x = I("Utils");
        var L = cc._decorator.ccclass;
        var D = function (k) {
          function C() {
            var u = k !== null && k.apply(this, arguments) || this;
            u._isScaling = false;
            u._originalScaleX = 0;
            u._originalScaleY = 0;
            u._label = undefined;
            return u;
          }
          __extends(C, k);
          C.prototype.onLoad = function () {
            this._originalScaleX = this.numberContainer.scaleX;
            this._originalScaleY = this.numberContainer.scaleY;
            this._setupNumberContainer();
            this.numberContainer.on(cc.Node.EventType.SIZE_CHANGED, this.resizeNumberIfNeeded, this);
          };
          C.prototype.setPrefix = function (u) {
            this._prefix = u;
          };
          C.prototype.displayNumber = function (u, c = true, p) {
            this._endCallback = p;
            var j = this.getNumberList(u, c);
            this._label.string = this._prefix ? this._prefix + j : j;
            if (c) {
              var l = this._endCallback;
              this._endCallback = null;
              if (l) {
                l();
              }
            }
          };
          C.prototype.getNumberList = function (u, c) {
            var p = /(?:\d+)(?:\.\d+)?/gm.exec(u.toString());
            if (p) {
              var j = parseFloat(p[0]);
              var l = this._getNumberDisplay(j, c);
              if (typeof u == "number") {
                return l;
              } else {
                return u.replace(p[0], l);
              }
            }
            return u.toString();
          };
          C.prototype._getNumberDisplay = function (u, c) {
            var p = u;
            var j = "";
            var l = 1;
            if (this.enableShortenNumber && u > 999) {
              l = 1000;
              j = "k";
            }
            var G = !x.getDefaultCurrencyFormat().hideDecimal && this.enableDecimal;
            p = G ? Math.floor(p / l) : Math.round(p / l);
            if (this.enableComma) {
              p = this.numberWithComma(p);
            }
            if (G) {
              p += this._getDecimalStringFrom(u, c);
            }
            return p + j;
          };
          C.prototype._getDecimalStringFrom = function (u, c) {
            var p;
            var j;
            var l;
            var G = x.getDefaultCurrencyFormat().decimalSeparator;
            if (this.enableShortenNumber && u > 999) {
              p = Math.round(u / 100) / 10;
              j = 2;
              l = c ? "" : G + "0";
            } else {
              p = u;
              j = 3;
              l = G + "00";
            }
            var V = p.toString();
            if (V.indexOf(G) !== -1) {
              for (l = V.substring(V.indexOf(G), V.indexOf(G) + j); l.length !== j;) {
                l += "0";
              }
            }
            return l;
          };
          C.prototype.clear = function () {
            this._label.string = "";
            this._revertScale();
          };
          C.prototype.resizeNumberIfNeeded = function () {
            var u = this;
            if (!this._isScaling) {
              var c = this.numberContainer.width;
              var p = this.maxContainerSize / c;
              var j = c * this.numberContainer.scaleX;
              var l = this._endCallback;
              this._endCallback = null;
              if (isFinite(p) && !this._isScaling && Math.round(j) > this.maxContainerSize) {
                this._isScaling = true;
                var G = p - 0.06;
                function V() {
                  u._isScaling = false;
                  if (l) {
                    l();
                  }
                }
                if (this._resizeFunc) {
                  this._resizeFunc(this.numberContainer, G, p, V);
                } else {
                  this._bounceEffect(G, p, V);
                }
              } else {
                x.delayCallback(0)(function () {
                  if (l) {
                    l();
                  }
                });
              }
            }
          };
          C.prototype._revertScale = function () {
            if (this._originalScaleX && this._originalScaleY) {
              this.numberContainer.scaleX = this._originalScaleX;
              this.numberContainer.scaleY = this._originalScaleY;
            }
          };
          C.prototype._bounceEffect = function (u, c, p) {
            this.numberContainer.runAction(cc.sequence(cc.scaleTo(0.08, u), cc.scaleTo(0.05, c), cc.callFunc(p, this)));
          };
          C.prototype._setupNumberContainer = function () {
            this._label = this.numberContainer.getComponent(cc.Label);
            if (!this._label) {
              this._label = this.numberContainer.addComponent(cc.Label);
              this._label.fontSize = 45;
              this._label.lineHeight = 60;
              this._label.string = "";
            }
          };
          C.prototype.onDestroy = function () {
            this._endCallback = null;
            this._resizeFunc = null;
          };
          return __decorate([L], C);
        }(T.default);
        K.default = D;
        cc._RF.pop();
      }
    }, {
      NumberDisplayInterface: "NumberDisplayInterface",
      Utils: "Utils"
    }],
    NumberRollBaseController: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "b940fHCDN9PkIykJo0EuNqR", "NumberRollBaseController")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("NumberDisplayInterface");
        var x = cc._decorator;
        var L = x.ccclass;
        var D = x.property;
        var k = function (C) {
          function u() {
            var c = C !== null && C.apply(this, arguments) || this;
            c.rollDuration = 2;
            c.displayController = undefined;
            c._startValue = 0;
            c._maxValue = 0;
            c._duration = 0;
            c._time = 0;
            return c;
          }
          __extends(u, C);
          u.prototype.onLoad = function () {
            this.enabled = false;
          };
          u.prototype.play = function (c, p, j, l = true) {
            if (!(p < 0) && !(c < 0)) {
              if (c === p) {
                if (l) {
                  this.displayController.clear();
                }
                this.displayController.displayNumber(p, true, j);
                return;
              }
              this._onComplete = j;
              this._startValue = c;
              this._maxValue = p;
              this._duration = this.rollDuration;
              this._time = 0;
              if (l) {
                this.displayController.clear();
              }
              this.displayController.displayNumber(c, false);
              this.enabled = true;
            }
          };
          u.prototype.skip = function () {
            var c = this;
            if (this.enabled) {
              this.stop(false);
              this.displayController.displayNumber(this._maxValue, true, function () {
                var p = c._onComplete;
                c._onComplete = undefined;
                if (p) {
                  p();
                }
              });
            }
          };
          u.prototype.stop = function (c) {
            this.enabled = false;
            if (c) {
              this.displayController.clear();
              this._onComplete = undefined;
            }
          };
          u.prototype.update = function (c) {
            var p = this;
            this._time += c;
            var j = this._time / this._duration;
            if (j >= 1) {
              this.stop(false);
              this.displayController.displayNumber(this._maxValue, true, function () {
                var G = p._onComplete;
                p._onComplete = undefined;
                if (G) {
                  G();
                }
              });
            } else {
              j = 1 - Math.cos(j * Math.PI * 0.5);
              var l = cc.misc.lerp(this._startValue, this._maxValue, j);
              this.displayController.displayNumber(l, false);
            }
          };
          __decorate([D(cc.Integer)], u.prototype, "rollDuration", undefined);
          __decorate([D({
            override: true,
            type: T.default
          })], u.prototype, "displayController", undefined);
          return __decorate([L], u);
        }(cc.Component);
        K.default = k;
        cc._RF.pop();
      }
    }, {
      NumberDisplayInterface: "NumberDisplayInterface"
    }],
    NumberRollController: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "6ce4aSiKeVGJZPyEX2VbsSD", "NumberRollController")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("NumberDisplayController");
        var x = I("NumberRollBaseController");
        var L = cc._decorator;
        var D = L.ccclass;
        var k = L.property;
        var C = function (u) {
          function c() {
            var j = u !== null && u.apply(this, arguments) || this;
            j.displayController = undefined;
            return j;
          }
          var p = {
            type: T.default,
            override: true
          };
          __extends(c, u);
          __decorate([k(p)], c.prototype, "displayController", undefined);
          return __decorate([D], c);
        }(x.default);
        K.default = C;
        cc._RF.pop();
      }
    }, {
      NumberDisplayController: "NumberDisplayController",
      NumberRollBaseController: "NumberRollBaseController"
    }],
    NumberRollCurveController: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "a0a6doEXuNKgJy7Sh2yc8T3", "NumberRollCurveController")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("NumberCurvedController");
        var x = I("NumberRollBaseController");
        var L = cc._decorator;
        var D = L.ccclass;
        var k = L.property;
        var C = function (u) {
          function c() {
            var j = u !== null && u.apply(this, arguments) || this;
            j.displayController = undefined;
            return j;
          }
          var p = {
            type: T.default,
            override: true
          };
          __extends(c, u);
          __decorate([k(p)], c.prototype, "displayController", undefined);
          return __decorate([D], c);
        }(x.default);
        K.default = C;
        cc._RF.pop();
      }
    }, {
      NumberCurvedController: "NumberCurvedController",
      NumberRollBaseController: "NumberRollBaseController"
    }],
    NumberRollLabelController: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "9b7acp+xyJLMJ5gESfkIJHz", "NumberRollLabelController")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("NumberLabelController");
        var x = I("NumberRollBaseController");
        var L = cc._decorator;
        var D = L.ccclass;
        var k = L.property;
        var C = function (u) {
          function p() {
            var j = u !== null && u.apply(this, arguments) || this;
            j.displayController = undefined;
            return j;
          }
          var c = {
            type: T.default,
            override: true
          };
          __extends(p, u);
          __decorate([k(c)], p.prototype, "displayController", undefined);
          return __decorate([D], p);
        }(x.default);
        K.default = C;
        cc._RF.pop();
      }
    }, {
      NumberLabelController: "NumberLabelController",
      NumberRollBaseController: "NumberRollBaseController"
    }],
    OperatorJurisdictionModel: [function (Z, I) {
      'use strict';

      if (!cc._RF.push(I, "bcfa7PvQx1LKqzexGjCVrpW", "OperatorJurisdictionModel")) {
        var R = System.get("bvframework").OperatorJurisdictionModel;
        for (var K in R) {
          I.exports[K] = R[K];
        }
        I.exports.__esModule = true;
        cc._RF.pop();
      }
    }, {}],
    PageControlButton: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "49dd983G1VDGoSnw7stgTlI", "PageControlButton")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("Button");
        var x = cc._decorator;
        var L = x.ccclass;
        var D = x.property;
        var k = function (C) {
          function u() {
            var c = C !== null && C.apply(this, arguments) || this;
            c.sprite = undefined;
            c.selectImg = undefined;
            c.normalImg = undefined;
            c.selectTintColor = undefined;
            c.normalTintColor = undefined;
            c.index = 0;
            c._isSelect = false;
            return c;
          }
          __extends(u, C);
          u.prototype.init = function () {
            if (this.selectImg) {
              this.sprite.SpriteFrame = this.normalImg;
            }
            this.normalColor = this.normalTintColor;
            this._isSelect = false;
          };
          u.prototype.setSelect = function () {
            if (!this._isSelect) {
              if (this.selectImg) {
                this.sprite.spriteFrame = this.selectImg;
              }
              this.normalColor = this.selectTintColor;
              this._isSelect = true;
            }
          };
          u.prototype.setUnselect = function () {
            if (this._isSelect) {
              if (this.selectImg) {
                this.sprite.spriteFrame = this.normalImg;
              }
              this.normalColor = this.normalTintColor;
              this._isSelect = false;
            }
          };
          u.prototype.selectDot = function () {
            if ((!this.delegate || !this.delegate.canChangePage || !!this.delegate.canChangePage()) && !this._isSelect) {
              if (this.selectImg) {
                this.sprite.spriteFrame = this.selectImg;
              }
              this.normalColor = this.selectTintColor;
              this._isSelect = true;
              if (this.delegate && this.delegate.didSelectDotAtIndex) {
                this.delegate.didSelectDotAtIndex(this.index);
              }
            }
          };
          __decorate([D(cc.Sprite)], u.prototype, "sprite", undefined);
          __decorate([D(cc.SpriteFrame)], u.prototype, "selectImg", undefined);
          __decorate([D(cc.SpriteFrame)], u.prototype, "normalImg", undefined);
          __decorate([D(cc.Color)], u.prototype, "selectTintColor", undefined);
          __decorate([D(cc.Color)], u.prototype, "normalTintColor", undefined);
          __decorate([D(cc.Integer)], u.prototype, "index", undefined);
          return __decorate([L], u);
        }(T.default);
        K.default = k;
        cc._RF.pop();
      }
    }, {
      Button: "Button"
    }],
    PageControl: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "db0df9/6UZNW6sskb9QIFSg", "PageControl")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("PageControlButton");
        var x = cc._decorator;
        var L = x.ccclass;
        var D = x.property;
        var k = function (C) {
          function _u() {
            var c = C !== null && C.apply(this, arguments) || this;
            c.buttonPrefab = undefined;
            c.delegate = undefined;
            c._currentPage = 0;
            c._totalPage = 0;
            c._dotButtons = [];
            return c;
          }
          __extends(_u, C);
          _u.prototype.init = function (c, p, j) {
            if (!(c >= p) && !(c < 0)) {
              this.node.removeAllChildren();
              this._totalPage = p;
              this.delegate = j;
              var l = [];
              for (var G = 0; G < p; G++) {
                var V = cc.instantiate(this.buttonPrefab);
                V.parent = this.node;
                var Q = V.getComponent(T.default);
                Q.index = G;
                Q.delegate = this;
                Q.init();
                l.push(Q);
              }
              l[c].setSelect();
              this._currentPage = c;
              this._dotButtons = l;
            }
          };
          _u.prototype.layoutContainer = function (c) {
            this.getComponent(cc.Layout).spacingX = c;
          };
          _u.prototype.changeCurrentPage = function (c) {
            var p = this._totalPage;
            if (!(c < 0) && !(c >= p)) {
              var j = this._dotButtons;
              j[this._currentPage].setUnselect();
              j[c].setSelect();
              this._currentPage = c;
            }
          };
          _u.prototype.getCurrentPage = function () {
            return this._currentPage;
          };
          _u.prototype.didSelectDotAtIndex = function (c) {
            this._dotButtons[this._currentPage].setUnselect();
            this._currentPage = c;
            if (this.delegate && this.delegate.changePage) {
              this.delegate.changePage(c);
            }
          };
          _u.prototype.canChangePage = function () {
            var c = this.delegate;
            return !c || !c.enableChangePage || !!c.enableChangePage();
          };
          __decorate([D(cc.Prefab)], _u.prototype, "buttonPrefab", undefined);
          return __decorate([L], _u);
        }(cc.Component);
        K.default = k;
        cc._RF.pop();
      }
    }, {
      PageControlButton: "PageControlButton"
    }],
    PayoutEffectBackController: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "83864gT5ThLe76prA/1WJXD", "PayoutEffectBackController")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("SimpleAnimationController");
        var x = cc._decorator;
        var L = x.ccclass;
        var D = x.property;
        var k = function (C) {
          function u() {
            var c = C !== null && C.apply(this, arguments) || this;
            c.vfxANode = undefined;
            c.psVfxBAnim = undefined;
            c.psVfxCAnim = undefined;
            return c;
          }
          __extends(u, C);
          u.prototype.clear = function () {
            this.vfxANode.stopAllActions();
            this.vfxANode.active = false;
            var c = this.psVfxBAnim;
            var p = this.psVfxCAnim;
            c.stop();
            c.node.stopAllActions();
            c.node.active = false;
            p.stop();
            p.node.stopAllActions();
            p.node.active = false;
          };
          u.prototype.destroy = function () {
            this.clear();
            this.node.destroy();
            return C.prototype.destroy.call(this);
          };
          u.prototype.highlightSymbol = function (c = false) {
            var p = this.vfxANode;
            var j = this.psVfxBAnim;
            var l = this.psVfxCAnim;
            var G = l.node;
            p.active = true;
            p.stopAllActions();
            G.stopAllActions();
            j.play();
            l.play();
            if (c) {
              p.scale = 1;
              p.opacity = 255;
              G.scale = 1;
              G.opacity = 255;
            } else {
              p.scale = 0;
              p.opacity = 0;
              p.runAction(cc.spawn(cc.fadeIn(0.15), cc.scaleTo(0.225, 1).easing(cc.easeBackOut())));
              G.scale = 0;
              G.opacity = 0;
              G.runAction(cc.spawn(cc.fadeIn(0.2), cc.scaleTo(0.3, 1).easing(cc.easeBackOut())));
            }
          };
          u.prototype.stopHighlightSymbol = function (c) {
            var p = this.vfxANode;
            var j = this.psVfxBAnim;
            var l = this.psVfxCAnim;
            var G = l.node;
            p.stopAllActions();
            p.runAction(cc.fadeOut(0.3));
            j.stop();
            G.stopAllActions();
            G.runAction(cc.sequence(cc.fadeOut(0.45), cc.callFunc(function () {
              l.stop();
              if (c) {
                c();
              }
            })));
          };
          __decorate([D(cc.Node)], u.prototype, "vfxANode", undefined);
          __decorate([D(T.default)], u.prototype, "psVfxBAnim", undefined);
          __decorate([D(T.default)], u.prototype, "psVfxCAnim", undefined);
          return __decorate([L], u);
        }(cc.Component);
        K.default = k;
        cc._RF.pop();
      }
    }, {
      SimpleAnimationController: "SimpleAnimationController"
    }],
    PayoutEffectController: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "73aac2A++ZIEKvEvkb2PS7F", "PayoutEffectController")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T;
        var x = I("Utils");
        var L = I("NodePoolHandler");
        var D = I("AudioConstant");
        var k = I("AudioManager");
        var C = I("GameConstant");
        var j = I("PayoutEffectBackController");
        var G = I("PayoutEffectFrontController");
        var V = I("SimpleAnimationController");
        var Q = cc._decorator;
        var N = Q.ccclass;
        var Y = Q.property;
        (function (q) {
          q[q.NONE = 0] = "NONE";
          q[q.HIGHLIGHT = 1] = "HIGHLIGHT";
          q[q.BREAK_SYMBOL = 2] = "BREAK_SYMBOL";
          q[q.SHOW_WILD = 3] = "SHOW_WILD";
          q[q.HIDE_WILD = 4] = "HIDE_WILD";
        })(T ||= {});
        var W = function (q) {
          function S() {
            var z = q !== null && q.apply(this, arguments) || this;
            z.backVfxHolder = undefined;
            z.frontVfxHolder = undefined;
            z.wildVfxAnim = undefined;
            z._payoutEffectFrontController = undefined;
            z._payoutEffectBackController = undefined;
            z._currentPayoutEffectState = T.NONE;
            return z;
          }
          __extends(S, q);
          S.prototype.clear = function () {
            this._currentPayoutEffectState = T.NONE;
            this._payoutEffectBackController = undefined;
            this._payoutEffectFrontController = undefined;
            this.hideWildVfx(false);
            this.backVfxHolder.removeAllChildren();
            this.frontVfxHolder.removeAllChildren();
          };
          S.prototype.destroy = function () {
            this.clear();
            this.node.destroy();
            return q.prototype.destroy.call(this);
          };
          S.prototype.highlightSymbol = function (z = false) {
            if (this._currentPayoutEffectState !== T.HIGHLIGHT) {
              this._currentPayoutEffectState = T.HIGHLIGHT;
              if (!this._payoutEffectBackController) {
                this._initBackItem(this.backVfxHolder);
              }
              this._payoutEffectBackController.highlightSymbol(z);
            }
          };
          S.prototype.stopHighlightSymbol = function (z) {
            var A = this;
            if (!this._payoutEffectBackController) {
              this._initBackItem(this.backVfxHolder);
            }
            this._payoutEffectBackController.stopHighlightSymbol(function () {
              A._enqueceBackItem();
              if (z) {
                z();
              }
            });
          };
          S.prototype.breakSymbol = function (z, A) {
            var M = this;
            if (this._currentPayoutEffectState !== T.BREAK_SYMBOL) {
              this._currentPayoutEffectState = T.BREAK_SYMBOL;
              if (!this._payoutEffectFrontController) {
                var E = z ? this.backVfxHolder : this.frontVfxHolder;
                this._initFrontItem(E);
              }
              k.stopAudio(D.GENERAL_AUDIO.symShrink.key);
              k.playAudio(D.GENERAL_AUDIO.symShrink.key);
              if (!z) {
                this.hideWildVfx(true);
              }
              this._payoutEffectFrontController.breakSymbol(function () {
                if (M._payoutEffectBackController) {
                  M._payoutEffectBackController.stopHighlightSymbol();
                }
              }, function () {
                M._enqueceFrontItem();
                if (A) {
                  A();
                }
              });
            }
          };
          S.prototype.showWildVfx = function (z = true) {
            if (this._currentPayoutEffectState !== T.SHOW_WILD) {
              this._currentPayoutEffectState = T.SHOW_WILD;
              var A = this.wildVfxAnim;
              A.stop();
              A.play();
              var M = A.node;
              M.active = true;
              M.stopAllActions();
              M.opacity = 0;
              if (z) {
                M.runAction(cc.fadeIn(0.3));
              } else {
                M.opacity = 255;
              }
            }
          };
          S.prototype.hideWildVfx = function (z) {
            if (this._currentPayoutEffectState !== T.HIDE_WILD || !z) {
              this._currentPayoutEffectState = T.HIDE_WILD;
              var A = this.wildVfxAnim;
              var M = A.node;
              if (z) {
                M.stopAllActions();
                M.runAction(cc.sequence(cc.fadeOut(0.3), cc.callFunc(function () {
                  A.stop();
                })));
              } else {
                A.stop();
              }
            }
          };
          S.prototype._initFrontItem = function (z) {
            var A = L.nodePoolHandler.dequeueReusableItem(C.NodePoolName.PayoutEffectFrontItem);
            this._payoutEffectFrontController = A.getComponent(G.default);
            this._payoutEffectFrontController.clear();
            z.addChild(A);
            return A;
          };
          S.prototype._enqueceFrontItem = function () {
            var z = this;
            x.delayCallback(1)(function () {
              if (z._payoutEffectFrontController) {
                if (z._payoutEffectFrontController) {
                  z._payoutEffectFrontController.clear();
                }
                L.nodePoolHandler.enqueueReusableItem(z._payoutEffectFrontController.node, C.NodePoolName.PayoutEffectFrontItem);
                z._payoutEffectFrontController = undefined;
              }
            });
          };
          S.prototype._initBackItem = function (z) {
            var A = L.nodePoolHandler.dequeueReusableItem(C.NodePoolName.PayoutEffectBackItem);
            this._payoutEffectBackController = A.getComponent(j.default);
            this._payoutEffectBackController.clear();
            z.addChild(A);
            return A;
          };
          S.prototype._enqueceBackItem = function () {
            var z = this;
            x.delayCallback(1)(function () {
              if (z._payoutEffectBackController) {
                if (z._payoutEffectBackController) {
                  z._payoutEffectBackController.clear();
                }
                L.nodePoolHandler.enqueueReusableItem(z._payoutEffectBackController.node, C.NodePoolName.PayoutEffectBackItem);
                z._payoutEffectBackController = undefined;
              }
            });
          };
          __decorate([Y(cc.Node)], S.prototype, "backVfxHolder", undefined);
          __decorate([Y(cc.Node)], S.prototype, "frontVfxHolder", undefined);
          __decorate([Y(V.default)], S.prototype, "wildVfxAnim", undefined);
          return __decorate([N], S);
        }(cc.Component);
        K.default = W;
        cc._RF.pop();
      }
    }, {
      AudioConstant: "AudioConstant",
      AudioManager: "AudioManager",
      GameConstant: "GameConstant",
      NodePoolHandler: "NodePoolHandler",
      PayoutEffectBackController: "PayoutEffectBackController",
      PayoutEffectFrontController: "PayoutEffectFrontController",
      SimpleAnimationController: "SimpleAnimationController",
      Utils: "Utils"
    }],
    PayoutEffectFrontController: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "047ecNX+XBPIY0Z8sYHPeIe", "PayoutEffectFrontController")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("Utils");
        var x = I("SimpleAnimationController");
        var L = cc._decorator;
        var D = L.ccclass;
        var k = L.property;
        var C = function (u) {
          function c() {
            var p = u !== null && u.apply(this, arguments) || this;
            p.psVfxDAnim = undefined;
            p.psVfxEAnim = undefined;
            p.bulletHoleAnim = undefined;
            return p;
          }
          __extends(c, u);
          c.prototype.clear = function () {
            var p = this.psVfxDAnim;
            var j = this.psVfxEAnim;
            var G = this.bulletHoleAnim;
            p.stop();
            p.node.stopAllActions();
            p.node.active = false;
            p.node.getComponent(cc.Sprite).spriteFrame = undefined;
            j.stop();
            j.node.stopAllActions();
            j.node.active = false;
            j.node.getComponent(cc.Sprite).spriteFrame = undefined;
            G.stop();
            G.node.stopAllActions();
            G.node.active = false;
            G.node.getComponent(cc.Sprite).spriteFrame = undefined;
          };
          c.prototype.breakSymbol = function (p, j) {
            var G = this;
            var V = this.bulletHoleAnim;
            var Q = V.node;
            var N = Q.getComponent(cc.Sprite);
            function Y() {
              G.clear();
            }
            var W = V.getClips();
            var q = T.randomInt(0, V.getClips().length - 1);
            Q.opacity = 255;
            Q.scale = 1;
            V.stop();
            N.spriteFrame = undefined;
            V.play(W[q].name, function () {
              if (p) {
                p();
              }
              G.psVfxDAnim.play();
              G.psVfxEAnim.play(undefined, Y);
              Q.stopAllActions();
              Q.runAction(cc.fadeOut(0.45));
              if (j) {
                j();
              }
            });
          };
          c.prototype.destroy = function () {
            this.node.destroy();
            return u.prototype.destroy.call(this);
          };
          __decorate([k(x.default)], c.prototype, "psVfxDAnim", undefined);
          __decorate([k(x.default)], c.prototype, "psVfxEAnim", undefined);
          __decorate([k(x.default)], c.prototype, "bulletHoleAnim", undefined);
          return __decorate([D], c);
        }(cc.Component);
        K.default = C;
        cc._RF.pop();
      }
    }, {
      SimpleAnimationController: "SimpleAnimationController",
      Utils: "Utils"
    }],
    PlayerModel: [function (Z, I) {
      'use strict';

      if (!cc._RF.push(I, "a0229IKmbpNBb61dHEQilWX", "PlayerModel")) {
        var R = System.get("bvframework").PlayerModel;
        I.exports.default = R;
        I.exports.__esModule = true;
        cc._RF.pop();
      }
    }, {}],
    PopOutItemHandler: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "ed9375KsD1NcYjBhMUREze+", "PopOutItemHandler")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = cc._decorator.ccclass;
        var x = function () {
          function L() {
            this._onClickCallback = undefined;
            this._popoutItemShowCallback = undefined;
            this._popoutItemHideCallback = undefined;
            this._node = undefined;
            this._controller = undefined;
          }
          L.prototype.init = function (D, k) {
            var C = cc.instantiate(D);
            k.addChild(C);
            this._node = C;
            this._controller = C.getComponent("PopOutItem");
            this._popoutItemShowCallback = this._controller.show.bind(this._controller);
            this._popoutItemHideCallback = this._controller.hide.bind(this._controller);
            C.active = false;
          };
          L.prototype.getPopoutItem = function () {
            return this._node;
          };
          L.prototype.setCancelCallback = function (D) {
            this._onClickCallback = D;
          };
          L.prototype._click = function () {
            var D = this._onClickCallback;
            if (D) {
              D();
            }
          };
          L.prototype.destroy = function () {
            this.node.destroy();
            _super.prototype.destroy.call(this);
          };
          L.prototype.setPopoutItemShowCallback = function (D) {
            this._popoutItemShowCallback = D;
          };
          L.prototype.runPopoutItemShowCallback = function (D, k, C, u, c, p, j, G, V) {
            this._node.active = true;
            this._node.on(cc.Node.EventType.TOUCH_END, this._click, this);
            this._controller.setCancelCallback(this._click.bind(this));
            if (this._popoutItemShowCallback) {
              this._popoutItemShowCallback(D, k, C, u, c, p, j, G, V);
            }
          };
          L.prototype.setPopoutItemHideCallback = function (D) {
            this._popoutItemHideCallback = D;
          };
          L.prototype.runPopoutItemHideCallback = function () {
            var D = this;
            if (this._popoutItemHideCallback) {
              this._popoutItemHideCallback(function () {
                D._node.off(cc.Node.EventType.TOUCH_END, D._click, D);
                D._node.active = false;
              });
            }
          };
          return __decorate([T], L);
        }();
        K.default = x;
        cc._RF.pop();
      }
    }, {}],
    PopOutItem: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "5beaedmutZIkKPi8z2EJ82d", "PopOutItem")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = cc._decorator;
        var x = T.ccclass;
        T.property;
        var L = function (D) {
          function k() {
            return D !== null && D.apply(this, arguments) || this;
          }
          __extends(k, D);
          k.prototype.show = function (C, u, c, p, j, G, V, Q, N) {
            this.showItem(C, u, c, p, j, G, V, Q, N);
          };
          k.prototype.hide = function () {
            this.hideItem();
          };
          k.prototype.showItem = function (C, u, c, p, j) {
            this.setPayoutValue(p, u);
            this.node.active = true;
            this.node.setPosition(j);
            if (C) {
              C();
            }
          };
          k.prototype.hideItem = function () {
            this.node.active = false;
          };
          k.prototype.destroy = function () {
            this.node.destroy();
            D.prototype.destroy.call(this);
          };
          k.prototype.setPayoutValue = function (C, u) {
            var c = u[C];
            Object.keys(c).reverse();
          };
          k.prototype.setCancelCallback = function (C) {
            this._cancalCallback = C;
          };
          k.prototype.cancalCallback = function () {
            if (this._cancalCallback) {
              this._cancalCallback();
            }
          };
          return __decorate([x], k);
        }(cc.Component);
        K.default = L;
        cc._RF.pop();
      }
    }, {}],
    PopOutTintController: [function (R, K, g) {
      'use strict';

      if (!cc._RF.push(K, "58b31+llD1BAb9tUvY4+l2s", "PopOutTintController")) {
        Object.defineProperty(g, "__esModule", {
          value: true
        });
        var x = {
          positionX: 0,
          positionY: 0,
          width: 1080,
          height: 2340,
          color: cc.Color.BLACK,
          opacityFadeTo: 150,
          defaultOpacity: 0,
          fadeInDuration: 0.2,
          fadeOutDuration: 0.2
        };
        var L = x;
        var D = cc._decorator.ccclass;
        var k = function (C) {
          function u() {
            var c = C !== null && C.apply(this, arguments) || this;
            c._fadeTo = 0;
            c._fadeInDuration = 0.2;
            c._fadeOutDuration = 0.2;
            return c;
          }
          __extends(u, C);
          u.prototype.unuse = function () {
            this.node.opacity = 0;
          };
          u.prototype.reuse = function () {
            this.node.opacity = 0;
          };
          u.prototype.setup = function (c) {
            var p = __assign(__assign({}, L), c);
            this.node.setPosition(p.positionX, p.positionY);
            this.node.setContentSize(p.width, p.height);
            this.node.color = p.color;
            this.node.opacity = this._defaultOpacity = p.defaultOpacity;
            this._fadeTo = p.opacityFadeTo;
            this._fadeInDuration = p.fadeInDuration;
            this._fadeOutDuration = p.fadeOutDuration;
          };
          u.prototype.show = function (c) {
            var p = this;
            if (this._isShow) {
              if (c) {
                c();
              }
            } else {
              this.node.stopAllActions();
              this.node.runAction(cc.sequence(cc.fadeTo(this._fadeInDuration, this._fadeTo), cc.callFunc(function () {
                p._isShow = true;
                if (c) {
                  c();
                }
              })));
            }
          };
          u.prototype.hide = function (c) {
            this._isShow = false;
            this.node.stopAllActions();
            this.node.runAction(cc.sequence(cc.fadeTo(this._fadeOutDuration, this._defaultOpacity), cc.callFunc(function () {
              if (c) {
                c();
              }
            })));
          };
          u.prototype.destroy = function () {
            this.node.destroy();
            C.prototype.destroy.call(this);
          };
          return __decorate([D], u);
        }(cc.Component);
        g.default = k;
        cc._RF.pop();
      }
    }, {}],
    Preference: [function (Z, I) {
      'use strict';

      if (!cc._RF.push(I, "f7e90cT1I9BDL45c7FgvgSo", "Preference")) {
        var R = System.get("common").Preference;
        for (var K in R) {
          I.exports[K] = R[K];
        }
        I.exports.__esModule = true;
        cc._RF.pop();
      }
    }, {}],
    Printer: [function (Z, I) {
      'use strict';

      if (!cc._RF.push(I, "75992e1c0JLNIAsOHARyF2L", "Printer")) {
        var R = System.get("bvframework").Printer;
        for (var K in R) {
          I.exports[K] = R[K];
        }
        I.exports.__esModule = true;
        cc._RF.pop();
      }
    }, {}],
    PrizeState: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "b8e16tOyU5GT4m5ZQseMAOn", "PrizeState")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("AutoSpinHandler");
        var x = I("SlotAnalyticsEnum");
        var L = I("UIState");
        var D = I("SlotGameTools");
        var k = I("SettingMenuHelper");
        var C = I("Utils");
        I("TweaksData");
        var u = function (p) {
          function j(G, V, Q) {
            var N = p.call(this, G, V, Q) || this;
            N.name = "Prize State";
            return N;
          }
          __extends(j, p);
          j.prototype.setSlotController = function (G) {
            this.slotController = G;
          };
          j.prototype.setSpinButtonController = function (G) {
            this.spinButtonController = G;
          };
          j.prototype.run = function () {
            p.prototype.run.call(this);
            if (this.spinButtonController.isAutoSpin()) {
              this.enableSpinAction();
            }
            this.renderPrize();
          };
          j.prototype.exit = function () {
            this.disableSpinAction();
            p.prototype.exit.call(this);
          };
          j.prototype.destroy = function () {
            p.prototype.destroy.call(this);
            this.spinButtonController = undefined;
            this.slotController = undefined;
          };
          j.prototype.onReady = function () {};
          j.prototype.onRun = function () {};
          j.prototype.onForceExit = function (G) {
            G();
          };
          j.prototype.onExit = function (G) {
            G();
          };
          j.prototype.onDestroy = function (G) {
            G();
          };
          j.prototype.runBigPrizeState = function (G, V) {
            if (V) {
              V();
            }
          };
          j.prototype.runMediumPrizeState = function (G, V) {
            if (V) {
              V();
            }
          };
          j.prototype.runNoWinPrizeState = function (G) {
            var V = this.dataSource.playerModel.balance;
            k.settingMenuHelper.setBalance(V);
            if (G) {
              G();
            }
          };
          j.prototype.renderPrize = function () {
            C.spawnCallback(this.renderLines.bind(this), this.playPrize.bind(this))(this.exit.bind(this));
          };
          j.prototype.renderLines = function (G) {
            if (this.dataSource.transactionModel.winLines) {
              this.playAllLines(G);
            } else if (G) {
              G();
            }
          };
          j.prototype.playAllLines = function (G) {
            G();
          };
          j.prototype.playPrize = function (G) {
            var V = this;
            var Q = this.getWinThresholds();
            var N = this.dataSource.transactionModel.totalWinAmount;
            if (D.isBigWinThreshold(N, Q)) {
              C.sequenceCallback(D.emitSocialBigWinStart, function (Y) {
                V.runBigPrizeState(N, Y);
              }, D.emitSocialBigWinEnd)(G);
            } else if (D.isMediumWinThreshold(N, Q)) {
              this.runMediumPrizeState(N, G);
            } else if (N > 0) {
              this.runSmallPrizeState(N, G);
            } else {
              this.runNoWinPrizeState(G);
            }
          };
          j.prototype.getWinThresholds = function () {
            return D.getWinThresholds(this.dataSource);
          };
          j.prototype.onClickSpinButton = function () {
            var G = this.spinButtonController;
            T.exitAutoSpin(G);
            G.disableButton();
            this.disableSpinAction();
          };
          j.prototype.enableSpinAction = function () {
            this.spinButtonController.setOnClickCallback(this.onClickSpinButton.bind(this, x.SpinTrigger.CLICK));
          };
          j.prototype.disableSpinAction = function () {
            this.spinButtonController.clearOnClickCallback();
          };
          return j;
        }(L.default);
        K.default = u;
        cc._RF.pop();
      }
    }, {
      AutoSpinHandler: "AutoSpinHandler",
      SettingMenuHelper: "SettingMenuHelper",
      SlotAnalyticsEnum: "SlotAnalyticsEnum",
      SlotGameTools: "SlotGameTools",
      TweaksData: "TweaksData",
      UIState: "UIState",
      Utils: "Utils"
    }],
    QuitGameWithEvent: [function (Z, I) {
      'use strict';

      if (!cc._RF.push(I, "810d7ZWlFFHNJtnMN8hmalR", "QuitGameWithEvent")) {
        var R = System.get("bvframework").QuitGameWithEvent;
        for (var K in R) {
          I.exports[K] = R[K];
        }
        I.exports.__esModule = true;
        cc._RF.pop();
      }
    }, {}],
    QuitGame: [function (Z, I) {
      'use strict';

      if (!cc._RF.push(I, "d5fa8VRcgJD0a9wBWcZ0zoO", "QuitGame")) {
        var R = System.get("bvframework").QuitGame;
        for (var K in R) {
          I.exports[K] = R[K];
        }
        I.exports.__esModule = true;
        cc._RF.pop();
      }
    }, {}],
    RefreshWorldHandler: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "4ef5cJw0YpAx5UIePlauVio", "RefreshWorldHandler")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        K.RefreshWorldGameState = undefined;
        var T;
        var x = I("RequestHandler");
        var L = I("Utils");
        var D = I("GenericLoadingScreenController");
        (function (u) {
          u[u.STANDARD = 0] = "STANDARD";
          u[u.PROGRESSING = 1] = "PROGRESSING";
        })(T = K.RefreshWorldGameState ||= {});
        var k = cc._decorator.ccclass;
        var C = function () {
          function u() {
            this.refreshWorldGameState = T.STANDARD;
          }
          u.prototype.initialize = function (c) {
            this.generalControllers = c.generalController;
            this.bonusControllers = c.bonusController ? c.bonusController : undefined;
            this.extraControllers = c.extraController ? c.extraController : undefined;
            this.dataSource = c.dataSource;
            this.apiClient = c.apiClient;
            this.settingMenuHelper = c.settingMenuHelper;
            this.walletHelper = c.walletHelper;
            this.refreshWorldGameState = c.refreshWorldGameState ? c.refreshWorldGameState : T.STANDARD;
          };
          u.prototype.refreshWorldByChangeWalletIdle = function (c, p) {
            L.sequenceCallback(this.loadBundle.bind(this), this._setUpBetValue.bind(this), this._exitAutoSpinAndDisabledSpinButton.bind(this), this._settingMenuCleanUp.bind(this), this.resetController.bind(this), L.deferCallback(true), L.deferCallback(true), this.executeTransition.bind(this), c, this._getReevaluateBet.bind(this), this._setupWallet.bind(this), this.changeWalletIdleSetUp.bind(this), this.reenableSpinButton.bind(this))(p);
          };
          u.prototype.refreshWorldByBetOptionIdle = function (c, p) {
            var j = p || function () {};
            L.sequenceCallback(this.loadBundle.bind(this), this._exitAutoSpinAndDisabledSpinButton.bind(this), this._showLoadingPage.bind(this), this._settingMenuCleanUp.bind(this), this._getChangeBetOptionsApiCall.bind(this), this.resetController.bind(this), L.deferCallback(true), L.deferCallback(true), this.executeTransition.bind(this), c, this._setupWallet.bind(this), this.betOptionPreIdleSetUp.bind(this), this._hideLoadingPage.bind(this), this.betOptionIdleSetUp.bind(this), this.reenableSpinButton.bind(this))(j);
          };
          u.prototype._showLoadingPage = function (c) {
            D.showLoadingPage(c);
          };
          u.prototype._hideLoadingPage = function (c) {
            D.hideLoadingPage(c);
          };
          u.prototype._setupWallet = function (c) {
            var p = this.walletHelper;
            var j = this.dataSource;
            p.setupWallet(j.lastTransactionRawData);
            if (c) {
              c();
            }
          };
          u.prototype._setUpBetValue = function (p) {
            var j = this.dataSource;
            var G = this.settingMenuHelper;
            var V = j.systemModel;
            var Q = V.betSizeList;
            var N = V.betLevelList;
            var Y = V.featureBuy;
            var W = j.transactionModel;
            var q = W.betLevelValue;
            var S = W.betSizeValue;
            var z = j.playerModel.minimumBetAmount;
            G.betSizeList = Q;
            G.betSizeValue = S;
            G.betLevelList = N;
            G.betLevelValue = q;
            G.featureBuyThreshold = Y && Y.threshold;
            G.minimumBetAmount = z;
            G.updateBetValues();
            if (p) {
              p();
            }
          };
          u.prototype._getChangeBetOptionsApiCall = function (c) {
            var p = this.dataSource.transactionModel;
            var j = {
              cs: p.betSizeValue,
              ml: p.betLevelValue
            };
            this._getNewWorldInfo(c, j);
          };
          u.prototype._getNewWorldInfo = function (c, p) {
            var j = this.apiClient;
            var G = this.dataSource;
            var V = this.settingMenuHelper;
            x.doAPIRequest({
              name: "Update Game Info",
              apiRequest: j.updateGameInfo.bind(j),
              apiRequestParam: p,
              errorTitle: shell.I18n.t("General.ErrorChangeFailed")
            }, function (Q, N) {
              if (N && N.dt) {
                var Y = G.systemModel;
                var W = Y.betSizeList;
                var q = Y.betLevelList;
                var S = G.transactionModel;
                var z = S.betLevelValue;
                var f = S.betSizeValue;
                V.betSizeList = W;
                V.betSizeValue = f;
                V.betLevelList = q;
                V.betLevelValue = z;
                V.updateBetValues();
                if (c) {
                  c();
                }
              }
            });
          };
          u.prototype._exitAutoSpinAndDisabledSpinButton = function (c) {
            var p = this.generalControllers;
            p.spinButtonController.exitAutoSpinMode();
            p.spinButtonController.disableButton();
            if (c) {
              c();
            }
          };
          u.prototype._settingMenuCleanUp = function (c) {
            this.settingMenuHelper.setWinAmount(0);
            if (c) {
              c();
            }
          };
          u.prototype._getReevaluateBet = function (c) {
            var p = this.settingMenuHelper;
            if (p.reevaluateBet()) {
              p.updateBetValues();
              this._checkGameStateAndUpdateBetAPI(c);
            } else if (c) {
              c();
            }
          };
          u.prototype._checkGameStateAndUpdateBetAPI = function (c) {
            switch (this.refreshWorldGameState) {
              case T.STANDARD:
                if (c) {
                  c();
                }
                break;
              case T.PROGRESSING:
                this._getChangeBetOptionsApiCall(c);
            }
          };
          u.prototype.loadBundle = function (c) {
            if (c) {
              c();
            }
          };
          u.prototype.reenableSpinButton = function (c) {
            var p = this.generalControllers.spinButtonController;
            p.idle();
            p.enableButton();
            if (c) {
              c();
            }
          };
          u.prototype.resetController = function (c) {
            if (c) {
              c();
            }
          };
          u.prototype.executeTransition = function (c) {
            if (c) {
              c();
            }
          };
          u.prototype.changeWalletIdleSetUp = function (c) {
            if (c) {
              c();
            }
          };
          u.prototype.betOptionPreIdleSetUp = function (c) {
            if (c) {
              c();
            }
          };
          u.prototype.betOptionIdleSetUp = function (c) {
            if (c) {
              c();
            }
          };
          return __decorate([k], u);
        }();
        K.default = C;
        cc._RF.pop();
      }
    }, {
      GenericLoadingScreenController: "GenericLoadingScreenController",
      RequestHandler: "RequestHandler",
      Utils: "Utils"
    }],
    RegionUtils: [function (Z, I) {
      'use strict';

      if (!cc._RF.push(I, "478c5ZURp1N1Ide2QVm+Hgx", "RegionUtils")) {
        var R = System.get("bvframework").RegionUtils;
        for (var K in R) {
          I.exports[K] = R[K];
        }
        I.exports.__esModule = true;
        cc._RF.pop();
      }
    }, {}],
    RemainingFreeSpinController: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "a2463gehDRMQaO5G/PwztxI", "RemainingFreeSpinController")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("NodePoolHandler");
        var x = I("AudioConstant");
        var L = I("AudioManager");
        var D = I("GameConstant");
        var k = I("SimpleAnimationController");
        var C = cc._decorator;
        var j = C.ccclass;
        var G = C.property;
        var V = function (Q) {
          function N() {
            var Y = Q !== null && Q.apply(this, arguments) || this;
            Y.numberDisplayNode = undefined;
            Y.remainingSprite = undefined;
            Y.lastFreeSpinSprite = undefined;
            Y.numberDisplayLayout = undefined;
            Y.numberDisplayContainer = undefined;
            Y.effectHolder = undefined;
            Y.upgradeItem = undefined;
            Y._displayState = D.DisplayState.HIDE;
            Y._freeSpinCount = 0;
            Y._previousSpinCount = 0;
            Y._increaseFreeSpinCallback = undefined;
            Y._numberDisplayController = undefined;
            return Y;
          }
          __extends(N, Q);
          Object.defineProperty(N.prototype, "numberDisplayController", {
            get: function () {
              this._numberDisplayController ||= this.numberDisplayNode.getComponent("NumberDisplayController");
              return this._numberDisplayController;
            },
            enumerable: false,
            configurable: true
          });
          N.prototype.init = function (Y) {
            this.node.active = false;
            this.remainingSprite.spriteFrame = Y.remainingFreeSpinSF;
            this.lastFreeSpinSprite.spriteFrame = Y.lastSpinRemainingSF;
            T.nodePoolHandler.replaceReusableItem(D.NodePoolName.RamainingFreeSpinUpgradeItem, this.upgradeItem, k.default, 5);
            if (D.isRTL) {
              this.numberDisplayLayout.horizontalDirection = cc.Layout.HorizontalDirection.RIGHT_TO_LEFT;
              this.numberDisplayNode.x = this.numberDisplayNode.x - 20;
            }
          };
          N.prototype.show = function (Y) {
            if (this._displayState === D.DisplayState.HIDE) {
              this._displayState = D.DisplayState.SHOWED;
              this.node.active = true;
              this._freeSpinCount = this._previousSpinCount = Y;
              this._setRemainingFreeSpinCount(this._freeSpinCount);
            }
          };
          N.prototype.hide = function () {
            if (this._displayState === D.DisplayState.SHOWED) {
              this._displayState = D.DisplayState.HIDE;
              this._reset();
              this.node.active = false;
            }
          };
          N.prototype.decrementFreeSpinCount = function (Y) {
            this._freeSpinCount--;
            this._previousSpinCount = this._freeSpinCount;
            this._setRemainingFreeSpinCount(this._freeSpinCount);
            if (Y) {
              Y();
            }
          };
          N.prototype.increaseFreeSpinCount = function (Y, W) {
            if (this._freeSpinCount !== Y) {
              this._previousSpinCount = this._freeSpinCount;
              this._freeSpinCount = Y;
              this._increaseFreeSpinCallback = W;
              this._addFreeSpinCount();
            } else if (W) {
              W();
            }
          };
          N.prototype._setRemainingFreeSpinCount = function (Y) {
            if (Y === 0) {
              this.lastFreeSpinSprite.node.active = true;
              this.numberDisplayLayout.node.active = false;
            } else if (Y > 0) {
              this.lastFreeSpinSprite.node.active = false;
              this.numberDisplayLayout.node.active = true;
              this.numberDisplayController.clear();
              this.numberDisplayController.displayNumber(Y);
              this._updateNumberLayout(Y);
            }
          };
          N.prototype._addFreeSpinCount = function () {
            if (this._freeSpinCount === this._previousSpinCount) {
              var Y = this._increaseFreeSpinCallback;
              this._increaseFreeSpinCallback = undefined;
              if (Y) {
                Y();
              }
              return;
            }
            L.stopAudio(x.GENERAL_AUDIO.fsWonRemainingIncrease.key);
            L.playAudio(x.GENERAL_AUDIO.fsWonRemainingIncrease.key);
            this._previousSpinCount++;
            this._setRemainingFreeSpinCount(this._previousSpinCount);
            this._playUpgradeVfx();
            this.effectHolder.position = this.numberDisplayContainer.position;
            var W = cc.v2(0, 0);
            var q = cc.v2(0, 40);
            this.numberDisplayNode.stopAllActions();
            this.numberDisplayNode.runAction(cc.sequence(cc.moveTo(0.05, q).easing(cc.easeIn(2)), cc.moveTo(0.1, W).easing(cc.easeBackOut()), cc.callFunc(this._addFreeSpinCount, this)));
          };
          N.prototype._playUpgradeVfx = function () {
            var Y = this;
            var W = T.nodePoolHandler.dequeueReusableItem(D.NodePoolName.RamainingFreeSpinUpgradeItem);
            var q = W.getComponent(k.default);
            this.effectHolder.addChild(W);
            W.setPosition(cc.v2(0, 0));
            q.play(undefined, function () {
              q.stop();
              Y.effectHolder.removeChild(W);
              T.nodePoolHandler.enqueueReusableItem(W, D.NodePoolName.RamainingFreeSpinUpgradeItem);
            });
          };
          N.prototype._updateNumberLayout = function (Y) {
            if (Y < 100) {
              this.numberDisplayNode.setScale(1.43);
            } else {
              this.numberDisplayController.resizeNumberIfNeeded();
            }
            this.numberDisplayLayout.updateLayout();
          };
          N.prototype._reset = function () {
            this._previousSpinCount = 0;
            this._freeSpinCount = 0;
            this._increaseFreeSpinCallback = undefined;
            this.numberDisplayNode.stopAllActions();
            this.numberDisplayNode.setScale(1.43);
          };
          N.prototype.destroy = function () {
            this._reset();
            this.node.destroy();
            return Q.prototype.destroy.call(this);
          };
          __decorate([G(cc.Node)], N.prototype, "numberDisplayNode", undefined);
          __decorate([G(cc.Sprite)], N.prototype, "remainingSprite", undefined);
          __decorate([G(cc.Sprite)], N.prototype, "lastFreeSpinSprite", undefined);
          __decorate([G(cc.Layout)], N.prototype, "numberDisplayLayout", undefined);
          __decorate([G(cc.Node)], N.prototype, "numberDisplayContainer", undefined);
          __decorate([G(cc.Node)], N.prototype, "effectHolder", undefined);
          __decorate([G(cc.Prefab)], N.prototype, "upgradeItem", undefined);
          return __decorate([j], N);
        }(cc.Component);
        K.default = V;
        cc._RF.pop();
      }
    }, {
      AudioConstant: "AudioConstant",
      AudioManager: "AudioManager",
      GameConstant: "GameConstant",
      NodePoolHandler: "NodePoolHandler",
      SimpleAnimationController: "SimpleAnimationController"
    }],
    RequestApiState: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "c7edad6KmVKX7bJ07ILRJKN", "RequestApiState")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("SlotAnalyticsEnum");
        var x = I("SlotAnalyticsHelper");
        var L = I("SlotStateMachine");
        var D = I("AutoSpinHandler");
        var k = I("UIState");
        var C = I("SettingMenuHelper");
        var p = I("SpinConfigHandler");
        var j = function (G) {
          function V(Q, N, Y) {
            var W = G.call(this, Q, N, Y) || this;
            W.name = "Request Api State";
            return W;
          }
          __extends(V, G);
          V.prototype.setSlotController = function (Q) {
            this.slotController = Q;
          };
          V.prototype.setSpinButtonController = function (Q) {
            this.spinButtonController = Q;
          };
          V.prototype.run = function () {
            G.prototype.run.call(this);
            this.spin();
            this.callApi(this.exit.bind(this));
          };
          V.prototype.exit = function () {
            this.slotController.setOnClickCallback(undefined);
            this.disableSpinAction();
            G.prototype.exit.call(this);
          };
          V.prototype.destroy = function () {
            G.prototype.destroy.call(this);
            this.spinButtonController = undefined;
            this.slotController = undefined;
          };
          V.prototype.onReady = function () {};
          V.prototype.onRun = function () {};
          V.prototype.onExit = function (Q) {
            Q();
          };
          V.prototype.onForceExit = function (Q) {
            Q();
          };
          V.prototype.onDestroy = function (Q) {
            Q();
          };
          V.prototype.startSlotController = function () {
            this.spinButtonController.spin();
            this.slotController.spin(C.settingMenuHelper.turboSpinOn);
          };
          V.prototype.slotFastStopTriggered = function () {};
          V.prototype.callApi = function (Q) {
            Q();
          };
          V.prototype.spin = function () {
            var Q = this.spinButtonController;
            if (Q.isAutoSpin() || p.featureConfig.fastStopFeature && !C.settingMenuHelper.turboSpinOn) {
              this.enableSpinAction();
            } else {
              Q.disableButton();
            }
            this.startSlotController();
          };
          V.prototype.triggerFastStop = function (Q) {
            var N = this.slotController;
            var Y = this.spinButtonController;
            if (N.getStopStyle() !== L.StopStyle.FAST) {
              N.markFastStop();
              N.setOnClickCallback(undefined);
              Y.disableButton();
              this.disableSpinAction();
              x.sendFastStopGA(Q, Y.isAutoSpin());
              this.slotFastStopTriggered();
            }
          };
          V.prototype.onClickSpinButton = function (Q) {
            var N = this.spinButtonController;
            var Y = this.slotController.getStopStyle() === L.StopStyle.FAST;
            if (N.isAutoSpin()) {
              if (!p.featureConfig.fastStopFeature || !!Y) {
                N.disableButton();
              }
              D.exitAutoSpin(N);
            } else if (!!p.featureConfig.fastStopFeature || !Y) {
              this.triggerFastStop(Q);
            }
          };
          V.prototype.enableSpinAction = function () {
            if (p.featureConfig.fastStopFeature) {
              this.slotController.setOnClickCallback(this.triggerFastStop.bind(this));
            }
            this.spinButtonController.setOnClickCallback(this.onClickSpinButton.bind(this, T.SpinTrigger.CLICK));
          };
          V.prototype.disableSpinAction = function () {
            this.spinButtonController.clearOnClickCallback();
          };
          return V;
        }(k.default);
        K.default = j;
        cc._RF.pop();
      }
    }, {
      AutoSpinHandler: "AutoSpinHandler",
      SettingMenuHelper: "SettingMenuHelper",
      SlotAnalyticsEnum: "SlotAnalyticsEnum",
      SlotAnalyticsHelper: "SlotAnalyticsHelper",
      SlotStateMachine: "SlotStateMachine",
      SpinConfigHandler: "SpinConfigHandler",
      UIState: "UIState"
    }],
    RequestHandler: [function (Z, I) {
      'use strict';

      if (!cc._RF.push(I, "d74abPCXkJA5YnU3Ax3A+KB", "RequestHandler")) {
        var R = System.get("bvframework").RequestHandler;
        for (var K in R) {
          I.exports[K] = R[K];
        }
        I.exports.__esModule = true;
        cc._RF.pop();
      }
    }, {}],
    ResRC: [function (I, R) {
      'use strict';

      if (!cc._RF.push(R, "741a8m7jWlDQowhgiMh2U/V", "ResRC")) {
        var g = function (x, L) {
          var D = {};
          for (var n in L) {
            if (x.hasOwnProperty(n)) {
              D[x[n]] = L[n];
            } else {
              D[n] = L[n];
            }
          }
          return D;
        }({
          r0: "releaseBundleAsset",
          r1: "release",
          r2: "releaseBundle",
          r3: "removeBundle",
          r4: "loadBundleAsset",
          r5: "loadRemoteSingle"
        }, System.get("common").ResRC);
        for (var T in g) {
          if (g.hasOwnProperty(T)) {
            R.exports[T] = g[T];
          }
        }
        R.exports.__esModule = true;
        cc._RF.pop();
      }
    }, {}],
    ResourceLoader: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "517d1jsi4lLyboQPLjM/Od/", "ResourceLoader")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        K.LoaderType = undefined;
        var T;
        var x = I("RetryHandler");
        var L = I("ResRC");
        var D = I("ResourceQualifierHelper");
        (function (C) {
          C[C.CUSTOM = -1] = "CUSTOM";
        })(T = K.LoaderType ||= {});
        var k = function () {
          function C() {
            this._retryHandler = new x.default();
          }
          C.prototype.loadAsset = function (u) {
            if (u.type === T.CUSTOM) {
              return this._loadCustomAsset(u);
            } else {
              return this._loadCocosAsset(u);
            }
          };
          C.prototype.releaseAsset = function (u) {
            if (u.type === T.CUSTOM) {
              return this._releaseCustomAsset(u);
            } else {
              return this._releaseCocosAsset(u);
            }
          };
          C.prototype.loadBundle = function (u) {
            var c = this;
            var p = this._retryHandler;
            var j = u.bundle;
            var l = u.retryMessage;
            var G = u.retryHandling;
            var V = u.retryingCallback;
            var Q = u.progressCallback;
            return new Promise(function (N) {
              var Y = 0;
              var W = j.length;
              var q = j.slice();
              var S = j.slice();
              var z = [];
              var A = Object.create(null);
              p.init(l, function () {
                q = z.slice();
                S = z.slice();
                z = [];
                E();
              });
              function M() {
                if (S.length === 0) {
                  if (z.length === 0) {
                    N(A);
                    return;
                  }
                  if (z.length > 0) {
                    if (p.canRetry()) {
                      V(p.getRetryCount());
                      p.execute();
                    } else {
                      G(p.execute.bind(p), A, z, p.getRetryCount());
                    }
                  }
                }
              }
              function E() {
                q.forEach(function (F) {
                  c.loadAsset(F).then(function (b) {
                    Y++;
                    var H = b.config.name;
                    A[H];
                    A[H] = b;
                    S.splice(S.indexOf(F), 1);
                    Q(Y, W);
                    M();
                  }).catch(function () {
                    z.push(F);
                    S.splice(S.indexOf(F), 1);
                    M();
                  });
                });
              }
              E();
            });
          };
          C.prototype.releaseBundle = function (u) {
            var c = this;
            var p = [];
            u.forEach(function (j) {
              p.push(c.releaseAsset(j));
            });
            return new Promise(function (j) {
              Promise.all(p).then(function (l) {
                var G = Object.create(null);
                l.forEach(function (V) {
                  G[V.config.name] = V;
                });
                j(G);
              });
            });
          };
          C.prototype._loadCocosAsset = function (u) {
            return new Promise(function (c, p) {
              var j = u.isLocalized ? D.getResourceURL(u.url) : u.url;
              L.load(j, u.type, function (l, G) {
                var V = {
                  config: u,
                  result: G
                };
                if (l) {
                  p(l);
                } else {
                  c(V);
                }
              });
            });
          };
          C.prototype._loadCustomAsset = function (u) {
            return new Promise(function (c, p) {
              u.loadFunc(function (j) {
                var l = {
                  config: u,
                  result: j
                };
                c(l);
              }, function (j) {
                p(j);
              });
            });
          };
          C.prototype._releaseCocosAsset = function (u) {
            return new Promise(function (c) {
              var p = u.isLocalized ? D.getResourceURL(u.url) : u.url;
              L.release(p, u.type);
              c({
                config: u
              });
            });
          };
          C.prototype._releaseCustomAsset = function (u) {
            return new Promise(function (c) {
              if (u.releaseFunc) {
                new Promise(u.releaseFunc).then(function () {
                  var p = {
                    config: u
                  };
                  c(p);
                });
              } else {
                c({
                  config: u
                });
              }
            });
          };
          return C;
        }();
        K.default = k;
        cc._RF.pop();
      }
    }, {
      ResRC: "ResRC",
      ResourceQualifierHelper: "ResourceQualifierHelper",
      RetryHandler: "RetryHandler"
    }],
    ResourceQualifierHelper: [function (Z, I) {
      'use strict';

      if (!cc._RF.push(I, "95cabP+u+lNbIwBxruULrww", "ResourceQualifierHelper")) {
        var R = System.get("bvframework").ResourceQualifierHelper;
        for (var K in R) {
          I.exports[K] = R[K];
        }
        I.exports.__esModule = true;
        cc._RF.pop();
      }
    }, {}],
    ResultState: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "08d5bAN5GxAf5RE9cTgDCu5", "ResultState")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("SlotStateMachine");
        var x = I("SlotAnalyticsHelper");
        var L = I("SlotAnalyticsEnum");
        var D = I("AutoSpinHandler");
        var k = I("UIState");
        var C = I("Utils");
        var p = I("SpinConfigHandler");
        var j = function (G) {
          function V(Q, N, Y) {
            var W = G.call(this, Q, N, Y) || this;
            W.name = "Result State";
            W.process = L.SpinStateProcess.REEL_SPINNING;
            W.hasFeature = false;
            return W;
          }
          __extends(V, G);
          V.prototype.setSlotController = function (Q) {
            this.slotController = Q;
          };
          V.prototype.setSpinButtonController = function (Q) {
            this.spinButtonController = Q;
          };
          V.prototype.run = function () {
            G.prototype.run.call(this);
            this.enableSpinAction();
            C.sequenceCallback(this.resultDidStartRender.bind(this), this.renderSlotRegion.bind(this), this.defineFeature.bind(this), this.slotDidCompleteStop.bind(this))(this.exit.bind(this));
          };
          V.prototype.exit = function () {
            this.slotController.setOnClickCallback(undefined);
            this.disableSpinAction();
            G.prototype.exit.call(this);
          };
          V.prototype.destroy = function () {
            G.prototype.destroy.call(this);
            this.spinButtonController = undefined;
            this.slotController = undefined;
          };
          V.prototype.onReady = function () {};
          V.prototype.onRun = function () {};
          V.prototype.onForceExit = function (Q) {
            Q();
          };
          V.prototype.onExit = function (Q) {
            Q();
          };
          V.prototype.onDestroy = function (Q) {
            Q();
          };
          V.prototype.resultDidStartRender = function (Q) {
            if (Q) {
              Q();
            }
          };
          V.prototype.slotDidStartStopping = function (Q) {
            if (Q) {
              Q();
            }
          };
          V.prototype.invokeSlotStop = function () {
            var Q = this.slotController;
            if (Q.getStopStyle() === T.StopStyle.FAST) {
              Q.fastStop();
            } else {
              Q.stopSpin();
            }
          };
          V.prototype.triggerFastStop = function (Q) {
            var N = this.slotController;
            var Y = this.spinButtonController;
            if (N.getStopStyle() !== T.StopStyle.FAST) {
              switch (this.process) {
                case L.SpinStateProcess.REEL_SPINNING:
                  x.sendFastStopGA(Q, Y.isAutoSpin());
                  this.triggerFastStopWhileSpinning();
                  break;
                case L.SpinStateProcess.REEL_STOPPING:
                  x.sendFastStopGA(Q, Y.isAutoSpin());
                  this.triggerFastStopWhileStopping();
                  break;
                case L.SpinStateProcess.REEL_STOPPED:
                  this.triggerFastStopWhileStopped();
              }
            }
          };
          V.prototype.triggerFastStopWhileSpinning = function () {
            var Q = this.slotController;
            var N = this.spinButtonController;
            this.disableSpinAction();
            N.disableButton();
            Q.setOnClickCallback(undefined);
            Q.markFastStop();
          };
          V.prototype.triggerFastStopWhileStopping = function () {
            var Q = this.slotController;
            var N = this.spinButtonController;
            this.disableSpinAction();
            N.disableButton();
            Q.setOnClickCallback(undefined);
            Q.fastStop();
          };
          V.prototype.triggerFastStopWhileStopped = function () {};
          V.prototype.setupFeatureProperties = function () {
            this.hasFeature = false;
          };
          V.prototype.setSlotData = function () {
            this.slotController.setReelData(this.dataSource.transactionModel.originalReels);
          };
          V.prototype.renderSlotRegion = function (Q) {
            this.setSlotData();
            C.spawnCallback(this.stopSlot.bind(this), this.slotDidStartStopping.bind(this))(Q);
          };
          V.prototype.stopSlot = function (Q) {
            if (this.process === L.SpinStateProcess.REEL_SPINNING) {
              this.process = L.SpinStateProcess.REEL_STOPPING;
              this.slotController.setStopCompletedCallback(Q);
              this.invokeSlotStop();
            } else if (Q) {
              Q();
            }
          };
          V.prototype.defineFeature = function (Q) {
            this.setupFeatureProperties();
            Q();
          };
          V.prototype.slotDidCompleteStop = function (Q) {
            this.process = L.SpinStateProcess.REEL_STOPPED;
            var N = this.spinButtonController;
            if (!N.isAutoSpin()) {
              this.disableSpinAction();
            }
            N.stopSpin();
            if (this.dataSource.transactionModel.winLines || this.hasFeature) {
              N.disableButton();
            }
            this.renderFeature(Q);
          };
          V.prototype.onClickSpinButton = function (Q) {
            var N = this.spinButtonController;
            var Y = this.slotController.getStopStyle() === T.StopStyle.FAST;
            if (N.isAutoSpin()) {
              if (!p.featureConfig.fastStopFeature || !!Y) {
                N.disableButton();
              }
              D.exitAutoSpin(N);
            } else if (!!p.featureConfig.fastStopFeature || !Y) {
              this.triggerFastStop(Q);
            }
          };
          V.prototype.enableSpinAction = function () {
            if (p.featureConfig.fastStopFeature) {
              this.slotController.setOnClickCallback(this.triggerFastStop.bind(this));
            }
            this.spinButtonController.setOnClickCallback(this.onClickSpinButton.bind(this, L.SpinTrigger.CLICK));
          };
          V.prototype.disableSpinAction = function () {
            this.spinButtonController.clearOnClickCallback();
          };
          return V;
        }(k.default);
        K.default = j;
        cc._RF.pop();
      }
    }, {
      AutoSpinHandler: "AutoSpinHandler",
      SlotAnalyticsEnum: "SlotAnalyticsEnum",
      SlotAnalyticsHelper: "SlotAnalyticsHelper",
      SlotStateMachine: "SlotStateMachine",
      SpinConfigHandler: "SpinConfigHandler",
      UIState: "UIState",
      Utils: "Utils"
    }],
    RetryHandler: [function (Z, I) {
      'use strict';

      if (!cc._RF.push(I, "e77ca51GO5Az7liIm6SBn3P", "RetryHandler")) {
        var R = System.get("bvframework").RetryHandler;
        I.exports.default = R;
        I.exports.__esModule = true;
        cc._RF.pop();
      }
    }, {}],
    RtConfig: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "4c98fuhW8BPvITqQJIOmxae", "RtConfig")) {
        K.__esModule = true;
        K.cs_Config = undefined;
        var g = I("LaunchConfig");
        K.cs_Launch = g.cs_Launch;
        var T = {
          gameId: 135,
          globalDomain: "com.pgsoft",
          bundleId: "com.pgsoft.slot.wildbountyshowdown",
          loginMethod: window.LoginMethod,
          apiDomain: window.ApiDomain,
          version: "2.24.0.0",
          certifiedVersion: "0.0.0.0"
        };
        var x = Object.freeze(T);
        K.cs_Config = x;
        cc._RF.pop();
      }
    }, {
      LaunchConfig: "LaunchConfig"
    }],
    ScatterEffectController: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "d3c178kqjtICrLD0l6vZxle", "ScatterEffectController")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = cc._decorator;
        var x = T.ccclass;
        var L = T.property;
        var D = function (k) {
          function _C() {
            var u = k !== null && k.apply(this, arguments) || this;
            u.holderFront = undefined;
            u.holderBack = undefined;
            u.vfxA = undefined;
            u.vfxB1 = undefined;
            u.vfxB2 = undefined;
            u.vfxE = undefined;
            return u;
          }
          __extends(_C, k);
          _C.prototype.show = function (u = false) {
            this._fadeIn(u, this.holderFront);
            this._fadeIn(u, this.holderBack);
          };
          _C.prototype.hide = function (u = false) {
            this._fadeOut(u, this.holderFront);
            this._fadeOut(u, this.holderBack);
          };
          _C.prototype.reset = function () {
            if (this.holderFront.active) {
              this.stopSmoke();
              this.stopGlow();
              this.stopShine();
              this.hide(true);
            }
          };
          _C.prototype.playSmoke = function () {
            this.vfxA.node.active = true;
            this.vfxA.play();
          };
          _C.prototype.stopSmoke = function () {
            this.vfxA.stop();
            this.vfxA.setCurrentTime(0);
            this.vfxA.node.active = false;
          };
          _C.prototype.playShine = function () {
            var u = cc.rotateBy(20, 360).repeatForever();
            var c = cc.rotateBy(20, -360).repeatForever();
            this.vfxB1.active = true;
            this.vfxB2.active = true;
            this.vfxB1.stopAllActions();
            this.vfxB2.stopAllActions();
            this.vfxB1.runAction(u);
            this.vfxB2.runAction(c);
          };
          _C.prototype.stopShine = function () {
            this.vfxB1.stopAllActions();
            this.vfxB2.stopAllActions();
            this.vfxB1.active = false;
            this.vfxB2.active = false;
          };
          _C.prototype.playGlow = function () {
            var u = this;
            this.vfxE.active = true;
            this.vfxE.stopAllActions();
            this.vfxE.opacity = 0;
            this.vfxE.setScale(0.8);
            var c = cc.sequence(cc.spawn(cc.fadeIn(0.1), cc.scaleTo(0.2, 1)), cc.fadeOut(0.5), cc.callFunc(function () {
              u.vfxE.setScale(0.8);
            }), cc.delayTime(0.3));
            this.vfxE.runAction(c.repeatForever());
          };
          _C.prototype.stopGlow = function () {
            this.vfxE.stopAllActions();
            this.vfxE.active = false;
          };
          _C.prototype._fadeIn = function (u = false, c) {
            c.stopAllActions();
            c.opacity = 0;
            c.active = true;
            if (u) {
              c.opacity = 255;
            } else {
              c.runAction(cc.fadeIn(0.2));
            }
          };
          _C.prototype._fadeOut = function (u = false, c) {
            c.stopAllActions();
            if (u) {
              c.opacity = 0;
              c.active = false;
            } else {
              c.runAction(cc.sequence(cc.fadeOut(0.2), cc.callFunc(function () {
                c.active = false;
              })));
            }
          };
          __decorate([L(cc.Node)], _C.prototype, "holderFront", undefined);
          __decorate([L(cc.Node)], _C.prototype, "holderBack", undefined);
          __decorate([L(cc.Animation)], _C.prototype, "vfxA", undefined);
          __decorate([L(cc.Node)], _C.prototype, "vfxB1", undefined);
          __decorate([L(cc.Node)], _C.prototype, "vfxB2", undefined);
          __decorate([L(cc.Node)], _C.prototype, "vfxE", undefined);
          return __decorate([x], _C);
        }(cc.Component);
        K.default = D;
        cc._RF.pop();
      }
    }, {}],
    ScrollViewEx: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "4403eAPMfNGO4d5KWMoVrU7", "ScrollViewEx")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = cc._decorator;
        var x = T.ccclass;
        var L = T.property;
        var D = function (k) {
          function C() {
            var u = k !== null && k.apply(this, arguments) || this;
            u.speed = 1;
            u.freeCells = [];
            u.snapPause = false;
            u.snapDone = false;
            u.nextAppearTarget = undefined;
            u.snapFinish = undefined;
            u.clickPos = undefined;
            u.clickTarget = undefined;
            u.timer = undefined;
            return u;
          }
          __extends(C, k);
          C.prototype.cellsInsertToParent = function () {
            if (this.freeCells.length) {
              for (var u = 0; u < this.content.children.length; u++) {
                if (this.freeCells[u]) {
                  this.freeCells[u].cellNode.parent = this.content.children[u];
                  this.freeCells[u].cellNode.setPosition(cc.v2(0, 0));
                  this._bindTouchListener(this.freeCells[u].cellNode);
                }
              }
              this.freeCells = [];
            }
            this.snapPause = false;
          };
          C.prototype.cellsPullOutFromParent = function (u) {
            if (!this.freeCells.length) {
              this.snapPause = true;
              this.setSnapDone(true);
              for (var c = 0; c < this.content.children.length; c++) {
                var p = this.content.children[c].children[0];
                if (p) {
                  this._unbindTouchListener(p);
                  var j = p.parent.convertToWorldSpaceAR(p.getPosition());
                  var l = u.convertToNodeSpaceAR(j);
                  this.freeCells[c] = {
                    cellNode: p,
                    position: l,
                    index: c
                  };
                  this.freeCells[c].cellNode.setPosition(l);
                  this.freeCells[c].cellNode.parent = u;
                }
              }
              return this.freeCells;
            }
          };
          C.prototype.setSnapPause = function (u) {
            this.snapPause = u;
          };
          C.prototype.setSnapDone = function (u) {
            this.snapDone = u;
          };
          C.prototype.isSnapDone = function () {
            return this.snapDone;
          };
          C.prototype.setNextAppearTarget = function (u) {
            this.nextAppearTarget = u;
          };
          C.prototype.setSnapFinish = function (u) {
            this.snapFinish = u;
          };
          C.prototype._bindTouchListener = function (u) {
            u.on(cc.Node.EventType.TOUCH_START, this._clickStart, this);
            u.on(cc.Node.EventType.TOUCH_END, this._clickEnd, this);
            u.on(cc.Node.EventType.TOUCH_MOVE, this._clickMove, this);
            u.on(cc.Node.EventType.TOUCH_CANCEL, this._clickCancel, this);
          };
          C.prototype._unbindTouchListener = function (u) {
            u.off(cc.Node.EventType.TOUCH_START, this._clickStart, this);
            u.off(cc.Node.EventType.TOUCH_END, this._clickEnd, this);
            u.off(cc.Node.EventType.TOUCH_MOVE, this._clickMove, this);
            u.off(cc.Node.EventType.TOUCH_CANCEL, this._clickCancel, this);
          };
          C.prototype._clickStart = function (u) {
            var c = u.touch.getLocation();
            this.clickPos = c;
            this.clickTarget = u.currentTarget;
            this.timer = Date.now();
          };
          C.prototype._clickMove = function () {};
          C.prototype._clickEnd = function (u) {
            if (this.clickPos) {
              var c = u.touch.getLocation();
              var p = this.clickPos;
              var j = this.timer;
              if (!this._touchMinDistance(p.x, c.x) && !this._touchMinDistance(p.y, c.y) && !!j && !(Date.now() - j > 120)) {
                this._resetClick();
              }
            }
          };
          C.prototype._clickCancel = function (u) {
            if (this.clickPos) {
              var c = u.touch.getLocation();
              var p = this.clickPos;
              var j = this.timer;
              if (!this._touchMinDistance(p.x, c.x) && !this._touchMinDistance(p.y, c.y) && !!j && !(Date.now() - j > 120)) {
                this._resetClick();
              }
            }
          };
          C.prototype._touchMinDistance = function (u, c) {
            return Math.abs(c - u) > 100;
          };
          C.prototype._lerp1D = function (u, c, p, j = 1, l) {
            G = cc.v2(u, 0);
            V = cc.v2(c, 0);
            if (G.sub(V).mag() <= 1) {
              this.setSnapDone(true);
              if (l) {
                l();
              }
              return c;
            }
            var G;
            var V;
            var Q = u + (p *= j) * (c - u);
            if (u >= c) {
              if (Q <= c) {
                if (l) {
                  l();
                }
                Q = c;
              }
            } else if (Q >= c) {
              if (l) {
                l();
              }
              Q = c;
            }
            return Q;
          };
          C.prototype._resetClick = function () {
            this.clickTarget = undefined;
            this.timer = undefined;
          };
          __decorate([L(cc.Integer)], C.prototype, "speed", undefined);
          return __decorate([x], C);
        }(cc.ScrollView);
        K.default = D;
        cc._RF.pop();
      }
    }, {}],
    Serializer: [function (Z, I) {
      'use strict';

      if (!cc._RF.push(I, "0e825vJtv1K6qUCtfPjN7c9", "Serializer")) {
        var R = System.get("common").Serialiser;
        I.exports.Serializer = R;
        I.exports.__esModule = true;
        cc._RF.pop();
      }
    }, {}],
    SettingInfoFooterController: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "06e65rpYzVNHbDR0e2vljl/", "SettingInfoFooterController")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        K.SettingInfoFooterController = K.ICON_FOOTER_TYPE = K.WALLET_FOOTER_TYPE = undefined;
        var T;
        var x = I("Utils");
        var L = I("UIAppearanceHelper");
        var D = cc._decorator;
        var k = D.ccclass;
        var C = D.property;
        (function (p) {
          p[p.CASH = 1] = "CASH";
          p[p.FREE_GAME = 2] = "FREE_GAME";
          p[p.BONUS = 3] = "BONUS";
          p[p.POINT = 4] = "POINT";
        })(T = K.WALLET_FOOTER_TYPE ||= {});
        (function (p) {
          p[p.SPIN = 2] = "SPIN";
          p[p.ROLL_OVER = 3] = "ROLL_OVER";
        })(K.ICON_FOOTER_TYPE ||= {});
        var u = function (p) {
          function j() {
            var G = p !== null && p.apply(this, arguments) || this;
            G.background = undefined;
            G.balanceNode = undefined;
            G.customLeftFooterTitle = undefined;
            G.balanceValueNode = undefined;
            G.rightSlotNode = undefined;
            G.winValueNode = undefined;
            G.winHolderNode = undefined;
            G.winCashIconNode = undefined;
            G.winButton = undefined;
            G.totalWinNode = undefined;
            G.totalWinValueNode = undefined;
            G.freeGamesNode = undefined;
            G.specialIcon = undefined;
            G.freeSpinValue = undefined;
            G.walletButton = undefined;
            G.walletButtonSensor = undefined;
            G.walletNavigateIcon = undefined;
            G.walletNotificationIcon = undefined;
            G.betAmountLabel = undefined;
            G.betOptionsButton = undefined;
            G.betOptionsIcon = undefined;
            G.walletFooterTypeSFList = [];
            G.rewardFooterTypeSFList = [];
            G.maxBetButtonHolder = undefined;
            G.languageSensitiveLayoutList = [];
            G._isCustomInfoFooter = false;
            G._isSticky = false;
            G.currentBalance = 0;
            G.targetBalance = 0;
            G.winBalance = 0;
            G.walletNotify = false;
            G.lockWalletButton = false;
            G.lockBetOptionsButton = false;
            G._currentWinAmount = 0;
            G._isShowingFreeGamesTitle = false;
            return G;
          }
          __extends(j, p);
          j.prototype.updateBetAmount = function (G, V) {
            var Q = this;
            if (V === undefined) {
              V = 0;
            }
            if (this._previousBetAmount) {
              this.betAmountLabel.string = this._currentBetAmount = this._previousBetAmount;
              this.betAmountLabel.node.stopAllActions();
              var N = V * 0.5 + 1.2;
              this.betAmountLabel.node.runAction(cc.sequence(cc.scaleTo(0.1, N).easing(cc.easeOut(0.2)), cc.callFunc(function () {
                Q.betAmountLabel.string = G;
              }), cc.scaleTo(0.2, 0.9), cc.scaleTo(0.1, 1.05), cc.scaleTo(0.1, 0.95), cc.scaleTo(0.1, 1)));
              this._previousBetAmount = G;
            } else {
              this.betAmountLabel.string = this._currentBetAmount = this._previousBetAmount = G;
            }
          };
          Object.defineProperty(j.prototype, "currentBetAmount", {
            get: function () {
              if (this._currentBetAmount === undefined || this._currentBetAmount.length === 0) {
                throw Error("SettingInfoFooterController :: currentBetAmount : Please set legit bet amount by calling updateBetAmount first!");
              }
              return parseFloat(this._currentBetAmount);
            },
            enumerable: false,
            configurable: true
          });
          j.prototype.setOpenBetOptionsMenuCallback = function (G) {
            this._openBetOptionsMenu = G;
          };
          j.prototype.openBetOptionsMenu = function () {
            if (this._openBetOptionsMenu) {
              this._openBetOptionsMenu();
            }
          };
          j.prototype.setBetOptionsButtonLock = function (G = false) {
            this.lockBetOptionsButton = G;
          };
          j.prototype.interactableBetOptionsButton = function (G) {
            this.betOptionsButton.interactable = G;
            if (G) {
              if (this._defaultLabelColor === undefined) {
                throw Error("SettingInfoFooter :: interactableBetOptionsButton : Please call boot() to setup default label color first!");
              }
              this.betAmountLabel.node.color = this._defaultLabelColor;
            } else {
              this.betAmountLabel.node.color = cc.Color.WHITE;
            }
          };
          j.prototype.setOpenWinMenuCallback = function (G) {
            this._openWinMenu = G;
          };
          j.prototype.openWinMenu = function () {
            if (this._openWinMenu) {
              this._openWinMenu();
            }
          };
          j.prototype.interactableWinButton = function (G) {
            this.winButton.interactable = G;
            if (G) {
              if (this._defaultLabelColor === undefined) {
                throw Error("SettingInfoFooter :: interactableWinButton : Please call boot() to setup default label color first!");
              }
              this.winValueNode.color = this.freeSpinValue.node.color = this._defaultLabelColor;
            } else {
              this.winValueNode.color = this.freeSpinValue.node.color = cc.Color.WHITE;
            }
          };
          j.prototype.setWinIcon = function (G) {
            this.winCashIconNode.spriteFrame = G;
          };
          j.prototype.setWalletNavigateIcon = function (G) {
            switch (G) {
              case T.CASH:
                this.walletNavigateIcon.getComponent(cc.Sprite).spriteFrame = this.walletFooterTypeSFList[G - 1];
                break;
              case T.FREE_GAME:
              case T.BONUS:
                this.walletNavigateIcon.getComponent(cc.Sprite).spriteFrame = this.walletFooterTypeSFList[G - 1];
                this.specialIcon.spriteFrame = this.rewardFooterTypeSFList[G - 2];
                break;
              default:
                this.walletNavigateIcon.getComponent(cc.Sprite).spriteFrame = undefined;
            }
          };
          j.prototype.boot = function () {
            this._balanceLabelController = this.balanceValueNode.getComponent("NumberLabelControllerLite");
            this._winLabelController = this.winValueNode.getComponent("NumberLabelControllerLite");
            this._totalWinLabelController = this.totalWinValueNode.getComponent("NumberLabelControllerLite");
            this.betOptionsButton.normalColor = L.uiAppearanceHelper.v("setting.color_button_transition_a.normal");
            this.betOptionsButton.pressedColor = L.uiAppearanceHelper.v("setting.color_button_transition_a.pressed");
            this.betOptionsButton.hoverColor = L.uiAppearanceHelper.v("setting.color_button_transition_a.normal");
            this.betOptionsButton.disabledColor = L.uiAppearanceHelper.v("setting.color_button_transition_a.normal");
            this.walletButton.normalColor = L.uiAppearanceHelper.v("setting.color_button_transition_a.normal");
            this.walletButton.pressedColor = L.uiAppearanceHelper.v("setting.color_button_transition_a.pressed");
            this.walletButton.hoverColor = L.uiAppearanceHelper.v("setting.color_button_transition_a.normal");
            this.walletButton.disabledColor = L.uiAppearanceHelper.v("setting.color_button_transition_a.normal");
            this.winButton.normalColor = L.uiAppearanceHelper.v("setting.color_button_transition_a.normal");
            this.winButton.pressedColor = L.uiAppearanceHelper.v("setting.color_button_transition_a.pressed");
            this.winButton.hoverColor = L.uiAppearanceHelper.v("setting.color_button_transition_a.normal");
            this.winButton.disabledColor = L.uiAppearanceHelper.v("setting.color_button_transition_a.normal");
            this._defaultLabelColor = this.betAmountLabel.node.color;
            this._balanceLabelController.skip(0);
            this._winLabelController.skip(0);
            this._totalWinLabelController.skip(0);
          };
          j.prototype.changeWalletIconColor = function (G) {
            this.walletNavigateIcon.opacity = G ? L.uiAppearanceHelper.v("setting.color_button_transition_a.pressed").a : L.uiAppearanceHelper.v("setting.color_button_transition_a.normal").a;
          };
          j.prototype.showBackground = function (G, V = 225) {
            this.background.active = G;
            this.background.opacity = V;
          };
          j.prototype.setOpenWalletMenuCallback = function (G) {
            this._openWalletMenu = G;
          };
          j.prototype.setWalletButtonLock = function (G = false) {
            this.lockWalletButton = G;
          };
          j.prototype.interactableWalletButton = function (G) {
            this.walletButton.interactable = G;
            if (G) {
              if (this._defaultLabelColor === undefined) {
                throw Error("SettingInfoFooter :: interactableWalletButton : Please call boot() to setup default label color first!");
              }
              this.balanceValueNode.color = this._defaultLabelColor;
            } else {
              this.balanceValueNode.color = cc.Color.WHITE;
            }
          };
          j.prototype.changeWalletButtonColor = function (G) {
            this.walletNavigateIcon.opacity = G ? L.uiAppearanceHelper.v("setting.color_button_transition_a.pressed").a : L.uiAppearanceHelper.v("setting.color_button_transition_a.normal").a;
          };
          j.prototype.showBalanceNode = function (G) {
            this.balanceNode.active = G;
          };
          j.prototype.showTotalWinNode = function (G) {
            this.totalWinNode.active = G;
          };
          j.prototype.showFreeGamesNode = function (G) {
            this.freeGamesNode.active = G;
          };
          j.prototype.activateWalletNotify = function (G) {
            this.walletNotify = G;
            if (G === true) {
              this.walletNotificationIcon.active = G;
              this.walletNotificationIcon.stopAllActions();
              this.walletNotificationIcon.runAction(cc.repeatForever(cc.sequence(cc.scaleTo(0.5, 1.2), cc.scaleTo(0.5, 1))));
            } else {
              this.walletNotificationIcon.stopAllActions();
              this.walletNotificationIcon.active = G;
            }
          };
          j.prototype.openWalletMenu = function () {
            if (this._openWalletMenu) {
              this._openWalletMenu();
            }
          };
          j.prototype.changeHolder = function (G) {
            this._primeHolder ||= G;
            this.node.removeFromParent(false);
            G.addChild(this.node);
          };
          j.prototype.returnHolder = function () {
            if (!this._primeHolder) {
              throw Error("SettingInfoFooter :: returnHolder : Do not have parent to return");
            }
            this.node.removeFromParent(false);
            this._primeHolder.addChild(this.node);
          };
          j.prototype.showCustomInfoFooter = function () {
            this._isCustomInfoFooter = true;
            this.freeGamesNode.active = true;
            if (this._isCustomInfoFooter) {
              this._activateFlipRightSlot(true);
            }
          };
          j.prototype.hideCustomInfoFooter = function () {
            this._isCustomInfoFooter = false;
            this.freeGamesNode.active = false;
            this.winHolderNode.active = true;
            var G = this._abortDelay;
            this._abortDelay = undefined;
            if (G) {
              G();
            }
            var V = this._abortSequence;
            this._abortSequence = undefined;
            if (V) {
              V();
            }
            this.rightSlotNode.stopAllActions();
            this.rightSlotNode.scale = 1;
          };
          j.prototype.isCustomInfoFooter = function () {
            return this._isCustomInfoFooter;
          };
          j.prototype.updateBalance = function (G, V, Q) {
            if (this._balanceLabelController === undefined) {
              throw Error("SettingInfoFooter :: updateBalance : Please call boot() to setup balance label controller first!");
            }
            G = this.currentBalance ? this.currentBalance : this.currentBalance = x.isNumeric(V) ? V : 0;
            if (x.isNumeric(V)) {
              this.targetBalance = V;
            } else {
              V = this.targetBalance;
            }
            if (V <= G) {
              Q = false;
            }
            if (Q) {
              this._balanceLabelController.play(G, V);
            } else {
              this._balanceLabelController.skip(V);
            }
            this.currentBalance = this.targetBalance;
          };
          Object.defineProperty(j.prototype, "currentWinAmount", {
            get: function () {
              return this._currentWinAmount;
            },
            enumerable: false,
            configurable: true
          });
          j.prototype.updateWinAmount = function (G, V, Q = true) {
            if (this._winLabelController === undefined) {
              throw Error("SettingInfoFooter :: updateWinAmount : Please call boot() to setup win label controller first!");
            }
            var N = this._currentWinAmount;
            if (x.isNumeric(G)) {
              this.winBalance = G;
            } else {
              G = this.winBalance;
            }
            if (G <= N) {
              V = false;
            }
            if (V) {
              this._winLabelController.play(N, G);
            } else {
              this._winLabelController.skip(G);
            }
            if (this._isCustomInfoFooter && !this._isSticky) {
              this._activateFlipRightSlot(false, Q);
            }
            this._currentWinAmount = this.winBalance;
          };
          j.prototype.updateTotalWinAmount = function (G, V) {
            if (this._totalWinLabelController === undefined) {
              throw Error("SettingInfoFooter :: updateTotalWinAmount : Please call boot() to setup total win label controller first!");
            }
            if (x.isNumeric(G)) {
              this.currentBalance = G;
            } else {
              G = this.currentBalance;
            }
            if (V) {
              this._totalWinLabelController.play(0, G);
            } else {
              this._totalWinLabelController.skip(G);
            }
          };
          j.prototype.setCustomMiddleInfoFooter = function (G, V = true) {
            this.freeSpinValue.string = G;
            this._isSticky = !V;
            if (this._isCustomInfoFooter) {
              this._activateFlipRightSlot(true, V);
            }
          };
          j.prototype.updateLayout = function (G) {
            this.languageSensitiveLayoutList.forEach(function (V) {
              return V.horizontalDirection = G ? cc.Layout.HorizontalDirection.RIGHT_TO_LEFT : cc.Layout.HorizontalDirection.LEFT_TO_RIGHT;
            });
          };
          j.prototype._activateFlipRightSlot = function (G, V = true) {
            var Q = 0;
            if (G) {
              this.winHolderNode.active = false;
              this.freeGamesNode.active = true;
              Q = 3;
              this._isShowingFreeGamesTitle = true;
            } else {
              this.winHolderNode.active = true;
              this.freeGamesNode.active = false;
              Q = 5;
              this._isShowingFreeGamesTitle = false;
            }
            this._startFlipRightSlot(Q, V);
          };
          j.prototype._startFlipRightSlot = function (G, V = true) {
            var Q = this._abortDelay;
            this._abortDelay = undefined;
            if (Q) {
              Q();
            }
            var N = this._abortSequence;
            this._abortSequence = undefined;
            if (N) {
              N();
            }
            this.rightSlotNode.stopAllActions();
            this.rightSlotNode.scale = 1;
            if (V) {
              this._abortDelay = x.delayCallback(G)(this._runFlipRightSlot.bind(this));
            }
          };
          j.prototype._runFlipRightSlot = function () {
            var G = this;
            this._abortDelay = undefined;
            function V() {
              if (G._isShowingFreeGamesTitle) {
                G.winHolderNode.active = true;
                G.freeGamesNode.active = false;
                G._isShowingFreeGamesTitle = false;
              } else {
                G.winHolderNode.active = false;
                G.freeGamesNode.active = true;
                G._isShowingFreeGamesTitle = true;
              }
            }
            this._abortSequence = x.sequenceCallback(function (Q) {
              G.rightSlotNode.runAction(cc.sequence(cc.scaleTo(0.1, 1, 0), cc.callFunc(V), cc.scaleTo(0.1, 1, 1), cc.callFunc(function () {
                Q();
              })));
            })(function () {
              var Q;
              Q = G._isShowingFreeGamesTitle ? 3 : 5;
              G._abortSequence = undefined;
              G._startFlipRightSlot(Q);
            });
          };
          __decorate([C(cc.Node)], j.prototype, "background", undefined);
          __decorate([C(cc.Node)], j.prototype, "balanceNode", undefined);
          __decorate([C(cc.Label)], j.prototype, "customLeftFooterTitle", undefined);
          __decorate([C(cc.Node)], j.prototype, "balanceValueNode", undefined);
          __decorate([C(cc.Node)], j.prototype, "rightSlotNode", undefined);
          __decorate([C(cc.Node)], j.prototype, "winValueNode", undefined);
          __decorate([C(cc.Node)], j.prototype, "winHolderNode", undefined);
          __decorate([C(cc.Sprite)], j.prototype, "winCashIconNode", undefined);
          __decorate([C(cc.Button)], j.prototype, "winButton", undefined);
          __decorate([C(cc.Node)], j.prototype, "totalWinNode", undefined);
          __decorate([C(cc.Node)], j.prototype, "totalWinValueNode", undefined);
          __decorate([C(cc.Node)], j.prototype, "freeGamesNode", undefined);
          __decorate([C(cc.Sprite)], j.prototype, "specialIcon", undefined);
          __decorate([C(cc.Label)], j.prototype, "freeSpinValue", undefined);
          __decorate([C(cc.Button)], j.prototype, "walletButton", undefined);
          __decorate([C(cc.Node)], j.prototype, "walletButtonSensor", undefined);
          __decorate([C(cc.Node)], j.prototype, "walletNavigateIcon", undefined);
          __decorate([C(cc.Node)], j.prototype, "walletNotificationIcon", undefined);
          __decorate([C(cc.Label)], j.prototype, "betAmountLabel", undefined);
          __decorate([C(cc.Button)], j.prototype, "betOptionsButton", undefined);
          __decorate([C(cc.Node)], j.prototype, "betOptionsIcon", undefined);
          __decorate([C([cc.SpriteFrame])], j.prototype, "walletFooterTypeSFList", undefined);
          __decorate([C([cc.SpriteFrame])], j.prototype, "rewardFooterTypeSFList", undefined);
          __decorate([C(cc.Node)], j.prototype, "maxBetButtonHolder", undefined);
          __decorate([C([cc.Layout])], j.prototype, "languageSensitiveLayoutList", undefined);
          return __decorate([k], j);
        }(cc.Component);
        K.SettingInfoFooterController = u;
        cc._RF.pop();
      }
    }, {
      UIAppearanceHelper: "UIAppearanceHelper",
      Utils: "Utils"
    }],
    SettingMenuAssetConfig: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "932421Mfz5Ex6OqucWfhO+9", "SettingMenuAssetConfig")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        K.getSettingMenuAssetConfig = undefined;
        var T = I("ResourceLoader");
        var x = I("SettingMenuHelper");
        var L = [];
        K.getSettingMenuAssetConfig = function () {
          if (L.length > 0) {
            return L;
          }
          L.push({
            name: "setting_menu_audio",
            type: T.LoaderType.CUSTOM,
            loadFunc: function (C, u) {
              x.settingMenuHelper.loadAudio(function (c) {
                if (c) {
                  u(c);
                } else {
                  C(undefined);
                }
              });
            }
          });
          var D = {
            setting_menu: x.settingMenuHelper.path + "prefab/setting_menu/setting_menu",
            setting_menu_wallet_panel: x.settingMenuHelper.path + "prefab/info_footer/setting_info_footer_controller",
            setting_menu_auto_spin_button: x.settingMenuHelper.path + "prefab/others/spin_options_button",
            setting_menu_more_menu_button: x.settingMenuHelper.path + "prefab/others/more_menu_button",
            setting_menu_setting_button: x.settingMenuHelper.path + "prefab/others/sound_button",
            setting_menu_rules_button: x.settingMenuHelper.path + "prefab/others/rules_button",
            setting_menu_payout_button: x.settingMenuHelper.path + "prefab/others/payout_button",
            setting_menu_history_button: x.settingMenuHelper.path + "prefab/others/history_button",
            setting_menu_hide_more_button: x.settingMenuHelper.path + "prefab/others/hide_more_menu_button",
            setting_menu_smart_bot_button: x.settingMenuHelper.path + "prefab/others/smartbot_button",
            setting_menu_minus_bet_button: x.settingMenuHelper.path + "prefab/others/minus_bet_button",
            setting_menu_plus_bet_button: x.settingMenuHelper.path + "prefab/others/plus_bet_button",
            setting_menu_turbo_spin_button: x.settingMenuHelper.path + "prefab/others/turbo_spin_button",
            setting_menu_quit_button: x.settingMenuHelper.path + "prefab/others/quit_button"
          };
          var k = D;
          Object.keys(k).forEach(function (C) {
            var u = {
              name: C,
              url: k[C],
              type: cc.Prefab,
              isLocalized: false
            };
            L.push(u);
          });
          L.push({
            name: "setting_menu_sprite_atlas",
            url: x.settingMenuHelper.path + "texture/hd/setting_menu_locale",
            type: cc.SpriteAtlas,
            isLocalized: true
          });
          return L;
        };
        cc._RF.pop();
      }
    }, {
      ResourceLoader: "ResourceLoader",
      SettingMenuHelper: "SettingMenuHelper"
    }],
    SettingMenuButtonHelper: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "1ddf5VqGQ9OiqajxiLxeBVw", "SettingMenuButtonHelper")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = cc._decorator.ccclass;
        var x = function () {
          function L() {
            this._buttonList = [];
            this._buttonPrefabStore = Object.create(null);
            this._buttonInteractableStore = Object.create(null);
            this._buttonLockStore = Object.create(null);
            this._buttons = Object.create(null);
            this._otherButtons = Object.create(null);
            this._buttonListCannotBeDisable = Object.create(null);
          }
          L.prototype.setButtonPrefab = function (D, k, C) {
            this._buttonPrefabStore[D] = k;
            this._buttonListCannotBeDisable[D] = C;
          };
          L.prototype.totalButtonsOccupied = function () {
            return this._buttonList.length;
          };
          L.prototype.getButtonInList = function (D) {
            return cc.instantiate(this._buttonPrefabStore[D]).getComponent("GenericSettingButton");
          };
          L.prototype.setupSettingMenuButtonInList = function (D, k, C) {
            var u = cc.instantiate(this._buttonPrefabStore[D]);
            var c = u.getComponent("GenericSettingButton");
            this._buttonList.push(c.button);
            c.onClick = k;
            this._buttonLockStore[D] = false;
            this._buttons[D] = c;
            if (C) {
              u.getComponent("ButtonTheme").colorKey = C;
            }
            return c;
          };
          L.prototype.setupIndependentSettingMenuButton = function (D, k) {
            if (this._buttonPrefabStore[D]) {
              var C = cc.instantiate(this._buttonPrefabStore[D]).getComponent("GenericSettingButton");
              C.onClick = k;
              this._buttonLockStore[D] = false;
              this._buttons[D] = C;
              return C;
            }
          };
          L.prototype.setupOtherButtonInList = function (D, k) {
            var C = {
              isInteractable: k
            };
            this._buttonLockStore[D] = false;
            this._otherButtons[D] = C;
            this._buttonListCannotBeDisable[D] = false;
          };
          L.prototype.setButtonInteractableFlag = function (D, k = false) {
            this._buttonInteractableStore[D] = k;
          };
          L.prototype.setButtonInteractable = function (D) {
            if (!this._buttonListCannotBeDisable[D] && this._buttonLockStore[D] === false) {
              if (this._otherButtons[D]) {
                this._otherButtons[D].isInteractable(this._buttonInteractableStore[D]);
              } else {
                this._buttons[D].isInteractable = this._buttonInteractableStore[D];
              }
            }
          };
          L.prototype.setButtonLock = function (D, k = false) {
            this._buttonLockStore[D] = k;
          };
          L.prototype.isButtonLocked = function (D) {
            return this._buttonLockStore[D];
          };
          L.prototype.setAllButtonsInteractable = function (D) {
            var k = Object.keys(this._buttons);
            for (var C = 0, u = k.length; C < u; C++) {
              this.setButtonInteractableFlag(parseInt(k[C]), D);
              this.setButtonInteractable(parseInt(k[C]));
            }
            var c = Object.keys(this._otherButtons);
            C = 0;
            u = c.length;
            for (; C < u; C++) {
              this.setButtonInteractableFlag(parseInt(c[C]), D);
              this.setButtonInteractable(parseInt(c[C]));
            }
          };
          L.prototype.setButtonsLock = function (D) {
            for (var k = 0, C = Object.keys(this._buttons).length; k < C; k++) {
              this.setButtonLock(k + 1, D);
            }
            k = 0;
            C = Object.keys(this._otherButtons).length;
            for (; k < C; k++) {
              this.setButtonLock(k + 1, D);
            }
          };
          L.prototype.setLockAccess = function (D, k) {
            this.setButtonLock(D, k);
            if (k) {
              if (this._otherButtons[D]) {
                this._otherButtons[D].isInteractable(!k);
              } else {
                this._buttons[D].isInteractable = !k;
              }
            } else {
              this.setButtonInteractable(D);
            }
          };
          L.prototype.getButtonNode = function (D) {
            var k = this._buttons[D];
            if (k) {
              return k.node;
            } else {
              return undefined;
            }
          };
          return __decorate([T("SettingMenuButtonHelper")], L);
        }();
        K.default = x;
        cc._RF.pop();
      }
    }, {}],
    SettingMenuController: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "fba916JMWpJiL2n5fnfp4nN", "SettingMenuController")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        K.SettingMenuController = undefined;
        var T = I("CanvasResizeBroadcaster");
        var x = I("HitPassThrough");
        var L = I("Utils");
        var D = I("UIAppearanceHelper");
        var k = I("BVFramework");
        var C = cc._decorator;
        var j = C.ccclass;
        var G = C.property;
        var V = function (Q) {
          function N() {
            var Y = Q !== null && Q.apply(this, arguments) || this;
            Y.blackTintBackground = undefined;
            Y.dimBackground = undefined;
            Y.subControllerHolder = undefined;
            Y.menusLayerHolder = undefined;
            Y.defaultMenuLayerNode = undefined;
            Y.moreMenuLayerNode = undefined;
            Y.subControllerBG = undefined;
            Y.settingInfoFooterFrontHolder = undefined;
            Y.settingInfoFooterMiddleBottomHolder = undefined;
            Y.settingInfoFooterBottomHolder = undefined;
            Y.walletButtonSensor = undefined;
            Y.hitPassThroughComponent = undefined;
            Y.settingToast = undefined;
            Y.settingToastBg = undefined;
            Y.settingToastLayout = undefined;
            Y.settingToastLabel = undefined;
            Y.settingTurboSprite = undefined;
            Y.settingTurboOnSprite = undefined;
            Y.settingTurboOffSprite = undefined;
            Y.featureBuyToast = undefined;
            Y.featureBuyToastBg = undefined;
            Y.featureBuyToastLayout = undefined;
            Y.featureBuyToastLabel = undefined;
            Y.featureBuyTurboSprite = undefined;
            Y.reminderBoard = undefined;
            Y.originalBetAmountLabel = undefined;
            Y.reminderBoardLabel = undefined;
            Y.holders = [];
            Y.muteIcon = undefined;
            Y.settingMenuUIBlock = undefined;
            Y._isControllerPresent = false;
            Y._showingDefaultMenu = true;
            Y._isSwitchingLayer = false;
            Y._itemList = [];
            Y._visibleItems = [];
            Y._isFullView = false;
            Y.FRONT_MAX_HOLDER = 4;
            Y._isPanelTouchMoved = false;
            Y._reminderBoardShowed = false;
            Y._subControllerHolderMoveDuration = 0.2;
            Y._panelCanBeMove = false;
            Y._startTouchPosY = 0;
            Y._lockWalletButton = false;
            return Y;
          }
          __extends(N, Q);
          N.prototype.onLoad = function () {
            this.settingTurboSprite.node.color = D.uiAppearanceHelper.v("setting.theme_color");
            this.defaultMenuLayerNode.y = 0;
            this.settingToast.opacity = 0;
            this.featureBuyToast.opacity = 0;
            this.featureBuyToast.active = false;
            this.moreMenuLayerNode.y = -this.defaultMenuLayerNode.height;
            this.moreMenuLayerNode.opacity = 0;
            this.moreMenuLayerNode.active = false;
            this.reminderBoard.active = false;
            this.reminderBoard.opacity = 1;
            this.blackTintBackground.active = false;
            this.settingMenuUIBlock.active = false;
            this.subControllerHolder.height = this._currentUsingHeight = cc.view.getVisibleSize().height;
            var Y = T.default.subscribe(this._onSizeChanged.bind(this));
            this._unsubscribeBroadcaster = typeof Y == "function" ? Y : undefined;
            this._gameContext = k.getGameContext();
          };
          N.prototype._onSizeChanged = function () {
            var Y = this;
            var W = this._sizeChangeAbort;
            this._sizeChangeAbort = undefined;
            if (W) {
              W();
            }
            var q = [];
            if (this._isFullView) {
              q.push(function () {
                var S = cc.view.getVisibleSize().height;
                var z = Y._getGapBetweenBottomScreenValue();
                Y.subControllerHolder.height = S - z;
                Y.subControllerBG.height = S;
              });
            } else {
              q.push(function () {
                if (Y._currentUsingHeight === undefined) {
                  throw Error("SettingMenuController :: _onSizeChanged : Please update holder height using updateSubControllerHolderHeight first!");
                }
                var S = Y._getGapBetweenBottomScreenValue();
                Y.subControllerHolder.height = Y._currentUsingHeight;
                Y.subControllerBG.height = Y._currentUsingHeight + S;
              });
            }
            this._sizeChangeAbort = L.sequenceCallback(L.delayCallback(0))(function () {
              Y._sizeChangeAbort = undefined;
              for (var S = 0; S < q.length; S++) {
                q[S]();
              }
            });
          };
          N.prototype.onDestroy = function () {
            var Y = this._unsubscribeBroadcaster;
            this._unsubscribeBroadcaster = undefined;
            if (Y) {
              Y();
            }
          };
          N.prototype.setBetChangeReminderLabel = function (Y) {
            this.reminderBoardLabel.string = Y;
          };
          N.prototype.showBetReminderBoard = function (Y) {
            if (!this._reminderBoardShowed) {
              this._reminderBoardShowed = true;
              this.reminderBoard.active = true;
              this.reminderBoard.stopAllActions();
              this.reminderBoard.runAction(cc.fadeIn(0.2));
              this.originalBetAmountLabel.string = Y;
            }
          };
          N.prototype.hideBetReminderBoard = function () {
            var Y = this;
            if (this._reminderBoardShowed) {
              this._reminderBoardShowed = false;
              this.reminderBoard.stopAllActions();
              this.reminderBoard.runAction(cc.sequence(cc.fadeOut(0.2), cc.callFunc(function () {
                Y.reminderBoard.active = false;
              })));
            }
          };
          N.prototype.isSettingBetReminderBoardShowed = function () {
            return this._reminderBoardShowed;
          };
          N.prototype.cancelToChangeBetAmount = function () {
            if (this._cancelToChangeBetAmountCB) {
              this._cancelToChangeBetAmountCB();
            }
          };
          N.prototype.confirmToChangeBetAmount = function () {
            if (this._confirmToChangeBetAmountCB) {
              this._confirmToChangeBetAmountCB();
            }
          };
          N.prototype.setBetReminderCancelAndConfirmCallback = function (Y, W) {
            this._cancelToChangeBetAmountCB = Y;
            this._confirmToChangeBetAmountCB = W;
          };
          N.prototype.showSettingTurboToast = function (Y, W, q) {
            var S = this;
            if (q === undefined) {
              q = 2;
            }
            var z = this._abortUpdateSettingToastBgSize;
            this._abortUpdateSettingToastBgSize = undefined;
            if (z) {
              z();
            }
            this.settingToast.stopAllActions();
            if (!z) {
              this.settingToast.opacity = 1;
            }
            this.settingToastLabel.string = Y;
            this.settingTurboSprite.node.active = true;
            this.settingTurboSprite.spriteFrame = W ? this.settingTurboOnSprite : this.settingTurboOffSprite;
            this.settingTurboSprite.node.stopAllActions();
            this.settingTurboSprite.node.opacity = 0;
            this._abortUpdateSettingToastBgSize = L.delayCallback(0)(function () {
              S.settingToastBg.width = S.settingToastLabel.node.width + 48 + S.settingTurboSprite.node.width;
              S.settingToastBg.height = S.settingToastLabel.node.height + 24;
              S.settingToast.opacity = 255;
              S.settingToast.runAction(cc.sequence(cc.scaleTo(0.1, 1.2), cc.spawn(cc.scaleTo(0.1, 1), cc.sequence(cc.delayTime(0.05), cc.callFunc(function () {
                S.settingTurboSprite.node.runAction(cc.fadeTo(0.05, 255));
              }))), cc.delayTime(q), cc.fadeOut(0.3), cc.callFunc(function () {
                S._abortUpdateSettingToastBgSize = undefined;
              })));
            });
          };
          N.prototype.showSettingToast = function (Y, W) {
            var q = this;
            if (W === undefined) {
              W = 2;
            }
            var S = this._abortUpdateSettingToastBgSize;
            this._abortUpdateSettingToastBgSize = undefined;
            if (S) {
              S();
            }
            this.settingToast.stopAllActions();
            this.settingTurboSprite.node.stopAllActions();
            this.settingTurboSprite.node.active = false;
            this.settingTurboSprite.node.opacity = 0;
            if (!S) {
              this.settingToast.opacity = 1;
            }
            this.settingToastLabel.string = Y;
            this._abortUpdateSettingToastBgSize = L.delayCallback(0)(function () {
              q.settingToastBg.width = q.settingToastLabel.node.width + 48;
              q.settingToastBg.height = q.settingToastLabel.node.height + 24;
              q.settingToast.opacity = 255;
              q.settingToast.runAction(cc.sequence(cc.scaleTo(0.1, 1.2), cc.scaleTo(0.1, 1), cc.delayTime(W), cc.fadeOut(0.3), cc.callFunc(function () {
                q._abortUpdateSettingToastBgSize = undefined;
              })));
            });
          };
          N.prototype.hideSettingToast = function () {
            var Y = this;
            var W = this._abortUpdateSettingToastBgSize;
            this._abortUpdateSettingToastBgSize = undefined;
            if (W) {
              W();
            }
            this.settingToast.stopAllActions();
            this.settingToast.runAction(cc.sequence(cc.fadeOut(0.3), cc.callFunc(function () {
              Y._abortUpdateSettingToastBgSize = undefined;
            })));
          };
          N.prototype.showFeatureBuyToast = function (Y, W) {
            var q = this;
            if (W === undefined) {
              W = 2;
            }
            var S = this._abortUpdateFeatureBuyToastBgSize;
            this._abortUpdateFeatureBuyToastBgSize = undefined;
            if (S) {
              S();
            }
            this.featureBuyToast.active = true;
            this.featureBuyToast.stopAllActions();
            this.featureBuyTurboSprite.node.stopAllActions();
            this.featureBuyTurboSprite.node.active = false;
            this.featureBuyTurboSprite.node.opacity = 0;
            if (!S) {
              this.featureBuyToast.opacity = 1;
            }
            this.featureBuyToastLabel.string = Y;
            this._abortUpdateFeatureBuyToastBgSize = L.delayCallback(0)(function () {
              q.featureBuyToastBg.width = q.featureBuyToastLabel.node.width + 20;
              q.featureBuyToastBg.height = q.featureBuyToastLabel.node.height + 48;
              q.featureBuyToast.opacity = 255;
              q.featureBuyToast.runAction(cc.sequence(cc.scaleTo(0.1, 1.2), cc.scaleTo(0.1, 1), cc.delayTime(W), cc.fadeOut(0.3), cc.callFunc(function () {
                q._abortUpdateFeatureBuyToastBgSize = undefined;
              })));
            });
          };
          N.prototype.hideFeatureBuyToast = function () {
            var Y = this;
            var W = this._abortUpdateFeatureBuyToastBgSize;
            this._abortUpdateFeatureBuyToastBgSize = undefined;
            if (W) {
              W();
            }
            this.featureBuyToast.stopAllActions();
            this.featureBuyToast.runAction(cc.sequence(cc.fadeOut(0.3), cc.callFunc(function () {
              Y._abortUpdateFeatureBuyToastBgSize = undefined;
            })));
          };
          N.prototype.setFeatureBuyToastNodePosition = function (Y, W, q) {
            this.featureBuyToast.setPosition(Y, W, q);
          };
          N.prototype.buttonsHolder = function () {
            return this.holders;
          };
          N.prototype.addMenuItem = function (Y) {
            this.holders[this._itemList.length].addChild(Y);
            this._itemList.push(Y);
            this._reloadMenuItems();
            return this.holders[this._itemList.length - 1];
          };
          N.prototype.addEmptyItem = function () {
            this._itemList.push(null);
            this._reloadMenuItems();
            return this.holders[this._itemList.length - 1];
          };
          N.prototype.replaceMenuItems = function (Y) {
            this._itemList.length = 0;
            for (var W = 0, q = Y.length; W < q; W++) {
              this._itemList.push(Y[W]);
            }
            this._reloadMenuItems();
          };
          N.prototype._reloadMenuItems = function () {
            this._visibleItems.length = 0;
            for (var Y = 0, W = this._itemList.length; Y < W; Y++) {
              if (this._showingDefaultMenu) {
                if (Y >= this.FRONT_MAX_HOLDER) {
                  break;
                }
                this._visibleItems.push(this._itemList[Y]);
              } else if (Y >= this.FRONT_MAX_HOLDER) {
                this._visibleItems.push(this._itemList[Y]);
              }
            }
          };
          N.prototype.isItemVisible = function (Y) {
            return this._visibleItems.indexOf(Y) !== -1;
          };
          N.prototype.visibleItems = function () {
            return this._visibleItems.slice();
          };
          N.prototype.getTotalItems = function () {
            return this._itemList.slice();
          };
          N.prototype.isIdle = function () {
            return !this._isControllerPresent && this._showingDefaultMenu;
          };
          N.prototype.isShowingDefaultMenu = function () {
            return this._showingDefaultMenu;
          };
          N.prototype.setHitPassThroughPosAndSize = function (Y, W, q, S) {
            var z = this.walletButtonSensor.convertToNodeSpaceAR(cc.v2(Y, W));
            this.hitPassThroughComponent.passPoint = cc.v2(z.x, z.y);
            this.hitPassThroughComponent.passSize = cc.size(q, S);
          };
          N.prototype.setHidden = function (Y) {
            this.node.active = !Y;
          };
          N.prototype.getSettingInfoFooterFrontHolder = function () {
            return this.settingInfoFooterFrontHolder;
          };
          N.prototype.getSettingInfoFooterBottomHolder = function () {
            return this.settingInfoFooterBottomHolder;
          };
          N.prototype.getSettingInfoFooterMiddleBottomHolder = function () {
            return this.settingInfoFooterMiddleBottomHolder;
          };
          N.prototype.setMenusLayerHolderOffsetPosition = function (Y, W) {
            var q = this.menusLayerHolder;
            q.setPosition(q.x + Y, q.y + W);
          };
          N.prototype.isSwitchingMenuLayer = function () {
            return this._isSwitchingLayer;
          };
          N.prototype.showMoreMenuLayer = function (Y) {
            var W = this;
            if (Y === undefined) {
              Y = false;
            }
            if (!this._isSwitchingLayer) {
              this._isSwitchingLayer = true;
              this._showingDefaultMenu = false;
              this._reloadMenuItems();
              this.defaultMenuLayerNode.runAction(cc.sequence(cc.spawn(cc.moveTo(0.2, 0, -this.defaultMenuLayerNode.height).easing(cc.easeQuadraticActionOut()), cc.fadeOut(0.2)), cc.callFunc(function () {
                W.defaultMenuLayerNode.active = false;
                W._isSwitchingLayer = false;
                if (W.onMenuEndChanged) {
                  W.onMenuEndChanged();
                }
              })));
              this.moreMenuLayerNode.active = true;
              this.moreMenuLayerNode.runAction(cc.spawn(cc.moveTo(0.2, 0, 0).easing(cc.easeQuadraticActionOut()), cc.fadeIn(0.2).easing(cc.easeQuadraticActionOut())));
              if (Y) {
                this.blackTintBackground.active = true;
                this.blackTintBackground.runAction(cc.fadeTo(0.2, 127.5));
              }
              var q = this.onMenuStartChanged;
              if (q) {
                q(true, true);
              }
            }
          };
          N.prototype.hideMoreMenuLayer = function () {
            var Y = this;
            if (!this._isSwitchingLayer) {
              this._isSwitchingLayer = true;
              this._showingDefaultMenu = true;
              this._reloadMenuItems();
              this.defaultMenuLayerNode.active = true;
              this.defaultMenuLayerNode.runAction(cc.sequence(cc.spawn(cc.moveTo(0.2, 0, 0).easing(cc.easeQuadraticActionOut()), cc.fadeIn(0.2)), cc.callFunc(function () {
                Y._isSwitchingLayer = false;
                if (Y.onMenuEndChanged) {
                  Y.onMenuEndChanged();
                }
              })));
              this.moreMenuLayerNode.runAction(cc.sequence(cc.spawn(cc.moveTo(0.2, 0, -this.defaultMenuLayerNode.height).easing(cc.easeQuadraticActionOut()), cc.fadeOut(0.2).easing(cc.easeQuadraticActionOut())), cc.callFunc(function () {
                Y.moreMenuLayerNode.active = false;
              })));
              if (this.blackTintBackground.active === true) {
                this.blackTintBackground.runAction(cc.sequence(cc.fadeOut(0.2), cc.callFunc(function () {
                  Y.blackTintBackground.active = false;
                })));
              }
              var W = this.onMenuStartChanged;
              if (W) {
                W(false, true);
              }
            }
          };
          N.prototype.isControllerPresenting = function () {
            return this._isControllerPresent;
          };
          N.prototype.setIsControllerPresenting = function (Y) {
            this._isControllerPresent = Y;
          };
          N.prototype.setSubControllerHolderMoveDuration = function (Y) {
            this._subControllerHolderMoveDuration = Y;
          };
          N.prototype._getGapBetweenBottomScreenValue = function () {
            return this.node.parent.convertToWorldSpaceAR(cc.v2(this.node.x, this.node.y)).y;
          };
          N.prototype.getGapBetweenBottomScreenValue = function () {
            return this._getGapBetweenBottomScreenValue();
          };
          N.prototype.updateSubControllerHolderHeight = function (Y) {
            this.subControllerHolder.height = this._currentUsingHeight = Y;
          };
          N.prototype.isPanelTouchMoving = function () {
            return this._isPanelTouchMoved;
          };
          N.prototype.startMovePanel = function (Y, W) {
            if (!this._isControllerPresent) {
              this._isPanelTouchMoved = false;
              this._panelCanBeMove = false;
              this.subControllerHolder.height = W;
              this.subControllerHolder.y = -W;
              this._startTouchPosY = Y;
              this.subControllerBG.height = this._getGapBetweenBottomScreenValue() + W;
            }
          };
          N.prototype.movePanel = function (Y) {
            if (!this._isControllerPresent) {
              this._isPanelTouchMoved = true;
              var W = this.subControllerHolder;
              var q = this.subControllerHolder.height;
              var S = W.parent.convertToNodeSpaceAR(cc.v2(0, Y)).y;
              var z = Math.abs(this._startTouchPosY - Y);
              if (this._panelCanBeMove) {
                W.y = S - q;
                if (W.y >= 0) {
                  W.y = 0;
                }
              } else if (z > 60) {
                if (Y > this._startTouchPosY) {
                  this._panelCanBeMove = true;
                  this.subControllerBG.opacity = 255;
                  if (this._movePanelCallback) {
                    this._movePanelCallback();
                  }
                }
              } else {
                W.y = S - q;
              }
            }
          };
          N.prototype.closePanel = function () {
            var Y = this;
            if (!this._isControllerPresent) {
              this._isControllerPresent = true;
              var W = this.subControllerHolder.height + this._getGapBetweenBottomScreenValue();
              this.subControllerHolder.runAction(cc.sequence(cc.moveTo(this._subControllerHolderMoveDuration, 0, -W), cc.callFunc(function () {
                Y._isControllerPresent = false;
                Y._isPanelTouchMoved = false;
                Y.subControllerBG.opacity = 0;
              })));
            }
          };
          N.prototype.getCurrentPanelTopPositionY = function () {
            var Y = this.subControllerHolder;
            return Y.y + Y.height;
          };
          N.prototype.setWalletButtonLock = function (Y = false) {
            this._lockWalletButton = Y;
          };
          N.prototype.interactableWalletButton = function (Y, W) {
            if (this._lockWalletButton === false && !Y && W) {
              this.closePanel();
            }
          };
          N.prototype.setMenuUIBlock = function (Y) {
            this.settingMenuUIBlock.active = Y;
          };
          N.prototype.updateLayout = function (Y) {
            if (Y) {
              this.settingToastLayout.horizontalDirection = cc.Layout.HorizontalDirection.RIGHT_TO_LEFT;
            }
          };
          __decorate([G(cc.Node)], N.prototype, "blackTintBackground", undefined);
          __decorate([G(cc.Node)], N.prototype, "dimBackground", undefined);
          __decorate([G(cc.Node)], N.prototype, "subControllerHolder", undefined);
          __decorate([G(cc.Node)], N.prototype, "menusLayerHolder", undefined);
          __decorate([G(cc.Node)], N.prototype, "defaultMenuLayerNode", undefined);
          __decorate([G(cc.Node)], N.prototype, "moreMenuLayerNode", undefined);
          __decorate([G(cc.Node)], N.prototype, "subControllerBG", undefined);
          __decorate([G(cc.Node)], N.prototype, "settingInfoFooterFrontHolder", undefined);
          __decorate([G(cc.Node)], N.prototype, "settingInfoFooterMiddleBottomHolder", undefined);
          __decorate([G(cc.Node)], N.prototype, "settingInfoFooterBottomHolder", undefined);
          __decorate([G(cc.Node)], N.prototype, "walletButtonSensor", undefined);
          __decorate([G(x.default)], N.prototype, "hitPassThroughComponent", undefined);
          __decorate([G(cc.Node)], N.prototype, "settingToast", undefined);
          __decorate([G(cc.Node)], N.prototype, "settingToastBg", undefined);
          __decorate([G(cc.Layout)], N.prototype, "settingToastLayout", undefined);
          __decorate([G(cc.Label)], N.prototype, "settingToastLabel", undefined);
          __decorate([G(cc.Sprite)], N.prototype, "settingTurboSprite", undefined);
          __decorate([G(cc.SpriteFrame)], N.prototype, "settingTurboOnSprite", undefined);
          __decorate([G(cc.SpriteFrame)], N.prototype, "settingTurboOffSprite", undefined);
          __decorate([G(cc.Node)], N.prototype, "featureBuyToast", undefined);
          __decorate([G(cc.Node)], N.prototype, "featureBuyToastBg", undefined);
          __decorate([G(cc.Layout)], N.prototype, "featureBuyToastLayout", undefined);
          __decorate([G(cc.RichText)], N.prototype, "featureBuyToastLabel", undefined);
          __decorate([G(cc.Sprite)], N.prototype, "featureBuyTurboSprite", undefined);
          __decorate([G(cc.Node)], N.prototype, "reminderBoard", undefined);
          __decorate([G(cc.Label)], N.prototype, "originalBetAmountLabel", undefined);
          __decorate([G(cc.Label)], N.prototype, "reminderBoardLabel", undefined);
          __decorate([G([cc.Node])], N.prototype, "holders", undefined);
          __decorate([G(cc.Node)], N.prototype, "muteIcon", undefined);
          __decorate([G(cc.Node)], N.prototype, "settingMenuUIBlock", undefined);
          return __decorate([j], N);
        }(cc.Component);
        K.SettingMenuController = V;
        cc._RF.pop();
      }
    }, {
      BVFramework: "BVFramework",
      CanvasResizeBroadcaster: "CanvasResizeBroadcaster",
      HitPassThrough: "HitPassThrough",
      UIAppearanceHelper: "UIAppearanceHelper",
      Utils: "Utils"
    }],
    SettingMenuHandlers: [function (R, K, g) {
      'use strict';

      if (!cc._RF.push(K, "e4a87/dIGtMT5oq5NQEGbT5", "SettingMenuHandlers")) {
        Object.defineProperty(g, "__esModule", {
          value: true
        });
        g.handleSettingMenuMusicChange = g.handleSettingMenuFlipped = g.additionalBetCalculation = g.updateDataSourceBetValue = g.getBetChangeCallback = g.updateBetChangesCallback = g.initializeSettingMenu = g.setupSettingMenu = undefined;
        var L = R("LaunchConfig");
        var D = R("AnalyticsHelper");
        var k = R("QuitGameWithEvent");
        var C = R("Utils");
        var j = {
          settingMenuLibPath: "lib/setting_menu/"
        };
        g.setupSettingMenu = function (q) {
          var S = Object.assign({}, j, q.settingMenuDependenciesPath);
          var z = q.settingMenuHelper;
          var f = q.dataSource;
          var A = q.callback;
          z.path = S.settingMenuLibPath;
          z.showChangeBetReminder = q.isProgressiveGame;
          z.showForfeitProgressReminder = q.showForfeitProgressReminder;
          z.manualUpdateBetFactorCallBack = V(f, z, q.betChangeCallback);
          z.betModifierUpdateCallback = G(f, z, q.betChangeCallback);
          z.reevaluateBetCallback = Q(f, q.reevaluateBetCallback);
          z.additionalBetCalculationCallback = q.additionalBetCalculation ? q.additionalBetCalculation : N;
          z.changeSoundVolume = W(q.toggleEffectMuted, q.toggleMusicMuted);
          var M = L.cs_Launch.noAudio !== "1";
          z.audioConfigure = M;
          if (A) {
            A();
          }
        };
        g.initializeSettingMenu = function (q) {
          var S = q.settingMenuHelper;
          var z = q.dataSource;
          var f = q.callback;
          S.setSettingMenuController(q.settingController);
          S.addSettingInfoFooter(q.settingWalletPanelController);
          S.setOnClickReturnButtonCallback(function () {
            k.quitGameWithEvent("Setting Quit")();
          });
          S.setupSettingMenuButtons();
          S.menuChangedCallBack = q.settingMenuChangedHandling ? q.settingMenuChangedHandling : Y(q.spinButtonController);
          var A = z.playerModel.balance;
          S.setBalance(A);
          S.updateBetValues();
          S.setAllButtonsInteractable(false);
          if (f) {
            f();
          }
        };
        g.updateBetChangesCallback = G;
        g.getBetChangeCallback = V;
        g.updateDataSourceBetValue = Q;
        g.additionalBetCalculation = N;
        g.handleSettingMenuFlipped = Y;
        g.handleSettingMenuMusicChange = W;
        cc._RF.pop();
      }
      function G(q, S, z) {
        return function (f, A) {
          var M = q.systemModel.maxLineNumber;
          S.betSizeValue = f;
          S.betLevelValue = A;
          Q(q)(f, A);
          D.sendEvent(shell.ga.CATEGORY_GAME, shell.ga.EVENT_SLOT_CHANGE_BET, {
            amount: f * A * M
          });
          if (z) {
            z();
          }
        };
      }
      function V(q, S, z) {
        return function (f, A) {
          G(q, S)(f, A);
          S.updateBetValues();
          if (z) {
            z();
          }
        };
      }
      function Q(q, S) {
        return function (z, f) {
          q.transactionModel.betSizeValue = z;
          q.transactionModel.betLevelValue = f;
          if (S) {
            S();
          }
        };
      }
      function N(q, S, z) {
        return C.toDecimalWithExp(q * S * z, 2);
      }
      function Y(q) {
        return function (S) {
          if (S) {
            q.hide();
          } else {
            q.show();
          }
        };
      }
      function W(q, S) {
        return function (z) {
          q(!z);
          S(!z);
        };
      }
    }, {
      AnalyticsHelper: "AnalyticsHelper",
      LaunchConfig: "LaunchConfig",
      QuitGameWithEvent: "QuitGameWithEvent",
      Utils: "Utils"
    }],
    SettingMenuHelper: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "35d29M3VudMFqjm4gRoo2G6", "SettingMenuHelper")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        K.BackButtonType = K.settingMenuHelper = K.SettingMenuType = K.ButtonPrefabType = K.SubControllers = undefined;
        var x;
        var L;
        var D;
        var k = I("Utils");
        var C = I("SettingMenuButtonHelper");
        var j = I("NotifyHelper");
        var G = I("Preference");
        var V = I("BVFramework");
        var Q = I("GameEventHandler");
        var N = System.get("wallet");
        var Y = System.get("slot-menu");
        var W = System.get("game-history");
        var q = System.get("paytable-rules");
        var z = cc._decorator.ccclass;
        var A = G.getPreference("setting_menu");
        A.defineItem("soundOn", true);
        (function (w) {
          w[w.SPIN_OPTIONS = 0] = "SPIN_OPTIONS";
          w[w.BET_OPTIONS = 1] = "BET_OPTIONS";
          w[w.SOUND = 2] = "SOUND";
          w[w.HISTORY = 3] = "HISTORY";
          w[w.PAYTABLE = 4] = "PAYTABLE";
          w[w.RULE = 5] = "RULE";
          w[w.WALLET = 6] = "WALLET";
        })(K.SubControllers ||= {});
        (function (w) {
          w[w.SPIN_OPTIONS = 2] = "SPIN_OPTIONS";
          w[w.BET_OPTIONS = 3] = "BET_OPTIONS";
          w[w.MORE_MENU = 4] = "MORE_MENU";
          w[w.SOUND = 5] = "SOUND";
          w[w.PAYTABLE = 6] = "PAYTABLE";
          w[w.RULE = 7] = "RULE";
          w[w.HISTORY = 8] = "HISTORY";
          w[w.HIDE_MORE = 9] = "HIDE_MORE";
          w[w.MINUS_BET = 10] = "MINUS_BET";
          w[w.PLUS_BET = 11] = "PLUS_BET";
          w[w.WALLET = 12] = "WALLET";
          w[w.WIN = 13] = "WIN";
          w[w.TURBO_SPIN = 14] = "TURBO_SPIN";
          w[w.QUIT = 15] = "QUIT";
          w[w.MAX_BET = 16] = "MAX_BET";
        })(x = K.ButtonPrefabType ||= {});
        (function (w) {
          w[w.HIDDEN = 0] = "HIDDEN";
          w[w.NORMAL_BACK_FUNC = 1] = "NORMAL_BACK_FUNC";
        })(L ||= {});
        K.BackButtonType = L;
        (function (w) {
          w[w.LEGACY = 0] = "LEGACY";
          w[w.NEW = 1] = "NEW";
        })(D = K.SettingMenuType ||= {});
        var M = new (function (w) {
          function U() {
            var B = w.call(this) || this;
            B.soundOn = A.soundOn;
            B.turboSpinOn = false;
            B.isFreeGameMode = false;
            B._isHidden = false;
            B._audioConfigure = true;
            B._backButtonType = L.HIDDEN;
            B._emptyButtonHolderOccupied = 0;
            B._path = "";
            B._betLineValue = 0;
            B._betSizeList = [];
            B._betLevelList = [];
            B._betSizeValue = 0;
            B._betLevelValue = 0;
            B._baseBet = "";
            B._soundEffectUrls = {
              sliderEffect: "audio/slider_effect",
              listItemClick: "audio/list_item_click",
              menuIconPress: "audio/menu_icon_press",
              walletCountingAbove: "audio/wallet_counting_above"
            };
            B._soundEffectLoaded = {
              sliderEffect: false,
              listItemClick: false,
              menuIconPress: false,
              walletCountingAbove: false
            };
            B._autoSpinStartBalance = 0;
            B.balanceAmountLessThan = 0;
            B.autoSpinCount = 0;
            B.balanceAmountMoreThan = 0;
            B.singleWinAmount = 0;
            B._showChangeBetReminder = false;
            B._showForfeitProgressReminder = false;
            B._isShowBlackTintBg = false;
            B._settingMenuButtonHelper = new C.default();
            B._gameContext = V.getGameContext();
            B._isActionStateComplete = false;
            B._subscribePluginEvents();
            B._subscribeTransactionStateEvents();
            B._gameContext.on("Game.Initialized", B._setOperatorConfig.bind(B));
            return B;
          }
          __extends(U, w);
          Object.defineProperty(U.prototype, "path", {
            get: function () {
              return this._path;
            },
            set: function (B) {
              this._path = B;
            },
            enumerable: false,
            configurable: true
          });
          U.prototype.setSettingMenuController = function (B) {
            this._settingMenuController = B;
          };
          Object.defineProperty(U.prototype, "settingMenuController", {
            get: function () {
              if (!this._settingMenuController) {
                throw Error("SettingMenuHelper :: settingMenuController : Cannot find settingMenuController. Please setup using setSettingMenuController first!");
              }
              return this._settingMenuController;
            },
            enumerable: false,
            configurable: true
          });
          U.prototype.initAudio = function (B) {
            this._initAudio(B);
          };
          U.prototype.loadAudio = function (B) {
            this._loadAudio(B);
          };
          U.prototype.setButtonPrefab = function (B, P, X = false) {
            this._settingMenuButtonHelper.setButtonPrefab(B, P, X);
          };
          Object.defineProperty(U.prototype, "autoSpinButtonLocaleIcon", {
            get: function () {
              if (!this._autoSpinButtonLocaleIcon) {
                throw Error("SettingMenuHelper :: autoSpinButtonLocaleIcon : Cannot find autoSpinButtonLocaleIcon. Please setup using settingMenuLocaleIcons setter first!");
              }
              return this._autoSpinButtonLocaleIcon;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(U.prototype, "historyButtonLocaleIcon", {
            get: function () {
              if (!this._historyButtonIcon) {
                throw Error("SettingMenuHelper :: historyButtonLocaleIcon : Cannot find historyButtonLocaleIcon. Please setup using settingMenuLocaleIcons setter first!");
              }
              return this._historyButtonIcon;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(U.prototype, "settingInfoFooterLocaleWinIcon", {
            get: function () {
              if (!this._settingInfoFooterWinIcon) {
                throw Error("SettingMenuHelper :: settingInfoFooterLocaleWinIcon : Cannot find settingInfoFooterLocaleWinIcon. Please setup using settingMenuLocaleIcons setter first!");
              }
              return this._settingInfoFooterWinIcon;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(U.prototype, "turboOnButtonLocaleIcon", {
            get: function () {
              if (!this._turboOnButtonLocaleIcon) {
                throw Error("SettingMenuHelper :: turboOnButtonLocaleIcon : Cannot find turboOnButtonLocaleIcon. Please setup using settingMenuLocaleIcons setter first!");
              }
              return this._turboOnButtonLocaleIcon;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(U.prototype, "turboOffButtonLocaleIcon", {
            get: function () {
              if (!this._turboOffButtonLocaleIcon) {
                throw Error("SettingMenuHelper :: turboOffButtonLocaleIcon : Cannot find turboOffButtonLocaleIcon. Please setup using settingMenuLocaleIcons setter first!");
              }
              return this._turboOffButtonLocaleIcon;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(U.prototype, "settingMenuLocaleIcons", {
            set: function (B) {
              this._autoSpinButtonLocaleIcon = B.getSpriteFrame("txt_auto");
              this._historyButtonIcon = B.getSpriteFrame("ic_hist");
              if (this._historyButton) {
                this._historyButton.setIconSprite(this._historyButtonIcon);
              }
              this._settingInfoFooterWinIcon = B.getSpriteFrame("ic_win");
              if (this._settingInfoFooter) {
                this._settingInfoFooter.setWinIcon(this._settingInfoFooterWinIcon);
              }
              this._turboOnButtonLocaleIcon = B.getSpriteFrame("txt_turbo_on");
              this._turboOffButtonLocaleIcon = B.getSpriteFrame("txt_turbo_off");
            },
            enumerable: false,
            configurable: true
          });
          U.prototype._setupTurboSpinButton = function () {
            var B = this;
            var P = this.settingMenuController;
            var X = this._settingMenuButtonHelper.setupSettingMenuButtonInList(x.TURBO_SPIN, function () {
              if (!P.isSwitchingMenuLayer()) {
                B.setTurboSpinButtonState(!B.turboSpinOn);
                B.playMenuIconPressSound();
                if (F()) {
                  P.hideMoreMenuLayer();
                }
              }
            });
            X.setTurboSprites(this.turboOnButtonLocaleIcon, this.turboOffButtonLocaleIcon);
            X.getTurboSpinCallback = function () {
              return this.turboSpinOn;
            }.bind(this);
            X.setButtonOnColor("setting", "color_button_transition_a");
            X.setButtonOffColor("setting", "white_button_transition_a");
            X.sprite.spriteFrame = X.turboSpinOn;
            X.spriteEffect.spriteFrame = X.turboSpinEffectOn;
            X.changeButtonColor(true);
            X.changeSpriteEffectColor();
            var J = this;
            this._triggerTurboSpinCallback = function () {
              this.stopTurboLighting();
              if (J.turboSpinOn) {
                this.playTurboLighting();
              } else {
                this.sprite.spriteFrame = this.turboSpinOff;
                this.spriteEffect.spriteFrame = X.turboSpinEffectOff;
              }
              this.changeButtonColor(true);
              P.showSettingTurboToast(J.turboSpinOn ? shell.I18n.t("SettingMenu.TurboSpinEnable") : shell.I18n.t("SettingMenu.TurboSpinDisable"), J.turboSpinOn, 2);
              J.sendEventToGoogleAnalytic(J.turboSpinOn);
            }.bind(X);
            this._triggerTurboSpinOnWatch = k.observeCallback(this, "turboSpinOn")(this._triggerTurboSpinCallback);
            P.addMenuItem(X.node);
            this._gameContext.on("Game.OnTurboSpin", function () {
              B.setTurboSpinButtonState(true);
            });
            this._gameContext.on("Game.OffTurboSpin", function () {
              B.setTurboSpinButtonState(false);
            });
          };
          U.prototype.setTurboSpinButtonState = function (B) {
            this.turboSpinOn = B;
            this._gameContext.emit("Game.TurboSpinStateChanged", this.turboSpinOn);
          };
          U.prototype.sendEventToGoogleAnalytic = function (B) {
            var P = {
              name: "Turbo Spin",
              index: B
            };
            if (cc.sys.isBrowser) {
              shell.ga.sendEvent(shell.ga.CATEGORY_GENERAL, shell.ga.EVENT_CHANGE_SETTING, P);
            }
          };
          U.prototype.setupSettingMenuButtons = function () {
            var B = this;
            var P = this.settingMenuController;
            var X = this._settingMenuButtonHelper;
            var J = this;
            this._internalMuteIconCallback = function () {
              if (F()) {
                P.muteIcon.active = false;
              } else if (P.isIdle()) {
                P.muteIcon.active = !B.soundOn;
              }
            };
            this._internalMuteIconCallback();
            this._internalMuteIconWatch = k.observeCallback(this, "soundOn")(this._internalMuteIconCallback);
            var Z0;
            function Z1(Z2) {
              var Z3 = X.setupSettingMenuButtonInList(x.SOUND, function () {
                B._onClickSoundControlButton();
                if (F()) {
                  P.hideMoreMenuLayer();
                }
              });
              Z3.setTitle(shell.I18n.t("SettingMenu.SettingSoundWord"));
              var Z4 = P.addMenuItem(Z3.node);
              B._internalSoundControlCallback = function () {
                this.sprite.spriteFrame = J.soundOn ? this.soundOn : this.soundOff;
                if (this.largeSprite) {
                  this.largeSprite.spriteFrame = J.soundOn ? this.largeSoundOnIcon : this.largeSoundOffIcon;
                }
              }.bind(Z3);
              B._landscapeSoundButtonNode = Z3.node;
              B._landscapePrimeHolder = Z4;
              if (!B._audioConfigure) {
                B.soundEnable = B._audioConfigure;
                B.setLockAccess(x.SOUND, true);
              }
              B._internalSoundControlCallback();
              B._internalSoundOnWatch = k.observeCallback(B, "soundOn")(B._internalSoundControlCallback);
              if (Z2) {
                Z3.customSetup();
              }
            }
            if (this._turboSpinEnable) {
              this._setupTurboSpinButton();
              if (F()) {
                (function () {
                  var Z2 = X.setupIndependentSettingMenuButton(x.SOUND, function () {
                    B._onClickSoundControlButton();
                    P.hideMoreMenuLayer();
                  });
                  if (!Z2) {
                    throw Error("SettingMenuHelper :: setupSettingMenuButtons : fail to setupIndependentSettingMenuButton when creating landscape sound button");
                  }
                  Z2.setTitle(shell.I18n.t("SettingMenu.SettingSoundWord"));
                  P.landscapeSoundButtonHolder.addChild(Z2.node);
                  B._internalSoundControlCallback = function () {
                    this.sprite.spriteFrame = J.soundOn ? this.soundOn : this.soundOff;
                    if (this.largeSprite) {
                      this.largeSprite.spriteFrame = J.soundOn ? this.largeSoundOnIcon : this.largeSoundOffIcon;
                    }
                  }.bind(Z2);
                  B._landscapeSoundButtonNode = Z2.node;
                  B._landscapePrimeHolder = P.landscapeSoundButtonHolder;
                  if (!B._audioConfigure) {
                    B.soundEnable = B._audioConfigure;
                    B.setLockAccess(x.SOUND, true);
                  }
                  B._internalSoundControlCallback();
                  B._internalSoundOnWatch = k.observeCallback(B, "soundOn")(B._internalSoundControlCallback);
                  Z2.customSetup();
                })();
              }
            } else {
              Z1(true);
            }
            (Z0 = this._minusBetButton = X.setupSettingMenuButtonInList(x.MINUS_BET, this.decreaseBet.bind(this))).setShowSettingToastCallback(P.showSettingToast.bind(P));
            Z0.setHideSettingToastCallback(P.hideSettingToast.bind(P));
            P.addMenuItem(Z0.node);
            (Z0 = this._plusBetButton = X.setupSettingMenuButtonInList(x.PLUS_BET, this.increaseBet.bind(this))).setShowSettingToastCallback(P.showSettingToast.bind(P));
            Z0.setHideSettingToastCallback(P.hideSettingToast.bind(P));
            P.addMenuItem(Z0.node);
            if (this._autoPlayConfig) {
              (Z0 = this._spinOptionButton = X.setupSettingMenuButtonInList(x.SPIN_OPTIONS, this._onClickAutoSpinMenuButton.bind(this))).setAutoSpinSprite(this.autoSpinButtonLocaleIcon);
              P.addMenuItem(Z0.node);
            }
            Z0 = X.setupSettingMenuButtonInList(x.MORE_MENU, this.showMoreMenuLayer.bind(this), this._autoPlayConfig ? "white_button_transition_a" : "color_button_transition_a");
            P.addMenuItem(Z0.node);
            if (!this._autoPlayConfig) {
              Z0.customSetup();
              P.addEmptyItem();
              this._emptyButtonHolderOccupied += 1;
            }
            if (this._backButtonType === L.NORMAL_BACK_FUNC) {
              Z0 = X.setupSettingMenuButtonInList(x.QUIT, this.onClickQuitButton.bind(this));
              P.addMenuItem(Z0.node);
            }
            if (this._turboSpinEnable && !F()) {
              Z1(false);
            }
            Z0 = X.setupSettingMenuButtonInList(x.PAYTABLE, this._onClickPayoutMenuButton.bind(this));
            P.addMenuItem(Z0.node);
            Z0 = X.setupSettingMenuButtonInList(x.RULE, this._onClickRulesMenuButton.bind(this));
            P.addMenuItem(Z0.node);
            (Z0 = this._historyButton = X.setupSettingMenuButtonInList(x.HISTORY, this._onClickHistoryMenuButton.bind(this))).setIconSprite(this.historyButtonLocaleIcon);
            P.addMenuItem(Z0.node);
            Z0 = X.setupSettingMenuButtonInList(x.HIDE_MORE, this._onClickHideMoreMenuButton.bind(this));
            P.addMenuItem(Z0.node);
            if (Z0 = this._maxBetButton = this._settingMenuButtonHelper.setupIndependentSettingMenuButton(x.MAX_BET, this.maxBet.bind(this))) {
              this.settingInfoFooter.maxBetButtonHolder.addChild(Z0.node);
              Z0.setShowSettingToastCallback(P.showSettingToast.bind(P));
              Z0.setHideSettingToastCallback(P.hideSettingToast.bind(P));
            }
            this._hideAvailableButtonHolder();
            P.updateLayout(H());
          };
          U.prototype._hideAvailableButtonHolder = function () {
            var B = this.settingMenuController.buttonsHolder();
            var P = this._settingMenuButtonHelper.totalButtonsOccupied();
            for (var X = B.length - P - this._emptyButtonHolderOccupied, J = B.length - 1; J >= 0 && !(X <= 0); J--) {
              B[J].active = false;
              X--;
            }
          };
          U.prototype.setFeatureBuyToastNodePosition = function (B, P, X) {
            this.settingMenuController.setFeatureBuyToastNodePosition(B, P, X);
          };
          Object.defineProperty(U.prototype, "menuChangedCallBack", {
            set: function (B) {
              this._menuChangedCallBack = B;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(U.prototype, "backButtonType", {
            get: function () {
              return this._backButtonType;
            },
            set: function (B) {
              this._backButtonType = B;
            },
            enumerable: false,
            configurable: true
          });
          U.prototype.setOnClickReturnButtonCallback = function (B) {
            this._onClickReturnButtonCallback = B;
          };
          U.prototype.setIsControllerPresenting = function (B) {
            this.settingMenuController.setIsControllerPresenting(B);
          };
          U.prototype._onClickAutoSpinMenuButton = function () {
            this.playMenuIconPressSound();
            if (!this.settingMenuController.isPanelTouchMoving()) {
              this.openAutoSpinMenu();
            }
          };
          U.prototype._onClickBetMenuButton = function () {
            this.playMenuIconPressSound();
            if (!this.settingMenuController.isPanelTouchMoving()) {
              this.openBetMenu();
            }
          };
          U.prototype._onClickSoundControlButton = function () {
            this.playMenuIconPressSound();
            this.toggleSound();
          };
          U.prototype._onClickHistoryMenuButton = function (B = false) {
            this.playMenuIconPressSound();
            if (!this.settingMenuController.isPanelTouchMoving()) {
              this.openHistoryMenu(B);
            }
          };
          U.prototype._onClickPayoutMenuButton = function () {
            this.playMenuIconPressSound();
            if (!this.settingMenuController.isPanelTouchMoving()) {
              this.openPayoutMenu();
            }
          };
          U.prototype._onClickRulesMenuButton = function () {
            this.playMenuIconPressSound();
            if (!this.settingMenuController.isPanelTouchMoving()) {
              this.openRulesMenu();
            }
          };
          U.prototype._onClickWalletMenuButton = function () {
            this.playMenuIconPressSound();
            this.openWalletMenu();
          };
          U.prototype._onClickHideMoreMenuButton = function () {
            this.playMenuIconPressSound();
            this.hideMoreMenuLayer();
          };
          U.prototype.openAutoSpinMenu = function () {
            var B = this.settingMenuController;
            if (!B.isControllerPresenting() && !B.isSwitchingMenuLayer()) {
              this._cancelBetReminderBoard();
              if (F()) {
                B.hideMoreMenuLayer();
              }
              B.setIsControllerPresenting(true);
              this._gameContext.emit("SlotMenu.ShowSpinOptions", undefined);
            }
          };
          U.prototype.openBetMenu = function () {
            var B = this.settingMenuController;
            if (!B.isControllerPresenting() && !B.isSwitchingMenuLayer()) {
              this._cancelBetReminderBoard();
              this.hideMoreMenuLayer();
              B.setIsControllerPresenting(true);
              this._toggleBetOptionsEvent(true);
              this._gameContext.emit("SlotMenu.ShowBetOptions", undefined);
            }
          };
          U.prototype.toggleSound = function () {
            var B = this.settingMenuController;
            if (!B.isControllerPresenting() && !B.isSwitchingMenuLayer()) {
              this.soundEnable = !this.soundEnable;
              var P = this.soundEnable === true ? "OnGameSound" : "OffGameSound";
              this._emitAnalyticsEvent(P);
              this.playMenuIconPressSound();
            }
          };
          U.prototype.openHistoryMenu = function (B = false) {
            var P = this.settingMenuController;
            if (!P.isControllerPresenting() && !P.isSwitchingMenuLayer()) {
              if (B) {
                this.hideMoreMenuLayer();
              }
              P.setIsControllerPresenting(true);
              this._gameContext.emit("History.ShowGame");
              this._cancelBetReminderBoard();
            }
          };
          U.prototype.openPayoutMenu = function () {
            var B = this.settingMenuController;
            if (!B.isControllerPresenting() && !B.isSwitchingMenuLayer()) {
              if (F()) {
                B.hideMoreMenuLayer();
              }
              B.setIsControllerPresenting(true);
              this._gameContext.emit("Paytable.Show");
            }
          };
          U.prototype.openRulesMenu = function () {
            var B = this.settingMenuController;
            if (!B.isControllerPresenting() && !B.isSwitchingMenuLayer()) {
              if (F()) {
                B.hideMoreMenuLayer();
              }
              B.setIsControllerPresenting(true);
              this._gameContext.emit("GameRules.Show");
            }
          };
          U.prototype.openWalletMenu = function () {
            var B = this.settingMenuController;
            if (!B.isControllerPresenting() && !B.isSwitchingMenuLayer()) {
              if (N) {
                this.activateWalletNotify(false);
                this._emitWalletEvent(N.WalletEventEnum.EN_WALLET_LIST_ANIM);
              }
            }
          };
          U.prototype.showMoreMenuLayer = function () {
            var B = this.settingMenuController;
            this.playMenuIconPressSound();
            if (shell.environment.getOrientationMode() === "port") {
              B.muteIcon.active = false;
            }
            if (!B.isControllerPresenting() && !B.isSwitchingMenuLayer()) {
              this._cancelBetReminderBoard();
              B.showMoreMenuLayer(this._isShowBlackTintBg);
              var P = this._menuChangedCallBack;
              if (P) {
                P(true, true);
              }
            }
          };
          U.prototype.hideMoreMenuLayer = function () {
            var B = this.settingMenuController;
            if (F()) {
              B.muteIcon.active = false;
            } else if (this.soundOn) {
              B.muteIcon.active = false;
            } else {
              B.muteIcon.active = true;
            }
            if (!B.isControllerPresenting() && !B.isSwitchingMenuLayer()) {
              this.settingInfoFooter.changeHolder(B.getSettingInfoFooterFrontHolder());
              B.hideMoreMenuLayer();
              var P = this._menuChangedCallBack;
              if (P) {
                P(false, true);
              }
            }
          };
          U.prototype.onClickQuitButton = function () {
            var B = this;
            var P = this.settingMenuController;
            if (!P.isSwitchingMenuLayer() && !P.isControllerPresenting()) {
              var X = {
                title_message: shell.I18n.t("SettingMenuHelper.QuitGameTitle"),
                content_message: shell.I18n.t("SettingMenuHelper.QuitGameMessage"),
                actions: [{
                  title: shell.I18n.t("SettingMenuHelper.Cancel"),
                  handler: function () {
                    P.setIsControllerPresenting(false);
                  }
                }, {
                  title: shell.I18n.t("SettingMenuHelper.Quit"),
                  handler: function () {
                    P.setIsControllerPresenting(false);
                    if (B._onClickReturnButtonCallback) {
                      B._onClickReturnButtonCallback();
                    }
                  },
                  auto_dismiss: false
                }]
              };
              P.setIsControllerPresenting(true);
              j.showDialog(X);
              this.playMenuIconPressSound();
            }
          };
          U.prototype.isBalanceHitTargetInAutoSpinMode = function (B, P) {
            var X = false;
            var J = this.singleWinAmount;
            var Z0 = this.balanceAmountMoreThan;
            var Z1 = this.balanceAmountLessThan;
            var Z2 = this._autoSpinStartBalance;
            if (J && B > J) {
              X = true;
            }
            if (Z0 && P >= Z2 + Z0) {
              X = true;
            }
            if (Z1 && P <= Z2 - Z1) {
              X = true;
            }
            return X;
          };
          U.prototype.stopSpinOptionButtonAnim = function () {
            if (this._spinOptionButton) {
              this._spinOptionButton.stopAutoSpinAnim();
            }
          };
          U.prototype.playSpinOptionButtonAnim = function () {
            if (this._spinOptionButton) {
              this._spinOptionButton.playAutoSpinAnim();
            }
          };
          Object.defineProperty(U.prototype, "autoSpinCallback", {
            set: function (B) {
              var P = this;
              this._autoSpinCallback = function (X) {
                var J = X.payload;
                P.autoSpinCount = J.autoSpinCount;
                P.singleWinAmount = J.singleWinAmount;
                P.balanceAmountMoreThan = J.balanceAmountMoreThan;
                P.balanceAmountLessThan = J.balanceAmountLessThan;
                P._autoSpinStartBalance = J.autoSpinStartBalance;
                if (P.autoSpinCount > 0) {
                  P.playSpinOptionButtonAnim();
                }
                if (B) {
                  B();
                }
              };
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(U.prototype, "turboSpinCallback", {
            set: function (B) {
              if (this._turboSpinCallback) {
                if (this._turboSpinWatch) {
                  this._turboSpinWatch();
                }
                this._turboSpinCallback = undefined;
              }
              this._turboSpinCallback = function () {
                if (B) {
                  B();
                }
              };
              this._turboSpinWatch = k.observeCallback(this, "turboSpinOn")(this._turboSpinCallback);
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(U.prototype, "additionalBetCalculationCallback", {
            set: function (B) {
              this._gameContext.emit("SlotMenu.UpdateAdditionalBetCalculation", B);
              this._additionalBetCalculationCallback = B;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(U.prototype, "audioConfigure", {
            get: function () {
              return this._audioConfigure;
            },
            set: function (B) {
              this._audioConfigure = B;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(U.prototype, "showChangeBetReminder", {
            set: function (B) {
              this._showChangeBetReminder = B;
              this._gameContext.emit("SlotMenu.SetShowChangeBetReminder", B);
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(U.prototype, "showForfeitProgressReminder", {
            set: function (B) {
              this._showForfeitProgressReminder = B;
              this._gameContext.emit("SlotMenu.SetShowForfeitProgressReminder", B);
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(U.prototype, "manualUpdateBetFactorCallBack", {
            set: function (B) {
              var P = this;
              this._manualUpdateBetFactorCallback = function (X, J) {
                P.checkSelectedValue(k.toDecimalWithExp(X * J * P.betLineValue, 2));
                B(X, J);
              };
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(U.prototype, "finishBetPickCallback", {
            set: function (B) {
              this._finishBetPickCallback = B;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(U.prototype, "cancelBetPanelCallback", {
            set: function (B) {
              this._cancelBetPanelCallback = B;
            },
            enumerable: false,
            configurable: true
          });
          U.prototype.updateBetLabelCallback = function (B) {
            this._updateBetLabelCallback = B;
          };
          U.prototype.updateBetValues = function (B = 0) {
            if (!this._additionalBetCalculationCallback) {
              this._additionalBetCalculationCallback = function (J, Z0, Z1) {
                return J * Z0 * Z1;
              };
              this._gameContext.emit("SlotMenu.UpdateAdditionalBetCalculation", this._additionalBetCalculationCallback);
            }
            this._selectedBetAmount = k.toFixed(this.betLineValue * this.betLevelValue * this.betSizeValue, 2);
            var P = this._additionalBetCalculationCallback(this.betLineValue, this.betLevelValue, this.betSizeValue);
            var X = k.formatCurrency(P);
            if (this._updateBetLabelCallback) {
              this._updateBetLabelCallback(X, B);
            }
            this._emitTransactionInfoChangedEvent({
              totalBet: k.toDecimalWithExp(P, 2)
            });
          };
          U.prototype._isBetSizeValid = function () {
            var B = this.betSizeList;
            var P = this.betSizeValue;
            return !!B && !!cc.js.isNumber(P) && B.indexOf(P) !== -1;
          };
          U.prototype._isBetlevelValid = function () {
            var B = this.betLevelList;
            var P = this.betLevelValue;
            return !!B && !!cc.js.isNumber(P) && B.indexOf(P) !== -1;
          };
          U.prototype._isBetAmountInvalidWithMinimumBetAmount = function () {
            var B = k.toDecimalWithExp(this.betLineValue * this.betLevelValue * this.betSizeValue, 2);
            return this._minimumBetAmount && B < this._minimumBetAmount && (!this._featureBuyThreshold || B > this._featureBuyThreshold) && B.toFixed(2) !== this._validMinimumBetAmount;
          };
          U.prototype.reevaluateBet = function () {
            return (!this._isBetSizeValid() || !this._isBetlevelValid() || !!this._isBetAmountInvalidWithMinimumBetAmount()) && !(this._resetInValidBetSizeAndBetLevel(), this.checkSelectedValue(k.toDecimalWithExp(this.betSizeValue * this.betLevelValue * this.betLineValue, 2)), this._reevaluateBetCallback && this._reevaluateBetCallback(this.betSizeValue, this.betLevelValue), 0);
          };
          U.prototype.showInvalidBetDialog = function () {
            var B = this;
            var P = {
              title_message: undefined,
              content_message: shell.I18n.t("SettingMenuHelper.ReevaluateBet"),
              actions: [{
                title: shell.I18n.t("SettingMenuHelper.Select"),
                handler: function () {
                  B.openBetMenu();
                }
              }]
            };
            j.showDialog(P);
          };
          Object.defineProperty(U.prototype, "betModifierUpdateCallback", {
            get: function () {
              return this._betModifierUpdateCallback;
            },
            set: function (B) {
              this._betModifierUpdateCallback = B;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(U.prototype, "reevaluateBetCallback", {
            set: function (B) {
              this._reevaluateBetCallback = B;
            },
            enumerable: false,
            configurable: true
          });
          U.prototype._cancelBetReminderBoard = function () {
            var B = this.settingMenuController;
            if (B.isSettingBetReminderBoardShowed()) {
              this._selectedBetAmount = this._prevSelectedBetAmount;
              this.betSizeValue = this._prevBetSizeValue;
              this.betLevelValue = this._prevBetLevelValue;
              this._selectedBet = this._prevSelectedBet;
              this.updateBetValues();
              this.checkSelectedValue(this._prevSelectedBetAmount);
              B.hideBetReminderBoard();
              if (this._cancelBetReminderBoardCallback) {
                this._cancelBetReminderBoardCallback();
              }
            }
          };
          U.prototype.setBetReminderCancelAndConfirmCallback = function (B, P) {
            var X = this;
            var J = this.settingMenuController;
            this._cancelBetReminderBoardCallback = B;
            J.setBetReminderCancelAndConfirmCallback(this._cancelBetReminderBoard.bind(this), function () {
              if (X._prevBetSizeValue !== X.betSizeValue || X._prevBetLevelValue !== X.betLevelValue) {
                J.hideBetReminderBoard();
                if (P) {
                  P(X.betSizeValue, X.betLevelValue);
                }
                X._gameContext.emit("SlotMenu.ChangeBet", X._selectedBetAmount);
              } else {
                X._cancelBetReminderBoard();
              }
            });
          };
          U.prototype.setBetReminderTriggerCallback = function (B) {
            this._betReminderTriggerCallback = B;
          };
          U.prototype.preCalculateCombination = function () {
            var B = this.betSizeList || [];
            var P = this.betLevelList || [];
            var X = this.betLineValue || 0;
            if (B.length !== 0 && P.length !== 0 && X !== 0) {
              var J;
              var Z0 = this._minimumBetAmount;
              var Z1 = this._featureBuyThreshold;
              var Z2 = [];
              this._validMinimumBetAmount = undefined;
              if (Z0) {
                if (Z1) {
                  J = [];
                }
                Z7 = 0;
                for (var Z3 = B.length; Z7 < Z3; Z7++) {
                  for (var Z4 = 0, Z5 = P.length; Z4 < Z5; Z4++) {
                    var Z6 = k.toDecimalWithExp(B[Z7] * P[Z4] * X, 2);
                    if (Z6 >= Z0) {
                      if (this._validMinimumBetAmount === undefined) {
                        this._validMinimumBetAmount = k.toFixed(Z6, 2);
                      }
                      Z2[Z7] = P.slice(Z4);
                      break;
                    }
                    if (Z1 && (Z1 < Z0 && Z6 <= Z1 || Z1 >= Z0 && Z6 < Z0)) {
                      J[Z7] ||= [];
                      J[Z7].push(P[Z4]);
                    }
                    if (Z4 === Z5 - 1) {
                      Z2[Z7] = [];
                    }
                  }
                }
                if (this._validMinimumBetAmount === undefined) {
                  this._validMinimumBetAmount = k.toFixed(B[0] * P[0] * X, 2);
                  this._betCombinationDict = Object.create(null);
                  this._betCombinationDict[this._validMinimumBetAmount] = {
                    betSize: B[0],
                    betLevel: P[0]
                  };
                  return;
                }
              } else {
                for (var Z7 = 0; Z7 < B.length; Z7++) {
                  Z2[Z7] = P;
                }
                this._validMinimumBetAmount = k.toFixed(B[0] * P[0] * X, 2);
              }
              function Z8(ZO, ZR) {
                if (ZO < 2) {
                  return ZR.slice();
                }
                var ZK = ZR.length;
                if (ZK < (ZO > 2 ? 4 : 6)) {
                  return ZR.slice();
                }
                var Zg = ZR[ZR.length - 1];
                var ZT = [Zg];
                if (ZO === 2) {
                  ZT.unshift(Zg - (Math.round(ZK / 5) || 1));
                }
                ZT.unshift(Zg - (Math.floor(ZK / 2) || 1));
                if (ZO === 2) {
                  ZT.unshift(ZT[0] - (Math.floor(ZK / 5) || 1));
                }
                var Zx = ZR[0];
                ZT.unshift(Zx + (Math.floor(ZK / 10) || 1));
                ZT.unshift(Zx);
                return ZT;
              }
              var Z9 = Object.create(null);
              Z7 = 0;
              Z3 = B.length;
              for (; Z7 < Z3; Z7++) {
                var ZZ = Z8(Z7, Z2[Z7]);
                if (J && J[Z7]) {
                  ZZ = ZZ.concat(J[Z7]);
                }
                if (ZZ.length !== 0) {
                  Z4 = 0;
                  Z5 = P.length;
                  for (; Z4 < Z5; Z4++) {
                    if (ZZ.includes(P[Z4])) {
                      var ZI = k.toFixed(B[Z7] * P[Z4] * X, 2);
                      var Zd = {
                        betSize: B[Z7],
                        betLevel: P[Z4]
                      };
                      Z9[ZI] ||= Zd;
                    }
                  }
                }
              }
              this._betCombinationDict = Z9;
            }
          };
          U.prototype._resetInValidBetSizeAndBetLevel = function () {
            var B = this._betCombinationDict[this._validMinimumBetAmount];
            this.betSizeValue = B.betSize;
            this.betLevelValue = B.betLevel;
          };
          U.prototype.checkSelectedValue = function (B) {
            var P;
            var X;
            var J = +B;
            if (this._minimumBetAmount && J < this._minimumBetAmount && (!this._featureBuyThreshold || J > this._featureBuyThreshold)) {
              J = this._minimumBetAmount;
            }
            B = k.toFixed(J, 2);
            if (!this._betCombinationDict) {
              throw Error("SettingMenuHelper :: checkSelectedValue : bet combination did not generate due to size or level empty");
            }
            var Z0 = Object.keys(this._betCombinationDict).sort(function (Z2, Z3) {
              var Z4 = parseFloat(Z2);
              var Z5 = parseFloat(Z3);
              if (Z4 < Z5) {
                return -1;
              } else if (Z4 > Z5) {
                return 1;
              } else {
                return 0;
              }
            });
            var Z1 = Z0.indexOf(B);
            if (Z1 === -1) {
              this._selectedBetAmount = B;
              this._selectedBet = undefined;
              this._minusBetButton.updateBetModifierColor(1);
              this._plusBetButton.updateBetModifierColor(1, Z0.length - 1);
              if ((P = this._maxBetButton) !== null && P !== undefined) {
                P.updateBetModifierColor(1, Z0.length - 1);
              }
            } else {
              this._selectedBet = Z1;
              this._minusBetButton.updateBetModifierColor(Z1);
              this._plusBetButton.updateBetModifierColor(Z1, Z0.length - 1);
              if ((X = this._maxBetButton) !== null && X !== undefined) {
                X.updateBetModifierColor(Z1, Z0.length - 1);
              }
            }
          };
          U.prototype._handleBetReminder = function (B) {
            var P;
            var X = this;
            var J = this.settingMenuController;
            if (this._showChangeBetReminder || this._showForfeitProgressReminder) {
              if (!J.isSettingBetReminderBoardShowed()) {
                this._prevSelectedBetAmount = this._selectedBetAmount;
                this._prevBetSizeValue = this.betSizeValue;
                this._prevBetLevelValue = this.betLevelValue;
                this._prevSelectedBet = this._selectedBet;
                if (B.selectedBet !== this._prevSelectedBet) {
                  if ((P = this._gameContext) !== null && P !== undefined) {
                    P.emit("SlotMenu.GetShowChangeBetReminder", undefined, function (Z0) {
                      var Z1;
                      var Z2 = "";
                      if (Z0.response) {
                        Z2 = shell.I18n.t("BetOptions.BetChangeProgressRemind");
                        J.setBetChangeReminderLabel(Z2);
                      } else if ((Z1 = X._gameContext) !== null && Z1 !== undefined) {
                        Z1.emit("SlotMenu.GetShowForfeitProgressReminder", undefined, function (Z3) {
                          if (Z3.response) {
                            Z2 = shell.I18n.t("BetOptions.BetChangeForfeitProgressRemind");
                            J.setBetChangeReminderLabel(Z2);
                          }
                        });
                      }
                      J.showBetReminderBoard(k.formatCurrency(parseFloat(X._prevSelectedBetAmount)));
                    });
                  }
                  if (this._betReminderTriggerCallback) {
                    this._betReminderTriggerCallback();
                  }
                }
              }
            } else {
              this._emitBetChangeEvent(parseFloat(B.selectedBetAmount));
            }
          };
          U.prototype._replaceCssTagNameToColor = function (B, P) {
            var X = RegExp("<" + B + " style=['\"]color:\\s*([^'\"]+)['\"]>", "gi");
            return P.replace(X, "<color=$1>").replace("</" + B + ">", "</color>");
          };
          U.prototype._handleFeatureBuyToast = function (B) {
            if (this._minimumBetAmount && this._featureBuyThreshold) {
              if (B < this._minimumBetAmount && B <= this._featureBuyThreshold) {
                var P = this._replaceCssTagNameToColor("span", shell.I18n.t("FeatureBuy.BetForFeatureBuyOnly"));
                var X = this._replaceCssTagNameToColor("span", shell.I18n.t("FeatureBuy.BetSuggestion", {
                  amount: k.formatCurrency(this._minimumBetAmount)
                }));
                this.settingMenuController.showFeatureBuyToast(P + "\n" + X, 2);
              } else {
                this.settingMenuController.hideFeatureBuyToast();
              }
            }
          };
          U.prototype.increaseBet = function () {
            var B;
            var P = this.settingMenuController;
            if (!P.isSwitchingMenuLayer()) {
              if (!this._betCombinationDict) {
                throw Error("SettingMenuHelper :: increaseBet : bet combination did not generate");
              }
              var X = Object.keys(this._betCombinationDict).sort(function (Z1, Z2) {
                var Z3 = parseFloat(Z1);
                var Z4 = parseFloat(Z2);
                if (Z3 < Z4) {
                  return -1;
                } else if (Z3 > Z4) {
                  return 1;
                } else {
                  return 0;
                }
              });
              var J = this._plusBetButton.increaseBet(X, this._selectedBet, this._selectedBetAmount);
              this._handleBetReminder(J);
              this._handleFeatureBuyToast(+J.selectedBetAmount);
              this._minusBetButton.updateBetModifierColor(J.selectedBet);
              this._plusBetButton.updateBetModifierColor(J.selectedBet, X.length - 1);
              if ((B = this._maxBetButton) !== null && B !== undefined) {
                B.updateBetModifierColor(J.selectedBet, X.length - 1);
              }
              var Z0 = this._selectedBet = J.selectedBet;
              this._selectedBetAmount = J.selectedBetAmount;
              this.betSizeValue = this._betCombinationDict[X[Z0]].betSize;
              this.betLevelValue = this._betCombinationDict[X[Z0]].betLevel;
              this.updateBetValues(E(Z0, this._betCombinationDict));
              if (!this._showChangeBetReminder && !this._showForfeitProgressReminder) {
                if (this._betModifierUpdateCallback) {
                  this._betModifierUpdateCallback(this.betSizeValue, this.betLevelValue);
                }
              }
              if (F()) {
                P.hideMoreMenuLayer();
              }
            }
          };
          U.prototype.decreaseBet = function () {
            var B;
            var P = this.settingMenuController;
            if (!P.isSwitchingMenuLayer()) {
              if (!this._betCombinationDict) {
                throw Error("SettingMenuHelper :: decreaseBet : bet combination did not generate");
              }
              var X = Object.keys(this._betCombinationDict).sort(function (Z1, Z2) {
                var Z3 = parseFloat(Z1);
                var Z4 = parseFloat(Z2);
                if (Z3 < Z4) {
                  return -1;
                } else if (Z3 > Z4) {
                  return 1;
                } else {
                  return 0;
                }
              });
              var J = this._minusBetButton.decreaseBet(X, this._selectedBet, this._selectedBetAmount);
              this._handleBetReminder(J);
              this._handleFeatureBuyToast(+J.selectedBetAmount);
              this._minusBetButton.updateBetModifierColor(J.selectedBet);
              this._plusBetButton.updateBetModifierColor(J.selectedBet, X.length - 1);
              if ((B = this._maxBetButton) !== null && B !== undefined) {
                B.updateBetModifierColor(J.selectedBet, X.length - 1);
              }
              var Z0 = this._selectedBet = J.selectedBet;
              this._selectedBetAmount = J.selectedBetAmount;
              this.betSizeValue = this._betCombinationDict[X[Z0]].betSize;
              this.betLevelValue = this._betCombinationDict[X[Z0]].betLevel;
              this.updateBetValues(E(Z0, this._betCombinationDict));
              if (!this._showChangeBetReminder && !this._showForfeitProgressReminder) {
                if (this._betModifierUpdateCallback) {
                  this._betModifierUpdateCallback(this.betSizeValue, this.betLevelValue);
                }
              }
              if (F()) {
                P.hideMoreMenuLayer();
              }
            }
          };
          U.prototype.maxBet = function () {
            var B = this.settingMenuController;
            if (!B.isSwitchingMenuLayer()) {
              if (!this._betCombinationDict) {
                throw Error("SettingMenuHelper :: maxBet : bet combination did not generate");
              }
              if (!this._maxBetButton) {
                throw Error("SettingMenuHelper :: maxBet : max bet button cannot be found");
              }
              var P = Object.keys(this._betCombinationDict).sort(function (Z0, Z1) {
                var Z2 = parseFloat(Z0);
                var Z3 = parseFloat(Z1);
                if (Z2 < Z3) {
                  return -1;
                } else if (Z2 > Z3) {
                  return 1;
                } else {
                  return 0;
                }
              });
              var X = this._maxBetButton.maxBet(P);
              this._handleBetReminder(X);
              this._minusBetButton.updateBetModifierColor(X.selectedBet);
              this._plusBetButton.updateBetModifierColor(X.selectedBet, P.length - 1);
              this._maxBetButton.updateBetModifierColor(X.selectedBet, P.length - 1);
              var J = this._selectedBet = X.selectedBet;
              this._selectedBetAmount = X.selectedBetAmount;
              this.betSizeValue = this._betCombinationDict[P[J]].betSize;
              this.betLevelValue = this._betCombinationDict[P[J]].betLevel;
              this.updateBetValues(E(J, this._betCombinationDict));
              if (!this._showChangeBetReminder && !this._showForfeitProgressReminder) {
                if (this._betModifierUpdateCallback) {
                  this._betModifierUpdateCallback(this.betSizeValue, this.betLevelValue);
                }
              }
              if (F()) {
                B.hideMoreMenuLayer();
              }
            }
          };
          Object.defineProperty(U.prototype, "changeSoundVolume", {
            set: function (B) {
              var P = this;
              if (this._changeSoundVolumeCallback) {
                if (this._soundOnWatch) {
                  this._soundOnWatch();
                }
                this._changeSoundVolumeCallback = undefined;
              }
              this._changeSoundVolumeCallback = function () {
                P._emitAudioStateChangeEvent(P.soundOn);
                if (B) {
                  B(P.soundOn);
                }
              };
              this._soundOnWatch = k.observeCallback(this, "soundOn")(this._changeSoundVolumeCallback);
            },
            enumerable: false,
            configurable: true
          });
          U.prototype.setBalance = function (B, P) {
            var X = this;
            if (P === undefined) {
              P = true;
            }
            var J = this._shouldBalanceIncreaseSfxPlay(B);
            this._requestTransactionInfo(function (Z0) {
              if (J) {
                X.playWalletCountingAboveSfx();
              }
              var Z1 = k.toDecimalWithExp(Z0 && Z0.balance || B, 2);
              X.settingInfoFooter.updateBalance(undefined, Z1, P);
              X._emitTransactionInfoChangedEvent({
                balance: Z1
              });
            });
          };
          U.prototype.setWinAmount = function (B, P = true, X = true) {
            this.settingInfoFooter.updateWinAmount(B, P, X);
            this._gameContext.emit("SlotMenu.UpdateWinAmount", B);
            this._emitTransactionInfoChangedEvent({
              totalWin: k.toDecimalWithExp(B, 2)
            });
          };
          U.prototype.setAllButtonsInteractable = function (B, P = true) {
            this._settingMenuButtonHelper.setAllButtonsInteractable(B);
            if (B) {
              this.checkSelectedValue(k.toDecimalWithExp(this.betSizeValue * this.betLevelValue * this.betLineValue, 2));
            }
          };
          U.prototype.setLockAccess = function (B, P) {
            this._settingMenuButtonHelper.setLockAccess(B, P);
          };
          U.prototype.isButtonLocked = function (B) {
            return this._settingMenuButtonHelper.isButtonLocked(B);
          };
          U.prototype.setButtonInteractableFlag = function (B, P = false) {
            this._settingMenuButtonHelper.setButtonInteractableFlag(B, P);
          };
          U.prototype.setButtonInteractable = function (B) {
            this._settingMenuButtonHelper.setButtonInteractable(B);
          };
          U.prototype.setLockAccessAutoSpinPanel = function (B) {
            this.setLockAccess(x.SPIN_OPTIONS, B);
          };
          U.prototype.setLockAccessBetPanel = function (B) {
            this.setLockAccess(x.BET_OPTIONS, B);
          };
          U.prototype.setLockMoreMenuButton = function (B) {
            this.setLockAccess(x.MORE_MENU, B);
          };
          U.prototype.setHidden = function (B) {
            this._isHidden = B;
            this.settingMenuController.setHidden(B);
          };
          U.prototype.isIdle = function () {
            return this.settingMenuController.isIdle();
          };
          Object.defineProperty(U.prototype, "isShowBlackTintBg", {
            set: function (B) {
              this._isShowBlackTintBg = B;
            },
            enumerable: false,
            configurable: true
          });
          U.prototype.activateWalletNotify = function (B) {
            this.settingInfoFooter.activateWalletNotify(B);
          };
          U.prototype.addSettingInfoFooter = function (B) {
            this._settingInfoFooter = B;
            this._settingMenuButtonHelper.setupOtherButtonInList(x.WALLET, B.interactableWalletButton.bind(B));
            B.updateLayout(H());
            B.setWinIcon(this.settingInfoFooterLocaleWinIcon);
            B.setOpenWalletMenuCallback(this._onClickWalletMenuButton.bind(this));
            B.showBackground(false);
            B.changeHolder(this.settingMenuController.getSettingInfoFooterFrontHolder());
            this._settingMenuButtonHelper.setupOtherButtonInList(x.BET_OPTIONS, B.interactableBetOptionsButton.bind(B));
            B.setOpenBetOptionsMenuCallback(this._onClickBetMenuButton.bind(this));
            this.updateBetLabelCallback(B.updateBetAmount.bind(B));
            this._settingMenuButtonHelper.setupOtherButtonInList(x.WIN, B.interactableWinButton.bind(B));
            B.setOpenWinMenuCallback(this._onClickHistoryMenuButton.bind(this, true));
            B.boot();
          };
          U.prototype.getSettingInfoFooter = function () {
            return this.settingInfoFooter;
          };
          Object.defineProperty(U.prototype, "settingInfoFooter", {
            get: function () {
              if (!this._settingInfoFooter) {
                throw Error("SettingMenuHelper :: settingInfoFooter : Cannot find settingInfoFooter. Please setup setting info footer first! (addSettingInfoFooter)");
              }
              return this._settingInfoFooter;
            },
            enumerable: false,
            configurable: true
          });
          U.prototype.showSettingInfoFooterBackground = function (B) {
            this.settingInfoFooter.showBackground(B);
          };
          U.prototype.setFreeGameMode = function (B) {
            var P;
            var X;
            this.isFreeGameMode = B;
            if (B) {
              this.setLockAccess(x.BET_OPTIONS, true);
              this._plusBetButton.buttonActivate(false);
              this._minusBetButton.buttonActivate(false);
              if ((P = this._maxBetButton) !== null && P !== undefined) {
                P.buttonActivate(false);
              }
            } else {
              this.setLockAccess(x.BET_OPTIONS, false);
              this._plusBetButton.buttonActivate(true);
              this._minusBetButton.buttonActivate(true);
              if ((X = this._maxBetButton) !== null && X !== undefined) {
                X.buttonActivate(true);
              }
              this.checkSelectedValue(k.toDecimalWithExp(this.betSizeValue * this.betLevelValue * this.betLineValue, 2));
            }
          };
          U.prototype.getCurrentBalance = function () {
            return this.settingInfoFooter.currentBalance;
          };
          U.prototype.additionalBetCalculation = function () {
            if (!this._additionalBetCalculationCallback) {
              throw Error("SettingMenuHelper :: additionalBetCalculation : Please set calculation callback via additionalBetCalculationCallback setter first!");
            }
            return this._additionalBetCalculationCallback(this.betLineValue, this.betLevelValue, this.betSizeValue);
          };
          Object.defineProperty(U.prototype, "betLineValue", {
            get: function () {
              return this._betLineValue;
            },
            set: function (B) {
              this._gameContext.emit("SlotMenu.SetBetLineValue", B);
              this._betLineValue = B;
              this.preCalculateCombination();
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(U.prototype, "betSizeList", {
            get: function () {
              return this._betSizeList;
            },
            set: function (B) {
              this._gameContext.emit("SlotMenu.SetBetSizeList", B);
              this._betSizeList = B;
              this.preCalculateCombination();
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(U.prototype, "betSizeValue", {
            get: function () {
              return this._betSizeValue;
            },
            set: function (B) {
              this._gameContext.emit("SlotMenu.SetBetSizeValue", B);
              this._betSizeValue = B;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(U.prototype, "minimumBetAmount", {
            get: function () {
              return this._minimumBetAmount;
            },
            set: function (B) {
              this._gameContext.emit("SlotMenu.SetMinimumBetAmount", B);
              this._minimumBetAmount = B;
              this.preCalculateCombination();
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(U.prototype, "featureBuyThreshold", {
            get: function () {
              return this._featureBuyThreshold;
            },
            set: function (B) {
              this._gameContext.emit("SlotMenu.SetFeatureBuyThreshold", B);
              this._featureBuyThreshold = B;
              this.preCalculateCombination();
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(U.prototype, "betLevelList", {
            get: function () {
              return this._betLevelList;
            },
            set: function (B) {
              this._gameContext.emit("SlotMenu.SetBetLevelList", B);
              this._betLevelList = B;
              this.preCalculateCombination();
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(U.prototype, "betLevelValue", {
            get: function () {
              return this._betLevelValue;
            },
            set: function (B) {
              this._gameContext.emit("SlotMenu.SetBetLevelValue", B);
              this._betLevelValue = B;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(U.prototype, "baseBet", {
            get: function () {
              return this._baseBet;
            },
            set: function (B) {
              this._baseBet = B;
              this._gameContext.emit("SlotMenu.SetBaseBet", B);
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(U.prototype, "soundEnable", {
            get: function () {
              return A.soundOn;
            },
            set: function (B) {
              this.soundOn = B;
              A.soundOn = B;
            },
            enumerable: false,
            configurable: true
          });
          U.prototype.playWalletCountingAboveSfx = function () {
            var B = this.walletCountingAbove;
            if (B) {
              B.play();
            }
          };
          U.prototype.playMenuIconPressSound = function () {
            var B = this.menuIconPress;
            if (B) {
              B.play();
            }
          };
          U.prototype.playListItemClickSound = function () {
            var B = this.listItemClick;
            if (B) {
              B.play();
            }
          };
          U.prototype.playSliderEffectSound = function () {
            var B = this.sliderEffect;
            if (B) {
              B.play();
            }
          };
          U.prototype._initAudio = function (B) {
            for (var P in this._soundEffectUrls) {
              this[P] = new B({
                preload: false,
                src: k.getCocosMajor() >= 4 ? "/lib/setting_menu/" + this._soundEffectUrls[P] : cc.url.raw("/resources/lib/setting_menu/" + this._soundEffectUrls[P] + ".mp3")
              });
            }
          };
          U.prototype._loadAudio = function (B) {
            var P = this;
            if (this._unsubscribeLoadAudio) {
              var X = this._unsubscribeLoadAudio;
              this._unsubscribeLoadAudio = undefined;
              if (X) {
                X();
              }
            }
            this._unsubscribeLoadAudio = k.sequenceCallback(function (J) {
              P._loadSpecificAudio("menuIconPress", function (Z0) {
                if (Z0) {
                  B(Z0);
                } else {
                  J();
                }
              });
            }, function (J) {
              P._loadSpecificAudio("listItemClick", function (Z0) {
                if (Z0) {
                  B(Z0);
                } else {
                  J();
                }
              });
            }, function (J) {
              P._loadSpecificAudio("sliderEffect", function (Z0) {
                if (Z0) {
                  B(Z0);
                } else {
                  J();
                }
              });
            }, function (J) {
              P._loadSpecificAudio("walletCountingAbove", function (Z0) {
                if (Z0) {
                  B(Z0);
                } else {
                  J();
                }
              });
            })(B);
          };
          U.prototype._loadSpecificAudio = function (B, P) {
            var X = this;
            if (this._soundEffectLoaded[B]) {
              if (P) {
                P();
              }
            } else {
              var J = this[B];
              function Z0() {
                J.off("loaderror", Z1);
                X._soundEffectLoaded[B] = true;
                if (P) {
                  P();
                }
              }
              function Z1(Z2, Z3) {
                J.off("load", Z0);
                if (P) {
                  P(Z3);
                }
              }
              J.once("load", Z0);
              J.once("loaderror", Z1);
              J.load();
            }
          };
          U.prototype.reset = function () {
            if (this._triggerTurboSpinOnWatch) {
              this._triggerTurboSpinOnWatch();
            }
            if (this._turboSpinWatch) {
              this._turboSpinWatch();
            }
            if (this._internalSoundOnWatch) {
              this._internalSoundOnWatch();
            }
            if (this._soundOnWatch) {
              this._soundOnWatch();
            }
            if (this._internalMuteIconWatch) {
              this._internalMuteIconWatch();
            }
            this._updateBetLabelCallback = undefined;
            this._autoSpinCallback = undefined;
            this._turboSpinCallback = undefined;
            this._changeSoundVolumeCallback = undefined;
            this._menuChangedCallBack = undefined;
            this._internalSoundControlCallback = undefined;
            this._triggerTurboSpinCallback = undefined;
            this._settingMenuButtonHelper = new C.default();
            this._unsubscribeLoadAudio = undefined;
            this._soundEffectLoaded = {
              sliderEffect: false,
              listItemClick: false,
              menuIconPress: false
            };
          };
          U.prototype._emitWalletEvent = function (B) {
            this._gameContext.emit("Wallet.ShowWalletList", B);
          };
          U.prototype._emitTransactionInfoChangedEvent = function (B) {
            this._gameContext.emit("Game.TransactionInfoChanged", B);
          };
          U.prototype._emitAudioStateChangeEvent = function (B) {
            var P = B ? "On" : "Off";
            this._gameContext.emit("Game.AudioStateChanged", P);
          };
          U.prototype._subscribePluginEvents = function () {
            var B = this;
            Q.setGamePlayUIBlockEventCallback("settingmenu", function (P) {
              B.settingMenuController.setMenuUIBlock(P);
            });
            if (N) {
              this._gameContext.on("Wallet.Hidden", function () {
                B.settingMenuController.setIsControllerPresenting(false);
              });
              this._gameContext.on("Wallet.Shown", function () {
                B._cancelBetReminderBoard();
                B.hideMoreMenuLayer();
                B.settingMenuController.setIsControllerPresenting(true);
                B.activateWalletNotify(false);
              });
              this._gameContext.on("SlotMenu.StartAutoSpin", function (P) {
                if (B._autoSpinCallback) {
                  B._autoSpinCallback(P);
                }
              }, this);
            }
            if (Y) {
              this._gameContext.on("SlotMenu.HiddenBetOptions", function () {
                B.settingMenuController.setIsControllerPresenting(false);
              });
              this._gameContext.on("SlotMenu.HiddenSpinOptions", function () {
                B.settingMenuController.setIsControllerPresenting(false);
              });
              this._gameContext.on("Game.ShowOptions", this.openBetMenu, this);
              this._gameContext.on("Game.HideOptions", this._closeBetOptions, this);
              this._gameContext.on("SlotMenu.ManualUpdateBetFactorCallback", function (P) {
                var X = P.payload;
                var J = X.betSize;
                var Z0 = X.betLevel;
                if (B._manualUpdateBetFactorCallback) {
                  B._manualUpdateBetFactorCallback(J, Z0);
                }
              }, this);
              this._gameContext.on("SlotMenu.CancelBetPanelCallback", function () {
                if (B._cancelBetPanelCallback) {
                  B._cancelBetPanelCallback();
                }
              }, this);
              this._gameContext.on("SlotMenu.FinishBetPickCallback", function (P) {
                var X = P.payload;
                var J = X.betSize;
                var Z0 = X.betLevel;
                if (B._finishBetPickCallback) {
                  B._finishBetPickCallback(J, Z0);
                }
              }, this);
            }
            if (q) {
              this._gameContext.on("Paytable.Hide", function () {
                B.settingMenuController.setIsControllerPresenting(false);
              });
              this._gameContext.on("GameRules.Hide", function () {
                B.settingMenuController.setIsControllerPresenting(false);
              });
            }
            if (W) {
              this._gameContext.on("History.Close", function () {
                B.settingMenuController.setIsControllerPresenting(false);
              });
            }
            this._gameContext.on("Game.OnAudio", function () {
              B.soundEnable = true;
            });
            this._gameContext.on("Game.OffAudio", function () {
              B.soundEnable = false;
            });
            this._gameContext.on("Game.RequestAudioState", function (P) {
              if (B.soundEnable === true) {
                P.response = "On";
              } else {
                P.response = "Off";
              }
            });
            this._gameContext.on("SettingMenuHelper.GetSettingMenuType", function (P) {
              P.response = D.NEW;
            });
            this._gameContext.on("Game.GetSettingMenuType", function (P) {
              P.response = D.NEW;
            });
            this._gameContext.on("Game.ReplayInitiated", function () {
              var P = B.settingMenuController;
              if (F()) {
                P.muteIcon.active = false;
              } else if (B.soundOn) {
                P.muteIcon.active = false;
              } else {
                P.muteIcon.active = true;
              }
              if (!P.isControllerPresenting() && !P.isSwitchingMenuLayer()) {
                P.hideMoreMenuLayer();
                var X = B._menuChangedCallBack;
                if (X) {
                  X(B._isHidden, true);
                }
              }
            });
          };
          U.prototype._subscribeTransactionStateEvents = function () {
            var B = this;
            this._gameContext.on("Game.TransactionStateComplete", function (P) {
              if (B._hideNonProfitEffect) {
                var X = P.payload.to;
                if (X === "setup" && B._isActionStateComplete) {
                  B._isActionStateComplete = false;
                }
                if (X === "action" && !B._isActionStateComplete) {
                  B._isActionStateComplete = true;
                }
              }
            });
            this._gameContext.on("Game.TransactionInfoUpdated", function (P) {
              if (B._hideNonProfitEffect) {
                B._betAmount = P.payload.tbb;
              }
            });
          };
          U.prototype._setOperatorConfig = function () {
            var B = this;
            this._gameContext.emit("Game.RequestSession", undefined, function (P) {
              var X = P.response;
              if (!X || !X.gameId) {
                throw Error("SettingMenuHelper:: Game.RequestSession return invalid data");
              }
              B._turboSpinEnable = X.operatorJurisdictionConfig.turboSpinEnable;
              B._autoPlayConfig = X.operatorJurisdictionConfig.autoPlayConfig;
              B._hideNonProfitEffect = X.operatorJurisdictionConfig.hideNonProfitEffect;
              B._backButtonType = X.operatorJurisdictionConfig.backButton;
            });
            this._gameContext.off("Game.Initialized", this._setOperatorConfig.bind(this));
          };
          U.prototype._toggleBetOptionsEvent = function (B) {
            if (B) {
              this._gameContext.on("Game.HideOptions", this._closeBetOptions, this);
            } else {
              this._gameContext.off("Game.HideOptions", this._closeBetOptions, this);
            }
          };
          U.prototype._closeBetOptions = function () {
            this._toggleBetOptionsEvent(false);
            this._gameContext.emit("SlotMenu.HideBetOptions");
          };
          U.prototype._requestTransactionInfo = function (B) {
            if (B) {
              this._gameContext.emit("Game.RequestTransactionInfo", undefined, function (P) {
                B(P.response);
              });
            }
          };
          U.prototype._emitAnalyticsEvent = function (B) {
            var P = {
              actionName: B
            };
            this._gameContext.emit("Analytics.Event", P);
          };
          U.prototype._emitBetChangeEvent = function (B) {
            var P = this;
            if (this._abortChangeBetEvent) {
              this._abortChangeBetEvent();
            } else {
              this._currentSelectedBet = parseFloat(this._selectedBetAmount);
            }
            this._abortChangeBetEvent = k.delayCallback(0.6)(function () {
              if (B !== P._currentSelectedBet) {
                P._gameContext.emit("SlotMenu.ChangeBet", B);
              }
              P._abortChangeBetEvent = undefined;
              P._currentSelectedBet = undefined;
            });
          };
          U.prototype.changeSoundButtonHolder = function () {
            if (F()) {
              var B = this.settingInfoFooter;
              if (B.landscapeSoundButtonHolder && this._landscapeSoundButtonNode) {
                this._landscapeSoundButtonNode.parent = B.landscapeSoundButtonHolder;
                if (!this._turboSpinEnable) {
                  this._landscapeSoundButtonNode.getComponent("GenericSettingButton").sprite.node.active = true;
                  this._landscapeSoundButtonNode.getComponent("GenericSettingButton").largeSprite.node.active = false;
                }
              }
            }
          };
          U.prototype.returnSoundButtonHolder = function () {
            if (F() && this._landscapePrimeHolder && this._landscapeSoundButtonNode) {
              this._landscapeSoundButtonNode.parent = this._landscapePrimeHolder;
              if (!this._turboSpinEnable) {
                this._landscapeSoundButtonNode.getComponent("GenericSettingButton").largeSprite.node.active = true;
                this._landscapeSoundButtonNode.getComponent("GenericSettingButton").sprite.node.active = false;
              }
            }
          };
          U.prototype.getSettingMenuButtonNode = function (B) {
            return this._settingMenuButtonHelper.getButtonNode(B);
          };
          U.prototype._shouldBalanceIncreaseSfxPlay = function (B) {
            var P = this.settingInfoFooter;
            if (this._isActionStateComplete && this._hideNonProfitEffect) {
              var X = P.currentBalance;
              var J = +k.toFixed(B - P.currentBalance, 2);
              if (this._betAmount && B > X && J > this._betAmount) {
                return true;
              }
            }
            return false;
          };
          return __decorate([z("SettingMenuHelper")], U);
        }(cc.Object))();
        K.settingMenuHelper = M;
        cc._RF.pop();
      }
      function E(w, U) {
        return (w + 1) / Object.keys(U).length;
      }
      function F() {
        return shell.environment.getOrientationMode() === "land";
      }
      function H() {
        return shell.isRTLLanguage && shell.isRTLLanguage();
      }
    }, {
      BVFramework: "BVFramework",
      GameEventHandler: "GameEventHandler",
      NotifyHelper: "NotifyHelper",
      Preference: "Preference",
      SettingMenuButtonHelper: "SettingMenuButtonHelper",
      Utils: "Utils"
    }],
    SettingSliderNum: [function (Z, I, R) {
      'use strict';

      if (!cc._RF.push(I, "89028I5vilAgJwUYY+0IKoT", "SettingSliderNum")) {
        R.__esModule = true;
        R.default = undefined;
        var K = Z("Utils");
        var g = cc.Class({
          extends: cc.Component,
          properties: {
            numberLabel: cc.Label,
            numSprites: [cc.Sprite],
            pixelSprites: [cc.SpriteFrame],
            num: 10,
            shortLine: cc.Node,
            onColor: cc.Color,
            offColor: cc.Color,
            isMin: false
          },
          setColor: function (T, x) {
            this.onColor = T;
            this.offColor = x;
          },
          setDisplayValue: function (T, x) {
            this.numberLabel.string = x;
            this.numberLabel.node.active = T;
          },
          onLoad: function () {
            if (this.isMin) {
              this.shortLine.active = false;
            }
          },
          setLight: function (T) {
            if (T) {
              (0, K.setNodeColorWithOpacity)(this.numberLabel.node, this.onColor);
            } else {
              (0, K.setNodeColorWithOpacity)(this.numberLabel.node, this.offColor);
            }
          }
        });
        R.default = g;
        I.exports = R.default;
        cc._RF.pop();
      }
    }, {
      Utils: "Utils"
    }],
    SettingSliderSingleNum: [function (Z, I, R) {
      'use strict';

      if (!cc._RF.push(I, "449bftyQ69GBqYbHra7PRW2", "SettingSliderSingleNum")) {
        R.__esModule = true;
        R.default = undefined;
        var K = Z("Utils");
        var g = cc.Class({
          extends: cc.Component,
          properties: {
            numberLabel: cc.Label,
            num: 10,
            onColor: cc.Color,
            offColor: cc.Color
          },
          onLoad: function () {
            this.numberLabel.string = this.num;
          },
          setColor: function (T, x) {
            this.onColor = T;
            this.offColor = x;
          },
          setLight: function (T) {
            if (T) {
              (0, K.setNodeColorWithOpacity)(this.numberLabel.node, this.onColor);
            } else {
              (0, K.setNodeColorWithOpacity)(this.numberLabel.node, this.offColor);
            }
          }
        });
        R.default = g;
        I.exports = R.default;
        cc._RF.pop();
      }
    }, {
      Utils: "Utils"
    }],
    SettingSliderSingle: [function (Z, I, R) {
      'use strict';

      if (!cc._RF.push(I, "41cdfy0E9FKC7KilcTyf7iZ", "SettingSliderSingle")) {
        R.__esModule = true;
        R.default = undefined;
        var K = cc.Class({
          extends: cc.Component,
          properties: {
            settingSliderNum: cc.Prefab,
            numbers: [cc.Float],
            content: cc.Node,
            valueLabel: cc.Label,
            alwaysShow: false
          },
          onEnable: function () {
            this._changeNumberStartPoint();
            this.node.on("size-changed", this._changeNumberStartPoint, this);
          },
          onDisable: function () {
            this.node.off("size-changed", this._changeNumberStartPoint, this);
          },
          _changeNumberStartPoint: function () {
            this._middlePoint = cc.Canvas.instance.node.width / 2;
            if (this._inited) {
              var g = this._sliderNums;
              for (var T = 0, x = g.length; T < x; T++) {
                g[T].node.x = this._middlePoint + T * 183;
              }
              this.updateSlider();
            }
          },
          setBiggestValue: function () {
            var g = this.numbers.length - 1;
            this.setLight(g);
            this.content.x = -this._middlePoint - g * 183;
          },
          setNumberList: function (g) {
            this.numbers = g;
          },
          setValueColor: function (g, T) {
            this._valueOnColor = g;
            this._valueOffColor = T;
          },
          setPlaySound: function (g) {
            this._playSound = g;
          },
          init: function () {
            var g = this;
            this._inited = false;
            var T = this._sliderNums = [];
            var x = this.numbers;
            var L = this.numbers.length - 1;
            var D = this.content;
            for (var k = 0, C = this.numbers.length; k < C; k++) {
              var j = cc.instantiate(this.settingSliderNum);
              var G = T[k] = j.getComponent("SettingSliderSingleNum");
              G.setColor(this._valueOnColor, this._valueOffColor);
              G.num = x[k];
              j.x = this._middlePoint + k * 183;
              j.parent = this.content;
            }
            var V = -this._middlePoint - L * 183;
            var Q = -this._middlePoint;
            var N = this.node;
            N.on(cc.Node.EventType.TOUCH_START, function (W) {
              if (N.active) {
                W.stopPropagation();
                g._startingX = W.getLocation().x;
                g._contentX = D.x;
              }
            });
            N.on(cc.Node.EventType.TOUCH_MOVE, function (W) {
              if (N.active) {
                W.stopPropagation();
                var q = W.getLocation().x - g._startingX;
                var S = g._contentX + q;
                if (S < V) {
                  D.x = V;
                  g.setLight(L);
                } else if (S > Q) {
                  D.x = Q;
                  g.setLight(0);
                } else {
                  var z = Math.round(q / 183);
                  var f = z * 183;
                  var A = g._contentX + f;
                  D.x = A;
                  g.setLight(-((g._middlePoint + g._contentX) / 183 + z));
                }
              }
            });
            N.on(cc.Node.EventType.TOUCH_CANCEL, function (W) {
              if (N.active) {
                W.stopPropagation();
                if (g.updateValue) {
                  g.updateValue(g._currentSliderValue);
                }
              }
            });
            N.on(cc.Node.EventType.TOUCH_END, function (W) {
              if (N.active) {
                W.stopPropagation();
                if (g.updateValue) {
                  g.updateValue(g._currentSliderValue);
                }
              }
            });
            if (this.alwaysShow) {
              var Y = this._currentSliderValue || 0;
              this.setDefaultFirstSliderNum(Y);
            } else {
              N.active = false;
            }
            this._inited = true;
          },
          setLight: function (g, T = false) {
            g = Math.round(g);
            var x = this._currentSliderValue;
            if (this.valueLabel) {
              this._currentSliderValue = this.valueLabel.string = this.numbers[g];
            } else {
              this._currentSliderValue = this.numbers[g];
            }
            if (!T && x != this._currentSliderValue) {
              this._playSound();
            }
            if (g % 1 == 0) {
              var L = this._sliderNums[g];
              if (L == this._lastSliderNum) {
                return;
              }
              L.setLight(true);
              if (this._lastSliderNum) {
                this._lastSliderNum.setLight(false);
              }
              this._lastSliderNum = L;
            } else if (this._lastSliderNum) {
              this._lastSliderNum.setLight(false);
              this._lastSliderNum = null;
            }
            if (this.saveValue) {
              this.saveValue(this._currentSliderValue);
            }
          },
          setDefaultFirstSliderNum: function (g) {
            var T = this.numbers.indexOf(g);
            if (T === -1) {
              T = 0;
            }
            var x = T * 183;
            var L = -this._middlePoint - x;
            this.content.x = L;
            this.setLight(T, true);
          },
          setValue: function (g) {
            this._currentSliderValue = g;
          },
          getValue: function () {
            return this._currentSliderValue;
          },
          updateSlider: function () {
            this.setDefaultFirstSliderNum(this._currentSliderValue);
          },
          testSetSliderNum: function () {
            this.setDefaultFirstSliderNum(Math.floor(Math.random() * 21) * 5);
          },
          _playSound: function () {}
        });
        R.default = K;
        I.exports = R.default;
        cc._RF.pop();
      }
    }, {}],
    SettingSlider: [function (Z, I, R) {
      'use strict';

      if (!cc._RF.push(I, "357638pYQ9Eibsf8KFNqaZK", "SettingSlider")) {
        R.__esModule = true;
        R.default = undefined;
        var K = cc.Class({
          extends: cc.Component,
          properties: {
            settingSliderNum: cc.Prefab,
            numInterval: 10,
            maxUnit: 10,
            minNum: 0,
            content: cc.Node,
            alwaysShow: false,
            isPositive: false,
            showValue: false
          },
          setValueColor: function (g, T) {
            this._valueOnColor = g;
            this._valueOffColor = T;
          },
          init: function () {
            var g = this;
            var T = this._sliderNums = [];
            var x = this.numInterval;
            var L = this.minNum;
            for (var D = this.maxUnit, k = this.content, C = 0; C <= D; C++) {
              var j = cc.instantiate(this.settingSliderNum);
              var G = T[C] = j.getComponent("SettingSliderNum");
              G.setColor(this._valueOnColor, this._valueOffColor);
              G.num = L + C * x;
              j.x = 621 + C * 210;
              if (C == 0) {
                G.isMin = true;
              } else {
                G.setDisplayValue(this.showValue, G.num);
              }
              j.parent = k;
            }
            var V = -621 - D * 210;
            var Q = this.node;
            Q.on(cc.Node.EventType.TOUCH_START, function (Y) {
              if (Q.active) {
                Y.stopPropagation();
                g._startingX = Y.getLocation().x;
                g._contentX = k.x;
              }
            });
            Q.on(cc.Node.EventType.TOUCH_MOVE, function (Y) {
              if (Q.active) {
                Y.stopPropagation();
                var W = Y.getLocation().x - g._startingX;
                var q = g._contentX + W;
                if (q < V) {
                  k.x = V;
                  g.setLight(D);
                } else if (q > -621) {
                  k.x = -621;
                  g.setLight(0);
                } else {
                  var S = Math.round(W / 105);
                  var z = S * 105;
                  var f = g._contentX + z;
                  k.x = f;
                  g.setLight(-((621 + g._contentX) / 105 + S) / 2);
                }
              }
            });
            Q.on(cc.Node.EventType.TOUCH_CANCEL, function (Y) {
              if (Q.active) {
                Y.stopPropagation();
                if (g.saveValue) {
                  g.saveValue(g._currentSliderValue);
                }
              }
            });
            Q.on(cc.Node.EventType.TOUCH_END, function (Y) {
              if (Q.active) {
                Y.stopPropagation();
                if (g.saveValue) {
                  g.saveValue(g._currentSliderValue);
                }
              }
            });
            if (this.alwaysShow) {
              var N = this._currentSliderValue || 0;
              this.setDefaultFirstSliderNum(N);
            } else {
              Q.active = false;
            }
          },
          setLight: function (g, T = false) {
            this._currentSliderValue;
            if (!T) {
              this._currentSliderValue;
            }
            if (g % 1 == 0) {
              var x = this._sliderNums[g];
              if (x == this._lastSliderNum) {
                if (this.saveValue) {
                  this.saveValue(this._currentSliderValue);
                }
                return;
              }
              x.setLight(true);
              if (this._lastSliderNum) {
                this._lastSliderNum.setLight(false);
              }
              this._lastSliderNum = x;
            } else if (this._lastSliderNum) {
              this._lastSliderNum.setLight(false);
              this._lastSliderNum = null;
            }
            if (this.saveValue) {
              this.saveValue(this._currentSliderValue);
            }
          },
          setDefaultFirstSliderNum: function (g) {
            var T = (g - this.minNum) / 5;
            var x = -621 - T * 105;
            this.content.x = x;
            this.setLight(T / 2, true);
          },
          setValue: function (g) {
            this._currentSliderValue = g;
          },
          getValue: function () {
            return this._currentSliderValue;
          },
          updateSlider: function () {
            this.setDefaultFirstSliderNum(this._currentSliderValue);
          },
          testSetSliderNum: function () {
            this.setDefaultFirstSliderNum(Math.floor(Math.random() * 21) * 5);
          }
        });
        R.default = K;
        I.exports = R.default;
        cc._RF.pop();
      }
    }, {}],
    SettingTurboSpinButton: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "eaed475bBBLf69c2AHexgPy", "SettingTurboSpinButton")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("GenericSettingButton");
        var x = I("UIAppearanceHelper");
        var L = I("Utils");
        var D = I("TurboButtonEffect");
        var k = cc._decorator;
        var C = k.ccclass;
        var j = k.property;
        function G(Q, N) {
          return Math.floor(Math.random() * (N - Q + 1)) + Q;
        }
        var V = function (Q) {
          function N() {
            var Y = Q !== null && Q.apply(this, arguments) || this;
            Y.sprite = undefined;
            Y.spriteEffect = undefined;
            Y.titleLabel = undefined;
            Y.turboSpinOn = undefined;
            Y.turboSpinOff = undefined;
            Y.turboSpinEffectOn = undefined;
            Y.turboSpinEffectOff = undefined;
            Y.turboSpinEffectAnim = undefined;
            Y.lightingEffectAnim = undefined;
            Y.spriteLightEffectNode = undefined;
            Y.spriteLightShadowEffectNode = undefined;
            Y.turboButtonEffect = undefined;
            Y._isFirstTime = true;
            Y._abortTurboLoop = undefined;
            Y._abortRandomLighting = undefined;
            Y._lightingStyles = [{
              animName: "turbo_lighting_style_1",
              positionOffsetXLeft: 0,
              positionOffsetXRight: G(1, 3),
              positionOffsetYLeft: G(0, 3),
              positionOffsetYRight: G(0, 6),
              scaleX: 1.2,
              scaleY: 1.2,
              rotation: 0
            }, {
              animName: "turbo_lighting_style_2",
              positionOffsetXLeft: G(0, 4),
              positionOffsetXRight: G(0, 10),
              positionOffsetYLeft: G(0, 22),
              positionOffsetYRight: G(0, 8),
              scaleX: 1.4,
              scaleY: 1.2,
              rotation: 0
            }, {
              animName: "turbo_lighting_style_3",
              positionOffsetXLeft: G(0, 11),
              positionOffsetXRight: G(0, 22),
              positionOffsetYLeft: G(0, 5),
              positionOffsetYRight: G(0, 20),
              scaleX: 1.2,
              scaleY: 1.2,
              rotation: G(-10, 10)
            }];
            return Y;
          }
          __extends(N, Q);
          N.prototype.onLoad = function () {
            Q.prototype.onLoad.call(this);
            this.turboButtonEffect.getComponent(D.default).setUpdateTurboMiddleIconCallback(this.changeTurboSprite.bind(this));
          };
          N.prototype.setTurboSprites = function (Y, W) {
            this.turboSpinOn = Y;
            this.turboSpinOff = W;
          };
          N.prototype.playTurboLighting = function () {
            this.spriteEffect.spriteFrame = undefined;
            this.turboSpinEffectAnim.once("finished", this._playTurboIdleAnim, this);
            if (this._isFirstTime) {
              this.turboSpinEffectAnim.play("turbo_icon_1st_up");
              this._isFirstTime = undefined;
            } else {
              this.turboSpinEffectAnim.play("turbo_icon_up");
            }
          };
          N.prototype.stopTurboLighting = function () {
            var Y = this._abortTurboLoop;
            this._abortTurboLoop = undefined;
            if (Y) {
              Y();
            }
            var W = this._abortRandomLighting;
            this._abortRandomLighting = undefined;
            if (W) {
              W();
            }
            this.turboSpinEffectAnim.stop();
            this.lightingEffectAnim.stop();
            this.spriteLightShadowEffectNode.opacity = 0;
            this.spriteLightEffectNode.getComponent(cc.Sprite).spriteFrame = undefined;
            this.spriteLightEffectNode.x = 0;
            this.spriteLightEffectNode.y = 0;
            this.spriteEffect.node.opacity = 255;
          };
          N.prototype.changeTurboSprite = function () {
            var Y = this.getTurboSpinCallback && this.getTurboSpinCallback();
            this.sprite.spriteFrame = Y ? this.turboSpinOn : this.turboSpinOff;
          };
          N.prototype._playTurboIdleAnim = function () {
            this._playRandomLighting();
            this._playTurboLoop();
          };
          N.prototype._playRandomLighting = function () {
            var Y = this;
            this._abortRandomLighting = L.delayCallback(1)(function () {
              var W = Y._lightingStyles[G(0, 2)];
              var q = G(0, 1);
              var S = G(0, 1);
              Y.spriteLightEffectNode.x = q ? W.positionOffsetXRight : -W.positionOffsetXLeft;
              Y.spriteLightEffectNode.y = S ? W.positionOffsetYRight : -W.positionOffsetYLeft;
              Y.spriteLightEffectNode.scaleX = W.scaleX;
              Y.spriteLightEffectNode.scaleY = W.scaleY;
              Y.spriteLightEffectNode.angle = -W.rotation;
              Y.lightingEffectAnim.once("finished", Y._playRandomLighting, Y);
              Y.lightingEffectAnim.play(W.animName);
            });
          };
          N.prototype._playTurboLoop = function () {
            var Y = this;
            this._abortTurboLoop = L.delayCallback(3)(function () {
              Y.turboSpinEffectAnim.once("finished", Y._playTurboLoop, Y);
              Y.turboSpinEffectAnim.play("turbo_icon_loop");
            });
          };
          N.prototype.setSpriteScaleSize = function (Y) {
            this.sprite.node.setScale(cc.v2(Y, Y));
          };
          N.prototype.setTitle = function (Y) {
            this.titleLabel.string = Y;
          };
          N.prototype.setButtonOnColor = function (Y, W) {
            this._buttonOnColorDK = Y;
            this._buttonOnColorCK = W;
          };
          N.prototype.setButtonOffColor = function (Y, W) {
            this._buttonOffColorDK = Y;
            this._buttonOffColorCK = W;
          };
          N.prototype.changeButtonColor = function (Y) {
            this.buttonTheme.domainKey = Y ? this._buttonOnColorDK : this._buttonOffColorDK;
            this.buttonTheme.colorKey = Y ? this._buttonOnColorCK : this._buttonOffColorCK;
            Q.prototype.changeButtonColor.call(this, false);
          };
          N.prototype.changeButtonPressedColor = function (Y) {
            if (Y) {
              this.node.runAction(cc.scaleTo(0.05, 0.9));
            } else {
              this.node.runAction(cc.sequence(cc.scaleTo(0.05, 1.1), cc.scaleTo(0.05, 1.05), cc.scaleTo(0.05, 1)));
            }
          };
          N.prototype.interactableButtonColor = function (Y) {
            if (this.buttonTheme) {
              var W = x.uiAppearanceHelper.v(this.buttonTheme.domainKey + "." + this.buttonTheme.colorKey + ".normal");
              var q = x.uiAppearanceHelper.v(this.buttonTheme.domainKey + "." + this.buttonTheme.colorKey + ".disabled");
              var S = Y ? W : q;
              this.turboSpinEffectAnim.node.opacity = S.a;
              L.setNodeColorWithOpacity(this.iconSprite, S);
              L.setNodeColorWithOpacity(this.spriteEffect.node, S);
              L.setNodeColorWithOpacity(this.spriteLightEffectNode, S);
              L.setNodeColorWithOpacity(this.spriteLightShadowEffectNode, S);
              L.setNodeColorWithOpacity(this.sprite.node, S);
            }
          };
          N.prototype.changeSpriteEffectColor = function () {
            if (this.buttonTheme) {
              var Y = x.uiAppearanceHelper.v(this.buttonTheme.domainKey + "." + this.buttonTheme.colorKey + ".normal");
              L.setNodeColorWithOpacity(this.spriteEffect.node, Y);
              L.setNodeColorWithOpacity(this.spriteLightEffectNode, Y);
              L.setNodeColorWithOpacity(this.iconSprite, Y);
              L.setNodeColorWithOpacity(this.spriteLightShadowEffectNode, Y);
            }
          };
          N.prototype.destroy = function () {
            this.stopTurboLighting();
            return Q.prototype.destroy.call(this);
          };
          __decorate([j(cc.Sprite)], N.prototype, "sprite", undefined);
          __decorate([j(cc.Sprite)], N.prototype, "spriteEffect", undefined);
          __decorate([j(cc.Label)], N.prototype, "titleLabel", undefined);
          __decorate([j(cc.SpriteFrame)], N.prototype, "turboSpinOn", undefined);
          __decorate([j(cc.SpriteFrame)], N.prototype, "turboSpinOff", undefined);
          __decorate([j(cc.SpriteFrame)], N.prototype, "turboSpinEffectOn", undefined);
          __decorate([j(cc.SpriteFrame)], N.prototype, "turboSpinEffectOff", undefined);
          __decorate([j(cc.Animation)], N.prototype, "turboSpinEffectAnim", undefined);
          __decorate([j(cc.Animation)], N.prototype, "lightingEffectAnim", undefined);
          __decorate([j(cc.Node)], N.prototype, "spriteLightEffectNode", undefined);
          __decorate([j(cc.Node)], N.prototype, "spriteLightShadowEffectNode", undefined);
          __decorate([j(D.default)], N.prototype, "turboButtonEffect", undefined);
          return __decorate([C], N);
        }(T.default);
        K.default = V;
        cc._RF.pop();
      }
    }, {
      GenericSettingButton: "GenericSettingButton",
      TurboButtonEffect: "TurboButtonEffect",
      UIAppearanceHelper: "UIAppearanceHelper",
      Utils: "Utils"
    }],
    ShiftSlotHandler: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "ba321VG3GRG4IniSaffUCkG", "ShiftSlotHandler")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("Utils");
        var x = I("GameConstant");
        var L = I("AudioManager");
        var D = I("AudioConstant");
        var k = function () {
          function C(u) {
            this._slotHandler = u;
          }
          Object.defineProperty(C.prototype, "slowDropDelay", {
            set: function (u) {
              this._slowDropDelay = u;
            },
            enumerable: false,
            configurable: true
          });
          C.prototype.init = function (u) {
            this._slotItemHolder = u.slotItemHolder;
            this._slotViews = u.slotViews;
            this._slotItemPool = u.slotItemPool;
            this._numberOfRow = u.numberOfRow;
            this._symbolHeight = u.symbolSize.height;
            this._symbolSpawnSpacing = u.symbolSpawnSpacing;
            this._columnDropInterval = u.columnDropInterval;
            this._originalSlowDropDelay = u.slowDropDelay;
            this._slowDropDelay = this._originalSlowDropDelay;
            this._columnSlowDropInterval = u.columnSlowDropInterval;
            this._acceleration = u.acceleration;
            this._accelerationFactor = u.accelerationFactor;
            this._bounceDistance = u.bounceDistance;
            this._bounceDistanceFactor = u.bounceDistanceFactor;
            this._bounceDuraion = u.bounceDuraion;
            this._bounceFactor = u.bounceFactor;
            this._newSlotItemList = [];
            this._shouldPlayCollapseAudio = true;
          };
          C.prototype.reset = function () {
            this._slowDropDelay = this._originalSlowDropDelay;
          };
          C.prototype.playDropOldItemsEffect = function (j, G) {
            var V = this._slotViews;
            var Q = this._symbolHeight;
            var N = this._slotHandler.isTurboMode();
            var Y = [];
            var W = [[], [], [], [], [], []];
            var q = 1;
            var z = 0;
            var A = 0;
            var M = function () {
              if (++z === q && G) {
                G();
              }
            };
            for (var E = 0; E < j.length; E++) {
              var F = j[E];
              W[x.SLOT_ITEM_COLUMN_MAP[F]].push(F);
            }
            for (var H = W.length - 1; H >= 0; H--) {
              if (W[H].length) {
                Y[H] = A;
                if (!N) {
                  A += this._columnDropInterval;
                }
              }
            }
            H = 0;
            for (var w = W.length; H < w; H++) {
              if (W[H].length) {
                var U = V[H].getFunctionalItems();
                var B = Y[H];
                var P = 0;
                for (var X = U.length - 1; X >= 0; X--) {
                  var J = U[X];
                  if (J.visible) {
                    if (P) {
                      var Z0 = -Q * P;
                      var Z1 = this._playCollapseSound.bind(this, false, 99, false);
                      q++;
                      J.node.stopAllActions();
                      J.node.runAction(this._getDropAction(B, Z0, Z1, M));
                    }
                  } else {
                    P += J.symbolRow;
                  }
                }
              }
            }
            M();
          };
          C.prototype.playDropNewItemsEffect = function (j) {
            var G = j.newData;
            var V = j.isSlowDrop;
            var Q = j.isHeartBeat;
            var N = j.callback;
            var Y = j.slowDropFadeOutCallback;
            var W = this._slotViews;
            var q = this._slotHandler.isTurboMode();
            var z = Q ? 2 : 0;
            var A = [];
            var M = 1;
            var E = 0;
            var F = 0;
            var H = function () {
              if (++E === M) {
                if (N) {
                  N();
                }
              } else if (E === M - 1 && Y) {
                Y();
              }
            };
            for (var w = G.length - 1; w >= 0; w--) {
              if (G[w].length) {
                A[w] = F;
                if (!q) {
                  F += this._columnDropInterval;
                }
              }
            }
            var U = F + this._slowDropDelay + z;
            w = 0;
            for (var B = G.length; w < B; w++) {
              var P = G[w];
              if (P.length) {
                var X = W[w].getFunctionalItems();
                var J = 0;
                for (var Z0 = X.length - 1; Z0 >= 0; Z0--) {
                  var Z1 = X[Z0];
                  if (!Z1.visible) {
                    J += Z1.symbolRow;
                  }
                }
                if (V) {
                  A[w] = U;
                  U += this._columnSlowDropInterval;
                }
                M += J;
                this._newItemsDrop(w, P, J, A[w], V, H);
              }
            }
            H();
          };
          C.prototype._getSlotItem = function (u) {
            var c = this._slotItemPool.getSlotItemCustom(u, false);
            this._newSlotItemList.push(c);
            return c;
          };
          C.prototype.releaseAllSlotItem = function () {
            var u = this._slotItemPool;
            this._newSlotItemList.forEach(function (c) {
              return u.releaseSlotItemCustom(c);
            });
            this._newSlotItemList = [];
          };
          C.prototype._getDropAction = function (u, p, j, G) {
            var V = this;
            var Q = this._slotHandler.isTurboMode() ? this._acceleration * 5 : this._acceleration;
            var N = Math.sqrt(-p * 2 / Q);
            var Y = this._bounceDistance - p * this._bounceDistanceFactor;
            var W = (this._bounceDuraion + N * this._bounceDistanceFactor) * 0.5;
            if (u) {
              return cc.sequence(cc.delayTime(u), cc.moveBy(N, cc.v2(0, p)).easing(cc.easeIn(this._accelerationFactor)), cc.callFunc(function () {
                if (V._shouldPlayCollapseAudio) {
                  j();
                  V._shouldPlayCollapseAudio = false;
                  T.delayCallback(0.05)(V._enableCollapseAudio.bind(V));
                }
              }), cc.moveBy(W, cc.v2(0, Y)).easing(cc.easeOut(this._bounceFactor)), cc.moveBy(W, cc.v2(0, -Y)).easing(cc.easeIn(this._bounceFactor)), cc.callFunc(G));
            } else {
              return cc.sequence(cc.moveBy(N, cc.v2(0, p)).easing(cc.easeIn(this._accelerationFactor)), cc.callFunc(function () {
                if (V._shouldPlayCollapseAudio) {
                  j();
                  V._shouldPlayCollapseAudio = false;
                  T.delayCallback(0.05)(V._enableCollapseAudio.bind(V));
                }
              }), cc.moveBy(W, cc.v2(0, Y)).easing(cc.easeOut(this._bounceFactor)), cc.moveBy(W, cc.v2(0, -Y)).easing(cc.easeIn(this._bounceFactor)), cc.callFunc(G));
            }
          };
          C.prototype._newItemsDrop = function (j, G, V, Q, N, Y) {
            var W = this._slotViews;
            var q = this._symbolHeight;
            var z = this._symbolSpawnSpacing;
            var A = N ? q : q + z;
            var M = W[j];
            var E = x.SLOT_ITEM_ROW_TOP_POS[j];
            var F = q;
            var H = cc.v3(0, E + z + F);
            for (var w = 0, U = G.length; w < U; w++) {
              var B = U - 1 - w;
              var P = this._getSlotItem(G[B]);
              var X = P.node;
              M.slotViewNode.addChild(X);
              X.position = H.add(cc.v3(0, w * A));
              P.node.stopAllActions();
              X.zIndex = this._generateZIndex({
                columnNewDataCount: w,
                slotItemNode: X,
                slotItem: P,
                slotView: M
              });
              if (P.symbolIndex === x.SlotSymbols.Scatter) {
                P.playSpineIdle();
                P.playScatterIdle();
              }
              var J = -q * V - z * (w + 1) + q - F;
              var Z0 = this._playCollapseSound.bind(this, true, 99, false);
              if (N) {
                J = -q * V - z + q - F;
                Z0 = this._playCollapseSound.bind(this, true, w, true);
              }
              X.runAction(this._getDropAction(Q, J, Z0, Y));
            }
          };
          C.prototype._generateZIndex = function (u) {
            var c = u.slotItemNode;
            var p = u.slotItem;
            var j = u.slotView;
            var l = u.columnNewDataCount;
            var G = c.zIndex;
            switch (p.symbolIndex) {
              case x.SlotSymbols.Wild:
                G *= 900;
                break;
              case x.SlotSymbols.Scatter:
                G *= 950;
            }
            return G + -j.slotViewIndex * 980 + -p.positionIndex + l;
          };
          C.prototype._enableCollapseAudio = function () {
            this._shouldPlayCollapseAudio = true;
          };
          C.prototype._playCollapseSound = function (u, c, p) {
            if (p) {
              if (c === 0) {
                L.playAudio(D.GENERAL_AUDIO.heartBeatSlowdrop.key);
              } else if (!u) {
                L.playAudio(D.GENERAL_AUDIO.symCollapse.key);
              }
            } else {
              L.playAudio(D.GENERAL_AUDIO.symCollapse.key);
            }
          };
          return C;
        }();
        K.default = k;
        cc._RF.pop();
      }
    }, {
      AudioConstant: "AudioConstant",
      AudioManager: "AudioManager",
      GameConstant: "GameConstant",
      Utils: "Utils"
    }],
    SimpleAnimationController: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "700eaXyznJAI7xsCZXMgAvg", "SimpleAnimationController")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = cc._decorator;
        var x = T.ccclass;
        var L = T.property;
        var D = function (k) {
          function C() {
            var u = k !== null && k.apply(this, arguments) || this;
            u.anim = undefined;
            u._onCompleteCallback = undefined;
            return u;
          }
          __extends(C, k);
          C.prototype.destroy = function () {
            this.anim.stop();
            this._onCompleteCallback = undefined;
            this.node.destroy();
            return k.prototype.destroy.call(this);
          };
          C.prototype.play = function (u, c) {
            this.node.active = true;
            this._onCompleteCallback = c;
            this.anim.stop();
            this.anim.setCurrentTime(0);
            if (u) {
              this.anim.play(u);
            } else {
              this.anim.play();
            }
          };
          C.prototype.stop = function () {
            this.anim.stop();
            this.anim.setCurrentTime(0);
            this.node.active = false;
          };
          C.prototype.getClips = function () {
            return this.anim.getClips();
          };
          C.prototype.onAnimationComplete = function () {
            var u = this._onCompleteCallback;
            this._onCompleteCallback = undefined;
            if (u) {
              u();
            }
          };
          __decorate([L(cc.Animation)], C.prototype, "anim", undefined);
          return __decorate([x], C);
        }(cc.Component);
        K.default = D;
        cc._RF.pop();
      }
    }, {}],
    SinglePayoutModel: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "029b1Bdw8RM4ZEeOX8HEoFh", "SinglePayoutModel")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = function () {
          function x() {
            this._reel = [];
          }
          Object.defineProperty(x.prototype, "reelData", {
            get: function () {
              return this._reel;
            },
            set: function (L) {
              this._reel = L;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(x.prototype, "payoutData", {
            get: function () {
              return this._payoutData;
            },
            set: function (L) {
              this._payoutData = L;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(x.prototype, "extendSymbolData", {
            get: function () {
              return this._extendSymbolData;
            },
            set: function (L) {
              this._extendSymbolData = L;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(x.prototype, "extendBlockData", {
            get: function () {
              return this._extendBlockData;
            },
            set: function (L) {
              this._extendBlockData = L;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(x.prototype, "positionArray", {
            get: function () {
              return this._positionArray;
            },
            set: function (L) {
              this._positionArray = L;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(x.prototype, "additionalData", {
            get: function () {
              return this._additionalData;
            },
            set: function (L) {
              this._additionalData = L;
            },
            enumerable: false,
            configurable: true
          });
          return x;
        }();
        K.default = T;
        cc._RF.pop();
      }
    }, {}],
    SliderEx: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "dbb33H+Xs1Dw7xtUJLC1l6D", "SliderEx")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = cc._decorator;
        var x = T.ccclass;
        var L = T.property;
        var D = function (k) {
          function C() {
            var u = k !== null && k.apply(this, arguments) || this;
            u.content = undefined;
            u.contentHeight = 0;
            return u;
          }
          __extends(C, k);
          C.prototype.onEnable = function () {
            this.node.on(cc.Node.EventType.TOUCH_START, this._onTouchBegan, this);
            this.node.on(cc.Node.EventType.TOUCH_MOVE, this._onTouchMoved, this);
            this.node.on(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
            this.node.on(cc.Node.EventType.TOUCH_CANCEL, this._onTouchCancelled, this);
            if (this.handle && this.handle.isValid) {
              this.handle.node.on(cc.Node.EventType.TOUCH_START, this._onHandleDragStart, this);
              this.handle.node.on(cc.Node.EventType.TOUCH_MOVE, this._onTouchMoved, this);
              this.handle.node.on(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
            }
            this._registerEvent();
          };
          C.prototype.onDisable = function () {
            this.node.off(cc.Node.EventType.TOUCH_START, this._onTouchBegan, this);
            this.node.off(cc.Node.EventType.TOUCH_MOVE, this._onTouchMoved, this);
            this.node.off(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
            this.node.off(cc.Node.EventType.TOUCH_CANCEL, this._onTouchCancelled, this);
            if (this.handle && this.handle.isValid) {
              this.handle.node.off(cc.Node.EventType.TOUCH_START, this._onHandleDragStart, this);
              this.handle.node.off(cc.Node.EventType.TOUCH_MOVE, this._onTouchMoved, this);
              this.handle.node.off(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
            }
            this._unregisterEvent();
          };
          C.prototype._handleSliderLogic = function (u) {
            this._updateProgress(u);
            this._moveContent();
            this._emitSlideEvent();
          };
          C.prototype._onMouseWheel = function (u) {
            var c = -cc.view._scaleY;
            var p = cc.v2(0, u.getScrollY() * c);
            var j = this.node.convertToWorldSpace(this.handle.node.position).x;
            var l = j + p.y / 10;
            this.progress = cc.misc.clamp01(this.progress + (l - j) / this.node.width);
            this._updateHandlePosition();
            this._moveContent();
            this._emitSlideEvent();
          };
          C.prototype._registerEvent = function () {
            if (this.content) {
              this.content.parent.on(cc.Node.EventType.MOUSE_WHEEL, this._onMouseWheel, this, true);
            }
          };
          C.prototype._unregisterEvent = function () {
            if (this.content) {
              this.content.parent.off(cc.Node.EventType.MOUSE_WHEEL, this._onMouseWheel, this, true);
            }
          };
          C.prototype._moveContent = function () {
            if (this.content) {
              this.content.y = this.progress * (this.content.height - cc.view.getVisibleSize().height);
            }
          };
          __decorate([L(cc.Node)], C.prototype, "content", undefined);
          return __decorate([x], C);
        }(cc.Slider);
        K.default = D;
        cc._RF.pop();
      }
    }, {}],
    SlotAnalyticsEnum: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "c270fgpIPxIwJGIYJlAbqmn", "SlotAnalyticsEnum")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        K.SpinStateProcess = K.SpinCredits = K.SpinTrigger = undefined;
        (function (T) {
          T[T.CLICK = 0] = "CLICK";
          T[T.SPACEBAR = 1] = "SPACEBAR";
          T[T.AUTOSPIN = 2] = "AUTOSPIN";
          T[T.FEATURE_BUY = 3] = "FEATURE_BUY";
        })(K.SpinTrigger ||= {});
        (function (T) {
          T[T.FREE_GAME = 0] = "FREE_GAME";
          T[T.CASH = 1] = "CASH";
          T[T.BONUS = 2] = "BONUS";
          T[T.INSUFFICIENT = 3] = "INSUFFICIENT";
          T[T.BET_INVALID = 4] = "BET_INVALID";
        })(K.SpinCredits ||= {});
        (function (T) {
          T[T.REEL_SPINNING = 0] = "REEL_SPINNING";
          T[T.REEL_STOPPING = 1] = "REEL_STOPPING";
          T[T.REEL_STOPPED = 2] = "REEL_STOPPED";
        })(K.SpinStateProcess ||= {});
        cc._RF.pop();
      }
    }, {}],
    SlotAnalyticsHelper: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "4d769Qc8epMlozoEYpeBTit", "SlotAnalyticsHelper")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        K.sendFastStopGA = undefined;
        var T = I("AnalyticsHelper");
        K.sendFastStopGA = function (x, L) {
          var D = {
            type: x,
            is_auto: L
          };
          T.sendEvent(shell.ga.CATEGORY_GAME, shell.ga.EVENT_SLOT_STOP_SPIN, D);
        };
        cc._RF.pop();
      }
    }, {
      AnalyticsHelper: "AnalyticsHelper"
    }],
    "SlotController.spec": [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "f693b/Fp2RDlK3XmFtDc9sl", "SlotController.spec")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        K.symbolDrop = K.symbolBreak = K.symbolShake = K.initSlotControllerNode = undefined;
        K.initSlotControllerNode = function (T) {
          var x = System.get("automation") && System.get("automation").GameConfigs;
          if (x) {
            x.initNodeConfig(T.reelArea, "reel_area");
          }
        };
        K.symbolShake = function () {
          var T = System.get("automation") && System.get("automation").GameData;
          if (T) {
            T.emit("SymbolShake");
          }
        };
        K.symbolBreak = function () {
          var T = System.get("automation") && System.get("automation").GameData;
          if (T) {
            T.emit("SymbolBreak");
          }
        };
        K.symbolDrop = function () {
          var T = System.get("automation") && System.get("automation").GameData;
          if (T) {
            T.emit("SymbolDrop");
          }
        };
        cc._RF.pop();
      }
    }, {}],
    SlotDataHandler: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "c92e6Vflr1IcZlyJUaCowMg", "SlotDataHandler")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = function () {
          function x() {
            this.slotViews = undefined;
            this.spinType = undefined;
            this.topBufferRow = undefined;
            this.bottomBufferRow = undefined;
            this.numberOfRow = undefined;
            this.numberOfColumn = undefined;
            this.getSymbolSize = undefined;
            this.getRandomSymbol = undefined;
            this.isStopping = undefined;
            this.formattedReelData = undefined;
            this.backupBufferedSymbol = undefined;
            this.bufferedEmptyItemInfo = undefined;
            this.formattedDataPositions = undefined;
          }
          x.prototype.init = function (L) {
            this.slotViews = L.slotViews;
            this.topBufferRow = L.topBufferRow ? L.topBufferRow : 0;
            this.bottomBufferRow = L.bottomBufferRow ? L.bottomBufferRow : 0;
            this.numberOfRow = L.numberOfRow;
            this.numberOfColumn = L.numberOfColumn;
            this.getSymbolSize = L.getSymbolSize;
            this.getRandomSymbol = L.getRandomSymbol;
            this.formattedDataPositions = [];
            this.bufferedEmptyItemInfo = [];
            for (var D = 0; D < L.numberOfColumn; D++) {
              this.formattedDataPositions[D] = -this.bottomBufferRow;
            }
            this.setSpinType(L.spinType);
            this.setReelData(L.reelData, L.largeSymbolDatas);
          };
          x.prototype.reset = function () {
            this.isStopping = false;
            this.bufferedEmptyItemInfo.length = 0;
            for (var L = 0; L < this.formattedDataPositions.length; L++) {
              this.formattedDataPositions[L] = -this.bottomBufferRow;
            }
          };
          x.prototype.setSpinType = function (L) {
            this.spinType = L;
          };
          x.prototype.setReelDataPosition = function (L, D) {
            this.isStopping = true;
            this.formattedDataPositions[L] = D - this.bottomBufferRow;
          };
          x.prototype.getReelDataPosition = function (L) {
            return this.formattedDataPositions[L] + this.bottomBufferRow;
          };
          x.prototype.getItemInfo = function (L, D) {
            var k = this.slotViews.indexOf(L);
            var C = this.bufferedEmptyItemInfo[k];
            if (C) {
              this.bufferedEmptyItemInfo[k] = undefined;
              return C;
            }
            var u = D;
            for (var c = this.getSymbol(k, u); c === undefined;) {
              u--;
              c = this.getSymbol(k, u);
            }
            if (c < 0) {
              return this.createEmptyItemInfo(-c, u);
            }
            var p = this.getSymbolSize;
            var j = p ? p(c) : cc.size(1, 1);
            var l = {
              positionIndex: u,
              symbolColumn: j.width,
              symbolRow: j.height,
              symbolIndex: c
            };
            return l;
          };
          x.prototype.setReelData = function (L, D) {
            for (var k = this.numberOfColumn, C = this.numberOfRow, j = this.topBufferRow, G = this.bottomBufferRow, V = this.spinType, Q = this.getRandomSymbol, N = G + C, Y = N + j, W = this.backupBufferedSymbol = [], q = 0; q < k; q++) {
              var S = W[q] = [];
              for (var z = 0; z < G; z++) {
                S[z] = Q(q, V, z, false, true, 1);
              }
              for (z = N; z < Y; z++) {
                S[z] = Q(q, V, z, false, true, 1);
              }
            }
            this.updateReelData(L, D);
          };
          x.prototype.updateReelData = function (L, D) {
            for (var k = this.numberOfColumn, C = this.numberOfRow, p = this.bottomBufferRow, j = this.backupBufferedSymbol, G = this.getSymbolSize, V = this.formattedReelData = [], Q = 0; Q < k; Q++) {
              var N = Q * C;
              var Y = __spread(j[Q]);
              Y.splice.apply(Y, __spread([p, C], L.slice(N, N + C).reverse()));
              V.push(Y);
            }
            if (G && D) {
              D.forEach(function (W) {
                W.sort(function (w, U) {
                  return w - U;
                });
                var q;
                var S;
                var z = L[W[0]];
                var A = G(z);
                var M = Math.floor(W[0] / C);
                var E = W[0] % C;
                for (var F = 1; F < W.length; F++) {
                  if (Math.floor(W[F] / C) !== M) {
                    q = W[F - 1] % C;
                    break;
                  }
                }
                S = E === 0 ? C - q - 1 + p : C - E + p - A.height;
                F = 0;
                for (; F < A.width; F++) {
                  var b = V[F + M];
                  b[S] = F ? -A.height : z;
                  for (var H = 1; H < A.height; H++) {
                    b[H + S] = undefined;
                  }
                }
              });
            }
          };
          x.prototype.getFormattedData = function (L) {
            return __spread(this.formattedReelData[L]);
          };
          x.prototype.overwriteFormattedData = function (L, D, n) {
            this.formattedReelData[L][D] = n;
          };
          x.prototype.getSymbol = function (L, D) {
            var k = this.formattedDataPositions[L];
            if (k !== undefined) {
              var C = this.formattedReelData[L];
              if (D >= k && D <= k + C.length - 1) {
                return C[D - k];
              }
            }
            var u = this.getSymbolSize;
            var c = 1;
            if (u) {
              for (var p = L + 1; p < this.numberOfColumn && !this.slotViews[p].isIndexVisible(D); p++) {
                c++;
              }
            }
            var j = this.getRandomSymbol(L, this.spinType, D, this.isStopping, false, c);
            if (u) {
              var G = u(j);
              for (p = 1; p < G.width; p++) {
                this.bufferedEmptyItemInfo[L + p] = this.createEmptyItemInfo(G.height, D);
              }
            }
            return j;
          };
          x.prototype.createEmptyItemInfo = function (L, D) {
            var n = {
              positionIndex: D,
              symbolColumn: 1,
              symbolRow: L,
              symbolIndex: -1
            };
            return n;
          };
          return x;
        }();
        K.default = T;
        cc._RF.pop();
      }
    }, {}],
    SlotDependencyManager: [function (R, K, g) {
      'use strict';

      if (!cc._RF.push(K, "f64caMdMMxCYYPxBmpx6+nL", "SlotDependencyManager")) {
        Object.defineProperty(g, "__esModule", {
          value: true
        });
        g.walletHelper = undefined;
        var x = R("WalletHelper");
        var L = {
          enumerable: true,
          get: function () {
            return x.walletHelper;
          }
        };
        Object.defineProperty(g, "walletHelper", L);
        cc._RF.pop();
      }
    }, {
      WalletHelper: "WalletHelper"
    }],
    SlotGameConstants: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "d7af7yj0OxMqZa0P2+9ESqP", "SlotGameConstants")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        K.DEFAULT_AUTO_SPIN_DELAY_TIME = K.TOTAL_WIN_DISMISS_TIME = K.BIG_WIN_DISMISS_TIME = undefined;
        K.BIG_WIN_DISMISS_TIME = 6;
        K.TOTAL_WIN_DISMISS_TIME = 6;
        K.DEFAULT_AUTO_SPIN_DELAY_TIME = 0.3;
        cc._RF.pop();
      }
    }, {}],
    SlotGameTools: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "344ebiyUy1Dwb5GOgrFgN1h", "SlotGameTools")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        K.emitSocialBigWinEnd = K.emitSocialBigWinStart = K.isSuperMegaWinThreshold = K.isMegaWinThreshold = K.isBigWinThreshold = K.isMediumWinThreshold = K.getWinThresholds = undefined;
        var T = I("GameEventHandler");
        K.getWinThresholds = function (x) {
          var L = x.systemModel;
          var D = L.maxLineNumber;
          var k = L.winThresholds;
          var C = x.transactionModel;
          var u = C.betSizeValue;
          var c = C.betLevelValue;
          return k.getAllThresholds(u, c, D);
        };
        K.isMediumWinThreshold = function (x, L) {
          return !!L.mediumWinThreshold && !!(x >= L.mediumWinThreshold);
        };
        K.isBigWinThreshold = function (x, L) {
          return !!L.bigWinThreshold && !!(x >= L.bigWinThreshold);
        };
        K.isMegaWinThreshold = function (x, L) {
          return !!L.megaWinThreshold && !!(x >= L.megaWinThreshold);
        };
        K.isSuperMegaWinThreshold = function (x, L) {
          return !!L.superMegaWinThreshold && !!(x >= L.superMegaWinThreshold);
        };
        K.emitSocialBigWinStart = function (x) {
          T.emitGameEffectStateChangedEvent({
            displayState: "Start",
            effectType: "BigWin"
          });
          if (x) {
            x();
          }
        };
        K.emitSocialBigWinEnd = function (x) {
          T.emitGameEffectStateChangedEvent({
            displayState: "End",
            effectType: "BigWin"
          });
          if (x) {
            x();
          }
        };
        cc._RF.pop();
      }
    }, {
      GameEventHandler: "GameEventHandler"
    }],
    SlotGenerator: [function (R, K, g) {
      'use strict';

      if (!cc._RF.push(K, "213874uZn5HSqZznN5luzQQ", "SlotGenerator")) {
        Object.defineProperty(g, "__esModule", {
          value: true
        });
        g.generateSlot = undefined;
        var L = R("SlotView");
        var D = R("SlotScrollerController");
        var k = {
          up: 0,
          down: 0,
          left: 0,
          right: 0
        };
        var C = {
          containerNode: undefined,
          numberOfColumn: undefined,
          slotView: L.default,
          slotScrollerController: D.default
        };
        g.generateSlot = function (j) {
          var G;
          var V = (j = __assign(__assign({}, C), j)).containerNode;
          var Q = j.slotSize ? j.slotSize : V.getContentSize();
          var N = Q.width;
          var Y = Q.height;
          var W = new cc.Node("slot_scroller");
          if (j.dontGenerateMask) {
            W.parent = V;
            W.width = N;
            W.height = Y;
          } else {
            var q = __assign(__assign({}, k), j.maskMargin);
            var S = new cc.Node("slot_mask");
            S.parent = V;
            S.width = N + q.left + q.right;
            S.height = Y + q.up + q.down;
            S.x = (q.right - q.left) / 2;
            S.y = (q.up - q.down) / 2;
            (G = S.addComponent(cc.Mask)).type = cc.Mask.Type.RECT;
            G.inverted = false;
            W.parent = S;
            W.width = N;
            W.height = Y;
            W.x = -S.x;
            W.y = -S.y;
          }
          for (var z = j.numberOfColumn, A = N / z, M = (A - N) / 2, E = [], F = 0; F < z; F++) {
            E[F] = new j.slotView(W, M + A * F);
          }
          return {
            mask: G,
            slotScrollerController: W.addComponent(j.slotScrollerController),
            slotViews: E
          };
        };
        cc._RF.pop();
      }
    }, {
      SlotScrollerController: "SlotScrollerController",
      SlotView: "SlotView"
    }],
    SlotHandler: [function (L, D, k) {
      'use strict';

      if (!cc._RF.push(D, "1cd993EvjFMRYt4APU9sav3", "SlotHandler")) {
        Object.defineProperty(k, "__esModule", {
          value: true
        });
        var G = {
          accelerateDuration: 0.1,
          accelerateFactor: 1.68,
          accelerateDistance: -300,
          bounceDistance: 60,
          bounceDuration: 0.1,
          bounceFactor: 1
        };
        var V = {
          accelerateDuration: 0.24,
          accelerateFactor: 2.5,
          accelerateDistance: -1000,
          bounceDistance: 60,
          bounceDuration: 0.1,
          bounceFactor: 1
        };
        var Q = {
          endSpeed: -3550,
          bounceDistance: 15,
          bounceDuration: 0.05,
          bounceFactor: 1.7
        };
        var N = {
          endSpeed: -500,
          bounceDistance: -30,
          bounceDuration: 0.2,
          bounceFactor: 2
        };
        var Y = L("Utils");
        var W = L("SlotGenerator");
        var q = L("SlotHelper");
        var z = L("WBSSlotHelper");
        var M = L("WBSSlotItemController");
        var E = L("WBSSlotView");
        var F = L("WBSSlotItemPool");
        var H = L("WBSGameUtils");
        var w = L("GameConstant");
        var U = L("BonuceBackStopScroller");
        var P = L("WBSSlotItemHandler");
        var X = L("WBSSlotDataHandler");
        var J = L("SettingMenuHelper");
        var Z0 = L("WBSDataSource");
        var Z1 = L("ShiftSlotHandler");
        var Z2 = L("SlotImageHandler");
        var Z3 = L("AudioManager");
        var Z4 = L("AudioConstant");
        var Z5 = Object.freeze(G);
        var Z6 = Object.freeze(V);
        var Z7 = Object.freeze(Q);
        var Z8 = Object.freeze(N);
        var Z9 = function () {
          function ZZ() {
            this._shiftSlotHandler = undefined;
            this._slotHelper = undefined;
            this._onBeforeReloadCallback = undefined;
            this._onAfterReloadCallback = undefined;
            this._onSpinStopCallback = undefined;
            this._onReelStartCallback = undefined;
            this._onReelStopCallback = undefined;
            this._onScatterEffectStartCallback = undefined;
            this._onScatterEffectStopCallback = undefined;
            this._runFastSpinEffect = undefined;
            this._startScrollingTime = undefined;
            this._isFastStop = false;
            this._isTurboSpin = false;
            this._canFastStop = true;
            this._isFastSpinStarted = false;
            this._fastSpinReelIndex = undefined;
            this._randomScatterAppearCount = 0;
            this._reels = [];
            this._fastSpinDisposer = [];
          }
          Object.defineProperty(ZZ.prototype, "slotHelper", {
            get: function () {
              return this._slotHelper;
            },
            enumerable: false,
            configurable: true
          });
          ZZ.prototype.setOnSpinStopCallback = function (ZI) {
            this._onSpinStopCallback = ZI;
          };
          ZZ.prototype.setOnReelStartCallback = function (ZI) {
            this._onReelStartCallback = ZI;
          };
          ZZ.prototype.setOnReelStopCallback = function (ZI) {
            this._onReelStopCallback = ZI;
          };
          ZZ.prototype.setOnScatterEffectStartCallback = function (ZI) {
            this._onScatterEffectStartCallback = ZI;
          };
          ZZ.prototype.setOnScatterEffectStopCallback = function (ZI) {
            this._onScatterEffectStopCallback = ZI;
          };
          ZZ.prototype.setOnBeforeReloadCallback = function (ZI) {
            this._onBeforeReloadCallback = ZI;
          };
          ZZ.prototype.setOnAfterReloadCallback = function (ZI) {
            this._onAfterReloadCallback = ZI;
          };
          ZZ.prototype.init = function (ZI) {
            var Zd = {
              maxSpeed: -5000
            };
            var ZO = {
              maxSpeed: -5000
            };
            var ZR = ZI.containerNode;
            var ZK = W.generateSlot({
              slotView: E.default,
              containerNode: ZR,
              numberOfColumn: w.NUMBER_OF_COLUMN,
              dontGenerateMask: true
            });
            var Zg = Z0.wbsDataSource.transactionModel.goldSymbolBefore;
            var ZT = cc.size(ZR.width / w.NUMBER_OF_COLUMN, ZR.height / w.NUMBER_OF_ROW);
            var Zx = __assign(__assign({}, Z5), Zd);
            var ZL = __assign(__assign({}, Z7), ZO);
            var ZD = this._slotHelper = new z.default();
            ZD.init({
              numberOfColumn: w.NUMBER_OF_COLUMN,
              numberOfRow: w.NUMBER_OF_ROW,
              topBufferRow: 1,
              bottomBufferRow: 1,
              slotItem: M.default,
              slotItemHandler: new P.default(),
              slotDataHandler: new X.default(),
              slotItemPool: new F.default(),
              spinType: ZI.spinType,
              sortBottomItemToFront: true,
              startScrollerConfig: Zx,
              stopScrollerConfig: ZL,
              reelData: H.getProcessedReelSymbols(ZI.reels, Zg),
              symbolSize: ZT,
              normalSymbolScale: 1,
              blurSymbolScale: 2,
              slotViews: ZK.slotViews,
              slotScrollerController: ZK.slotScrollerController,
              normalSymbolSpriteFrame: Z2.slotImageHandler.symbolImages,
              blurSymbolSpriteFrame: Z2.slotImageHandler.blurredSymbolImages,
              getRandomSymbol: this._getRandomSymbol.bind(this),
              runScroller: this._runScroller.bind(this),
              getSymbolZOrder: this._getSymbolZOrder.bind(this),
              stopScroller: U.default
            });
            ZD.setOnReelStopCallback(this._onReelStopped.bind(this));
            ZD.setOnSlotStopCallback(this._onSpinStopped.bind(this));
            this._shiftSlotHandler = new Z1.default(this);
            this._shiftSlotHandler.init({
              isHorizontal: false,
              slotItemHolder: ZK.slotScrollerController.node,
              slotViews: ZK.slotViews,
              slotItemPool: ZD.slotItemPool,
              numberOfRow: w.NUMBER_OF_ROW,
              symbolSize: ZT,
              symbolSpawnSpacing: ZT.height,
              columnDropInterval: 0.1,
              slowDropDelay: 0.5,
              columnSlowDropInterval: 0.5,
              acceleration: 10000,
              accelerationFactor: 2.5,
              bounceDistance: 30,
              bounceDistanceFactor: 0,
              bounceDuraion: 0.15,
              bounceFactor: 1.7
            });
          };
          ZZ.prototype._onReelStopped = function (ZI) {
            var Zd = this;
            if (this._onReelStopCallback) {
              this._onReelStopCallback(ZI);
            }
            if (!this._isFastStop && this.isFastSpin()) {
              var ZO = ZI;
              function ZR(ZK) {
                var Zg = ZK + 1;
                if (Zg < w.NUMBER_OF_COLUMN && Zd.isFastSpinScroller(Zg)) {
                  if (Zd._runFastSpinEffect) {
                    Zd._runFastSpinEffect(Zg);
                  }
                  Zd._isFastSpinStarted = true;
                  Zd._fastSpinReelIndex = Zg;
                }
              }
              if (this.isFastSpinScroller(ZO)) {
                if (this._onScatterEffectStopCallback) {
                  this._onScatterEffectStopCallback(ZO, function () {
                    ZR(ZO);
                  });
                }
              } else {
                ZR(ZO);
              }
            }
          };
          ZZ.prototype._onSpinStopped = function () {
            if (this._onSpinStopCallback) {
              this._onSpinStopCallback();
            }
            this._isFastSpinStarted = false;
            this._fastSpinReelIndex = undefined;
            if (this._fastSpinDisposer.length) {
              this._fastSpinDisposer.forEach(function (ZI) {
                if (ZI) {
                  ZI();
                }
              });
              this._fastSpinDisposer = [];
            }
          };
          ZZ.prototype.isHeartBeat = function () {
            return Z0.wbsDataSource.transactionModel.previousScatterCount === w.FAST_SCROLL_MIN_REQUIRE_SCATTER;
          };
          ZZ.prototype.isSlowDrop = function () {
            return Z0.wbsDataSource.transactionModel.previousScatterCount >= w.FAST_SCROLL_MIN_REQUIRE_SCATTER;
          };
          ZZ.prototype.playShiftOldSlotEffect = function (ZI) {
            var Zd = Z0.wbsDataSource.transactionModel.positionToBeRemove;
            this._shiftSlotHandler.playDropOldItemsEffect(Zd, ZI);
          };
          ZZ.prototype.playShiftNewSlotEffect = function (ZI, Zd, ZO, ZR) {
            var ZK = this._generateRespinReels(ZI, Zd);
            var Zg = this.isSlowDrop();
            var ZT = this.isHeartBeat();
            var Zx = {
              newData: ZK,
              isSlowDrop: Zg,
              isHeartBeat: ZT,
              slowDropFadeOutCallback: ZO,
              callback: ZR
            };
            this._shiftSlotHandler.reset();
            this._shiftSlotHandler.playDropNewItemsEffect(Zx);
          };
          ZZ.prototype.reloadData = function (ZI) {
            if (this._onBeforeReloadCallback) {
              this._onBeforeReloadCallback();
            }
            this._setReelData(ZI);
            this._slotHelper.reloadSlot();
            this._shiftSlotHandler.releaseAllSlotItem();
            if (this._onAfterReloadCallback) {
              this._onAfterReloadCallback();
            }
          };
          ZZ.prototype.spin = function (ZI, Zd = false) {
            this._startScrollingTime = Date.now();
            this._canFastStop = true;
            this._isTurboSpin = Zd;
            var ZO = -5000;
            var ZR = Z5;
            if (Zd) {
              ZO *= 1.67;
              ZR = Z6;
            }
            var ZK = {
              maxSpeed: ZO
            };
            var Zg = {
              maxSpeed: ZO
            };
            for (var ZT = 0; ZT < w.NUMBER_OF_COLUMN; ZT++) {
              this._slotHelper.setStartScrollerConfig(ZT, __assign(ZK, ZR));
              this._slotHelper.setStopScrollerConfig(ZT, Zg);
            }
            this._slotHelper.setSpinType(ZI);
            this._slotHelper.startScroll();
          };
          ZZ.prototype.stopSpin = function () {
            this._slotHelper.stopScroll();
          };
          ZZ.prototype.instantStopScroll = function () {
            var ZI = this;
            if (this._canFastStop) {
              this._canFastStop = false;
              var Zd = this._slotHelper;
              function ZO() {
                Z3.stopAudio(Z4.GENERAL_AUDIO.spinStopQuick.key);
                Z3.playAudio(Z4.GENERAL_AUDIO.spinStopQuick.key);
                Zd.instantStopScroll();
                ZI.reloadData(Z0.wbsDataSource.transactionModel);
              }
              if (Zd.getSlotState() === q.SlotState.START) {
                var ZR = (Date.now() - this._startScrollingTime) / 1000;
                var ZK = 0;
                ZK = (ZK = this._isTurboSpin ? 0 - ZR : 0.7 - ZR) > 0 ? ZK : 0;
                Y.delayCallback(ZK)(ZO);
              } else {
                ZO();
              }
            }
          };
          ZZ.prototype.setReelData = function (ZI) {
            this._setReelData(ZI);
          };
          ZZ.prototype.setFastStop = function (ZI = true) {
            this._isFastStop = ZI;
          };
          ZZ.prototype.getFastStop = function () {
            return this._isFastStop;
          };
          ZZ.prototype.changeSymbol = function (ZI, Zd) {
            this._slotHelper.changeSymbol(ZI, Zd);
          };
          ZZ.prototype.getSlotItemsWorldPosition = function () {
            var ZI;
            var Zd = [];
            for (var ZO = 0; ZO < arguments.length; ZO++) {
              Zd[ZO] = arguments[ZO];
            }
            return (ZI = this._slotHelper).getItemsWorldPositionAR.apply(ZI, __spread(Zd));
          };
          ZZ.prototype.getFormattedData = function (ZI) {
            return this._slotHelper.getFormattedData(ZI);
          };
          ZZ.prototype.setSlotItemsVisible = function (ZI) {
            var Zd;
            var ZO = [];
            for (var ZR = 1; ZR < arguments.length; ZR++) {
              ZO[ZR - 1] = arguments[ZR];
            }
            return (Zd = this._slotHelper).setItemsVisible.apply(Zd, __spread([ZI], ZO));
          };
          ZZ.prototype.getSlotItemByIndices = function (ZI) {
            var Zd;
            ZI ||= [];
            return (Zd = this._slotHelper.slotItemHandler).getSlotItems.apply(Zd, __spread(ZI));
          };
          ZZ.prototype.isFastSpin = function () {
            return this._reels.filter(function (ZI) {
              return ZI === w.SlotSymbols.Scatter;
            }).length >= 2;
          };
          ZZ.prototype.isFastSpinScroller = function (ZI) {
            var Zd = this._reels;
            var ZO = 0;
            for (var ZR = 0, ZK = 0; ZK !== ZI;) {
              ZR += w.NUMBER_OF_ROW_LIST[ZK];
              ZK++;
            }
            if (ZR) {
              for (var Zg = 0; Zg < ZR; Zg++) {
                if (Zd[Zg] === w.SlotSymbols.Scatter) {
                  ZO++;
                }
              }
            }
            return ZO >= w.FAST_SCROLL_MIN_REQUIRE_SCATTER;
          };
          ZZ.prototype.isFastSpinStarted = function () {
            return this._isFastSpinStarted;
          };
          ZZ.prototype.getFastSpinReelIndex = function () {
            return this._fastSpinReelIndex;
          };
          ZZ.prototype._getRandomSymbol = function (ZI) {
            var Zd = Y.randomInt(1, 9);
            this._randomScatterAppearCount++;
            if (Zd === w.SlotSymbols.Scatter) {
              if (this._randomScatterAppearCount <= 5) {
                Zd = Y.randomInt(2, 9);
              } else {
                this._randomScatterAppearCount = 0;
              }
            } else if (ZI === 2 || ZI === 3) {
              if (Math.random() < 0.1) {
                Zd += w.BLOCK_TYPE.GOLD;
              }
            }
            return Zd;
          };
          ZZ.prototype._getSymbolZOrder = function () {
            return 1;
          };
          ZZ.prototype._runScroller = function (ZI, Zd) {
            if (ZI === q.SlotState.START) {
              return this._runStartScroller(Zd);
            } else if (ZI === q.SlotState.STOP) {
              return this._runStopScroller(Zd);
            } else {
              return undefined;
            }
          };
          ZZ.prototype._runStartScroller = function (ZI) {
            var Zd = this._onReelStartCallback;
            if (this._isTurboSpin) {
              for (var ZO = 0; ZO < w.NUMBER_OF_COLUMN; ZO++) {
                ZI(ZO);
                if (Zd) {
                  Zd(ZO);
                }
              }
              return function () {};
            }
            var ZR = 0;
            var ZK = H.scheduleIterator(function (Zg, ZT) {
              ZI(Zg);
              if (Zd) {
                Zd(Zg);
              }
              ZR++;
              ZT();
            }, 0.1, w.NUMBER_OF_COLUMN);
            return function () {
              ZK();
              for (var Zg = ZR; Zg < w.NUMBER_OF_COLUMN; Zg++) {
                if (Zd) {
                  Zd(Zg);
                }
              }
            };
          };
          ZZ.prototype._runStopScroller = function (ZI) {
            var Zd = this;
            if (this._isFastStop) {
              this._runFastSpinEffect = undefined;
              if (this._canFastStop) {
                this.instantStopScroll();
              }
              return Y.emptyFunc;
            }
            this._runFastSpinEffect = function (ZK) {
              var Zg = Zd._slotHelper.scrollerAtIndex(ZK);
              if (Zg && Zg.changeIdleSpeed && Zg.updateRunTimeConfig) {
                Zg.changeIdleSpeed(1.5, -1000);
                Zg.updateRunTimeConfig(Z8);
                if (Zd._onScatterEffectStartCallback) {
                  Zd._onScatterEffectStartCallback(ZK);
                }
                var ZT = Y.delayCallback(1.5)(function () {
                  ZI(ZK);
                });
                Zd._fastSpinDisposer.push(ZT);
              }
            };
            var ZO = w.NUMBER_OF_COLUMN;
            if (this.isFastSpin()) {
              for (var ZR = 0; ZR < w.NUMBER_OF_COLUMN; ZR++) {
                if (ZR >= 2 && this.isFastSpinScroller(ZR)) {
                  ZO = ZR;
                  break;
                }
              }
            }
            return H.scheduleIterator(function (ZK, Zg) {
              ZI(ZK);
              Zg();
            }, 0.2, ZO);
          };
          ZZ.prototype.isTurboMode = function () {
            return J.settingMenuHelper.turboSpinOn && !this.isFreeSpin();
          };
          ZZ.prototype.isFreeSpin = function () {
            var ZI = Z0.wbsDataSource.transactionModel.stateTransitionFrom;
            var Zd = ZI === w.TransitionState.FREE_SPIN;
            var ZO = ZI === w.TransitionState.FREE_SPIN_RESPIN;
            return Zd || ZO;
          };
          ZZ.prototype._generateRespinReels = function (ZI, Zd) {
            var ZO = [[], [], [], [], [], []];
            for (var ZR = 0; ZR < ZI.length; ZR++) {
              var ZK = ZI[ZR];
              for (var Zg = 0; Zg < ZI.length; Zg++) {
                switch (Zd[ZR][Zg]) {
                  case 0:
                    ZO[ZR].push(ZK[Zg] + w.BLOCK_TYPE.NORMAL);
                    break;
                  case 1:
                    ZO[ZR].push(ZK[Zg] + w.BLOCK_TYPE.GOLD);
                }
              }
            }
            return ZO;
          };
          ZZ.prototype._setReelData = function (ZI) {
            var Zd = ZI.originalReels;
            var ZO = ZI.goldSymbolBefore;
            this._reels = Zd;
            var ZR = H.getProcessedReelSymbols(Zd, ZO);
            this._slotHelper.setReelData(ZR);
          };
          return ZZ;
        }();
        k.default = Z9;
        cc._RF.pop();
      }
    }, {
      AudioConstant: "AudioConstant",
      AudioManager: "AudioManager",
      BonuceBackStopScroller: "BonuceBackStopScroller",
      GameConstant: "GameConstant",
      SettingMenuHelper: "SettingMenuHelper",
      ShiftSlotHandler: "ShiftSlotHandler",
      SlotGenerator: "SlotGenerator",
      SlotHelper: "SlotHelper",
      SlotImageHandler: "SlotImageHandler",
      Utils: "Utils",
      WBSDataSource: "WBSDataSource",
      WBSGameUtils: "WBSGameUtils",
      WBSSlotDataHandler: "WBSSlotDataHandler",
      WBSSlotHelper: "WBSSlotHelper",
      WBSSlotItemController: "WBSSlotItemController",
      WBSSlotItemHandler: "WBSSlotItemHandler",
      WBSSlotItemPool: "WBSSlotItemPool",
      WBSSlotView: "WBSSlotView"
    }],
    SlotHelper: [function (R, K, g) {
      'use strict';

      if (!cc._RF.push(K, "f967cJUpgBPeZxa4E081RBj", "SlotHelper")) {
        Object.defineProperty(g, "__esModule", {
          value: true
        });
        g.SlotState = undefined;
        var x;
        var L = R("SlotItem");
        var D = R("SlotItemPool");
        var k = R("SlotItemHandler");
        var C = R("SlotDataHandler");
        var j = R("BaseScroller");
        var G = R("DefaultStartScroller");
        var V = R("DefaultStopScroller");
        (function (W) {
          W[W.IDLE = 0] = "IDLE";
          W[W.START = 1] = "START";
          W[W.STOP = 2] = "STOP";
        })(x = g.SlotState ||= {});
        var Q = {
          spinType: undefined,
          reelData: undefined,
          symbolSize: undefined,
          numberOfColumn: undefined,
          numberOfRow: undefined,
          normalSymbolSpriteFrame: undefined,
          blurSymbolSpriteFrame: undefined,
          slotViews: undefined,
          slotScrollerController: undefined,
          getSymbolSize: undefined,
          getRandomSymbol: undefined,
          runScroller: undefined,
          topBufferRow: 1,
          bottomBufferRow: 1,
          normalSymbolScale: 1,
          blurSymbolScale: 1,
          blurSpeedFactor: 0.9,
          unblurSpeedFactor: 0.9,
          slotItem: L.default,
          startScroller: G.default,
          stopScroller: V.default
        };
        var N = Q;
        var Y = function () {
          function W() {
            this._numberOfColumn = undefined;
            this._numberOfRow = undefined;
            this._isSlotViewBlur = undefined;
            this._blurSpeedFactor = undefined;
            this._unblurSpeedFactor = undefined;
            this._bottomExtraScrollRow = undefined;
            this._topExtraScrollRow = undefined;
            this._slotViews = undefined;
            this._scrollerController = undefined;
            this._startScrollers = undefined;
            this._stopScrollers = undefined;
            this._slotDataHandler = undefined;
            this._slotItemPool = undefined;
            this._slotItemHandler = undefined;
            this._onReelStopCallback = undefined;
            this._onSlotStopCallback = undefined;
          }
          var q = {
            get: function () {
              return this._slotDataHandler;
            },
            enumerable: false,
            configurable: true
          };
          Object.defineProperty(W.prototype, "slotDataHandler", q);
          Object.defineProperty(W.prototype, "slotItemPool", {
            get: function () {
              return this._slotItemPool;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(W.prototype, "slotItemHandler", {
            get: function () {
              return this._slotItemHandler;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(W.prototype, "slotViews", {
            get: function () {
              return this._slotViews;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(W.prototype, "isSlotViewBlur", {
            get: function () {
              return this._isSlotViewBlur;
            },
            enumerable: false,
            configurable: true
          });
          W.prototype.init = function (z) {
            N.getScroller = this.getScroller.bind(this);
            N.willChangeSlotState = this.willChangeSlotState.bind(this);
            N.onSlotStateEnd = this.onScrollerEnd.bind(this);
            N.slotViewGetItem = this.slotViewGetItem.bind(this);
            N.slotViewReleaseItem = this.slotViewReleaseItem.bind(this);
            N.onScrollerAccelerate = this.onScrollerAccelerate.bind(this);
            N.onScrollerDecelerate = this.onScrollerDecelerate.bind(this);
            N.onScrollerStop = this.onScrollerStop.bind(this);
            var A = (z = __assign(__assign({}, N), z)).symbolSize;
            var M = this._numberOfColumn = z.numberOfColumn;
            var E = this._numberOfRow = z.numberOfRow;
            var F = this._slotViews = z.slotViews;
            var H = this._scrollerController = z.slotScrollerController;
            var w = !!z.getSymbolSize;
            this._blurSpeedFactor = z.blurSpeedFactor;
            this._unblurSpeedFactor = z.unblurSpeedFactor;
            var U = z.topBufferRow;
            var B = z.bottomBufferRow;
            this._bottomExtraScrollRow = U * (w ? 2 : 1) + this._numberOfRow;
            this._topExtraScrollRow = B * (w ? 2 : 1) + 1;
            var P = this._isSlotViewBlur = [];
            for (var X = 0; X < E; X++) {
              P[X] = false;
            }
            (this._slotItemPool = z.slotItemPool ? z.slotItemPool : new D.default()).init({
              slotItem: z.slotItem,
              normalSpriteFrame: z.normalSymbolSpriteFrame,
              blurSpriteFrame: z.blurSymbolSpriteFrame,
              normalScale: z.normalSymbolScale,
              blurScale: z.blurSymbolScale,
              getSymbolZOrder: z.getSymbolZOrder
            });
            (this._slotItemHandler = z.slotItemHandler ? z.slotItemHandler : new k.default()).init(E);
            (this._slotDataHandler = z.slotDataHandler ? z.slotDataHandler : new C.default()).init({
              slotViews: F,
              reelData: z.reelData,
              largeSymbolDatas: z.largeSymbolDatas,
              spinType: z.spinType,
              numberOfColumn: M,
              numberOfRow: E,
              topBufferRow: U,
              bottomBufferRow: B,
              getSymbolSize: z.getSymbolSize,
              getRandomSymbol: z.getRandomSymbol
            });
            var J = this._startScrollers = [];
            var Z0 = this._stopScrollers = [];
            var Z1 = this.scrollerGetStopDistance.bind(this);
            var Z2 = this.scrollerScroll.bind(this);
            for (X = 0; X < F.length; X++) {
              var Z3 = {
                functionalRow: E,
                symbolSize: A,
                getItem: z.slotViewGetItem,
                releaseItem: z.slotViewReleaseItem,
                sortBottomItemToFront: z.sortBottomItemToFront
              };
              var Z4 = {
                scrollCallback: Z2
              };
              F[X].init(Z3);
              (J[X] = new z.startScroller(__assign(Z4, z.startScrollerConfig))).on(j.SCROLLER_EVENT.ACCELERATE, z.onScrollerAccelerate);
              var Z5 = {
                scrollCallback: Z2,
                getStopDistance: Z1
              };
              var Z6 = Z0[X] = new z.stopScroller(__assign(Z5, z.stopScrollerConfig));
              Z6.on(j.SCROLLER_EVENT.DECELERATE, z.onScrollerDecelerate);
              Z6.on(j.SCROLLER_EVENT.END, z.onScrollerStop);
            }
            var Z7 = {
              getScroller: z.getScroller,
              releaseScroller: z.releaseScroller,
              runScroller: z.runScroller,
              willChangeSlotState: z.willChangeSlotState,
              didChangeSlotState: z.didChangeSlotState,
              onSlotStateEnd: z.onSlotStateEnd
            };
            this._setAllSlotItems();
            H.init(F, Z7);
            H.setSlotState(x.IDLE);
          };
          W.prototype.changeSymbol = function (S, z) {
            var f = this._slotItemHandler.getSlotItems(S)[0];
            this._slotItemPool.updateSlotItemSymbolIndex(f, z);
          };
          W.prototype.setOnReelStopCallback = function (S) {
            this._onReelStopCallback = S;
          };
          W.prototype.setOnSlotStopCallback = function (S) {
            this._onSlotStopCallback = S;
          };
          W.prototype.setSpinType = function (S) {
            this._slotDataHandler.setSpinType(S);
          };
          W.prototype.setReelData = function (S, z) {
            this._slotDataHandler.setReelData(S, z);
          };
          W.prototype.updateReelData = function (S, z) {
            this._slotDataHandler.updateReelData(S, z);
          };
          W.prototype.getReelStopPosition = function (S) {
            return this._slotDataHandler.getReelDataPosition(S);
          };
          W.prototype.getFormattedData = function (S) {
            return this._slotDataHandler.getFormattedData(S);
          };
          W.prototype.overwriteFormattedData = function (S, z, f) {
            this._slotDataHandler.overwriteFormattedData(S, z, f);
          };
          W.prototype.reloadSlot = function () {
            var S = this._slotDataHandler;
            var z = this._slotViews;
            for (var f = 0, A = this._slotViews.length; f < A; f++) {
              S.setReelDataPosition(f, 0);
              z[f].reloadItems();
            }
            this._setAllSlotItems();
          };
          W.prototype.setFunctionalRow = function (S) {
            this._slotViews.forEach(function (z) {
              return z.setFunctionalRow(S);
            });
          };
          W.prototype.setSlotAnchor = function (S) {
            this._slotViews.forEach(function (z) {
              return z.setSlotAnchor(S);
            });
          };
          W.prototype.setItemsVisible = function (S) {
            var z;
            var f = [];
            for (var A = 1; A < arguments.length; A++) {
              f[A - 1] = arguments[A];
            }
            (z = this._slotItemHandler).getSlotItems.apply(z, __spread(f)).forEach(function (M) {
              return M.visible = S;
            });
          };
          W.prototype.setItemsBlur = function (S, z) {
            var f = this._slotViews[z];
            this._isSlotViewBlur[z] = S;
            var A = f.getVisibleItems();
            for (var M = 0, E = A.length; M < E; M++) {
              A[M].setBlur(S);
            }
          };
          W.prototype.getItemsVisible = function () {
            var S;
            var z = [];
            for (var f = 0; f < arguments.length; f++) {
              z[f] = arguments[f];
            }
            var A = [];
            (S = this._slotItemHandler).getSlotItems.apply(S, __spread(z)).forEach(function (M) {
              return A.push(M.visible);
            });
            return A;
          };
          W.prototype.getItemsWorldPositionAR = function () {
            var S;
            var z = [];
            for (var f = 0; f < arguments.length; f++) {
              z[f] = arguments[f];
            }
            var A = cc.v2();
            var M = [];
            (S = this._slotItemHandler).getSlotItems.apply(S, __spread(z)).forEach(function (E) {
              return M.push(E.node.convertToWorldSpaceAR(A));
            });
            return M;
          };
          W.prototype.scrollerAtIndex = function (S) {
            return this._scrollerController.scrollerAtIndex(S);
          };
          W.prototype.indexOfScroller = function (S) {
            return this._scrollerController.indexOfScroller(S);
          };
          W.prototype.getSlotState = function () {
            return this._scrollerController.getSlotState();
          };
          W.prototype.startScroll = function () {
            var S = this._scrollerController;
            if (S.getSlotState() === x.IDLE) {
              this._slotDataHandler.reset();
              S.setSlotState(x.START);
            }
          };
          W.prototype.stopScroll = function () {
            var S = this._scrollerController;
            if (S.getSlotState() === x.START) {
              S.setSlotState(x.STOP);
            }
          };
          W.prototype.instantStopScroll = function () {
            var S = this._scrollerController;
            if (S.getSlotState() !== x.IDLE) {
              S.setSlotState(x.STOP);
              S.endCurrentState();
            }
          };
          W.prototype.setStartScrollerConfig = function (S, z) {
            this._startScrollers[S].setConfig(z);
          };
          W.prototype.setStopScrollerConfig = function (S, z) {
            this._stopScrollers[S].setConfig(z);
          };
          W.prototype.updateStartScrollerRunTimeConfig = function (S, z) {
            this._startScrollers[S].updateRunTimeConfig(z);
          };
          W.prototype.updateStopScrollerRunTimeConfig = function (S, z) {
            this._stopScrollers[S].updateRunTimeConfig(z);
          };
          W.prototype._setAllSlotItems = function () {
            var S = this._slotItemHandler;
            S.reset();
            this._slotViews.forEach(function (z, f) {
              z.getFunctionalItems().forEach(function (A) {
                if (A.symbolIndex !== -1) {
                  S.setSlotItem(f, A);
                }
              });
            });
          };
          W.prototype.slotViewGetItem = function (S, z) {
            var f = this._slotDataHandler.getItemInfo(S, z);
            var A = this._slotViews.indexOf(S);
            var M = this._slotItemPool.getSlotItem(f.symbolIndex, this._isSlotViewBlur[A]);
            M.positionIndex = f.positionIndex;
            M.symbolColumn = f.symbolColumn;
            M.symbolRow = f.symbolRow;
            return M;
          };
          W.prototype.slotViewReleaseItem = function (S, z) {
            this._slotItemPool.releaseSlotItem(z);
          };
          W.prototype.scrollerScroll = function (S, z) {
            var f = this._scrollerController.indexOfScroller(S);
            this._slotViews[f].changePositionY(z);
          };
          W.prototype.scrollerGetStopDistance = function (S) {
            var z;
            var f = this._scrollerController.indexOfScroller(S);
            var A = this._slotViews[f];
            z = S.getRunTimeConfig().maxSpeed > 0 ? A.getNextBottomIndex(this._bottomExtraScrollRow) : A.getNextTopIndex(this._topExtraScrollRow);
            this._slotDataHandler.setReelDataPosition(f, z);
            return A.getDistanceToIndex(z);
          };
          W.prototype.onScrollerAccelerate = function (S) {
            var z = S.speedFactor;
            var f = this._isSlotViewBlur;
            var A = this._scrollerController.indexOfScroller(S.scroller);
            if (z > this._blurSpeedFactor && !f[A]) {
              this.setItemsBlur(true, A);
            }
          };
          W.prototype.onScrollerDecelerate = function (S) {
            var z = S.speedFactor;
            var f = this._isSlotViewBlur;
            var A = this._scrollerController.indexOfScroller(S.scroller);
            if (z < this._unblurSpeedFactor && f[A]) {
              this.setItemsBlur(false, A);
            }
          };
          W.prototype.onScrollerStop = function (S) {
            var z = this._scrollerController.indexOfScroller(S.scroller);
            var f = this._slotViews[z];
            var A = this._slotItemHandler;
            f.resetPositionIndex();
            f.getFunctionalItems().forEach(function (E) {
              if (E.symbolIndex !== -1) {
                A.setSlotItem(z, E);
              }
            });
            var M = this._onReelStopCallback;
            if (M) {
              M(z);
            }
          };
          W.prototype.getScroller = function (S, z, f) {
            if (f === x.START) {
              return this._startScrollers[S];
            } else if (f === x.STOP) {
              return this._stopScrollers[S];
            } else {
              return undefined;
            }
          };
          W.prototype.willChangeSlotState = function (S, z) {
            if (S === x.IDLE && z === x.STOP) {
              this._scrollerController.endCurrentState();
            }
          };
          W.prototype.onScrollerEnd = function (S) {
            if (S === x.STOP) {
              this._scrollerController.setSlotState(x.IDLE);
              var z = this._onSlotStopCallback;
              if (z) {
                z();
              }
            }
          };
          return W;
        }();
        g.default = Y;
        cc._RF.pop();
      }
    }, {
      BaseScroller: "BaseScroller",
      DefaultStartScroller: "DefaultStartScroller",
      DefaultStopScroller: "DefaultStopScroller",
      SlotDataHandler: "SlotDataHandler",
      SlotItem: "SlotItem",
      SlotItemHandler: "SlotItemHandler",
      SlotItemPool: "SlotItemPool"
    }],
    SlotImageHandler: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "2abfb9MRm5DnqFq+neQMuuE", "SlotImageHandler")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        K.slotImageHandler = K.SlotImageHandler = undefined;
        var T = I("GameConstant");
        var x = function () {
          function D() {
            this._symbolImages = Object.create(null);
            this._blurredSymbolImages = Object.create(null);
            this._backgroundImages = Object.create(null);
            this._blurredBackgroundImages = Object.create(null);
            this._frameImages = Object.create(null);
            this._blurredFrameImages = Object.create(null);
            this._spines = Object.create(null);
          }
          var k = {
            get: function () {
              return this._symbolImages;
            },
            enumerable: false,
            configurable: true
          };
          Object.defineProperty(D.prototype, "symbolImages", k);
          Object.defineProperty(D.prototype, "blurredSymbolImages", {
            get: function () {
              return this._blurredSymbolImages;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(D.prototype, "backgroundImages", {
            get: function () {
              return this._backgroundImages;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(D.prototype, "blurredBackgroundImages", {
            get: function () {
              return this._blurredBackgroundImages;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(D.prototype, "frameImages", {
            get: function () {
              return this._frameImages;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(D.prototype, "blurredFrameImages", {
            get: function () {
              return this._blurredFrameImages;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(D.prototype, "spines", {
            get: function () {
              return this._spines;
            },
            enumerable: false,
            configurable: true
          });
          D.prototype.setup = function (C) {
            var u = C.symbolAtlas;
            var c = C.featureSymbolAtlas;
            var p = C.spines;
            this._symbolImages = L(T.slotSymbolImageNameMaps, u, c);
            this._blurredSymbolImages = L(T.blurredSlotSymbolNameMaps, u, c);
            this._frameImages = L(T.frameMaps, u, c);
            this._blurredFrameImages = L(T.blurredFrameMaps, u, c);
            this._backgroundImages = L(T.symbolBgNameMaps, u, c);
            this._blurredBackgroundImages = L(T.blurredSymbolBgNameMaps, u, c);
            this._spines = p;
          };
          return D;
        }();
        K.SlotImageHandler = x;
        K.slotImageHandler = new x();
        cc._RF.pop();
      }
      function L(D, k, C) {
        var u = Object.create(null);
        Object.keys(D).forEach(function (c) {
          var p = D[c];
          var j = k.getSpriteFrame(p);
          j ||= C.getSpriteFrame(p);
          u[c] = j;
        });
        return u;
      }
    }, {
      GameConstant: "GameConstant"
    }],
    SlotItemHandler: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "cbfb0c2igtO8oHCc6bYN0xe", "SlotItemHandler")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = function () {
          function x() {
            this.numberOfRow = undefined;
            this.functionalSlotItems = undefined;
          }
          x.prototype.init = function (L) {
            this.numberOfRow = L;
            this.functionalSlotItems = [];
          };
          x.prototype.reset = function () {
            this.functionalSlotItems.length = 0;
          };
          x.prototype.setSlotItem = function (L, D, k = 0) {
            var C = this.numberOfRow;
            var u = C - 1 - (D.positionIndex - k);
            if (D.symbolRow === 1 && D.symbolColumn === 1) {
              this.functionalSlotItems[L * this.numberOfRow + u] = D;
            } else {
              var p = Math.min(C - 1, u);
              var j = Math.max(0, u - D.symbolRow + 1);
              for (var G = L + D.symbolColumn - 1, V = L; V <= G; V++) {
                for (var Q = j; Q <= p; Q++) {
                  this.functionalSlotItems[V * C + Q] = D;
                }
              }
            }
          };
          x.prototype.getSlotItems = function () {
            var L = [];
            for (var D = 0; D < arguments.length; D++) {
              L[D] = arguments[D];
            }
            var n = this.functionalSlotItems;
            if (L.length) {
              var k = [];
              L.forEach(function (C) {
                k.push(n[C]);
              });
              return k;
            }
            return __spread(n);
          };
          return x;
        }();
        K.default = T;
        cc._RF.pop();
      }
    }, {}],
    SlotItemPool: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "4cb49tzG5ZEy6QJghScmBDK", "SlotItemPool")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = function () {
          function _x() {
            this.slotItemConstructor = undefined;
            this.slotItemPool = undefined;
            this.normalSpriteFrames = undefined;
            this.blurSpriteFrames = undefined;
            this.normalScale = undefined;
            this.blurScale = undefined;
            this.getSymbolZOrder = undefined;
          }
          _x.prototype.init = function (L) {
            this.slotItemConstructor = L.slotItem;
            var D = L.normalSpriteFrame;
            this.normalSpriteFrames = D[0] instanceof Array ? D[0] : D;
            var n = L.blurSpriteFrame;
            this.blurSpriteFrames = n ? n[0] instanceof Array ? n[0] : n : this.normalSpriteFrames;
            this.normalScale = L.normalScale === undefined ? 1 : L.normalScale;
            this.blurScale = L.blurScale === undefined ? 1 : L.blurScale;
            this.getSymbolZOrder = L.getSymbolZOrder;
            this.slotItemPool = new cc.NodePool(L.slotItem);
          };
          _x.prototype.getSlotItem = function (L, D = false) {
            if (L < 0) {
              var k = new cc.Node().addComponent(this.slotItemConstructor);
              k.symbolIndex = L;
              return k;
            }
            var C;
            var u = this.slotItemPool;
            (C = u.size() ? u.get().getComponent(this.slotItemConstructor) : this.createNewSlotItem()).setup(L, this.normalSpriteFrames[L], this.blurSpriteFrames[L], D);
            return C;
          };
          _x.prototype.releaseSlotItem = function (L) {
            if (L.symbolIndex < 0) {
              L.node.destroy();
            } else {
              this.slotItemPool.put(L.node);
            }
          };
          _x.prototype.updateSlotItemSymbolIndex = function (L, D) {
            L.setup(D, this.normalSpriteFrames[D], this.blurSpriteFrames[D]);
          };
          _x.prototype.createNewSlotItem = function () {
            var L = new cc.Node("slot_item");
            var D = new cc.Node("sprite");
            D.parent = L;
            var n = D.addComponent(cc.Sprite);
            n.sizeMode = cc.Sprite.SizeMode.RAW;
            n.trim = false;
            var k = L.addComponent(this.slotItemConstructor);
            var C = {
              sprite: n,
              normalScale: this.normalScale,
              blurScale: this.blurScale,
              getSymbolZOrder: this.getSymbolZOrder
            };
            k.init(C);
            return k;
          };
          return _x;
        }();
        K.default = T;
        cc._RF.pop();
      }
    }, {}],
    SlotItem: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "cba1dJ8KHJAlrAxCvyls0+u", "SlotItem")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("SlotSymbol");
        var x = cc._decorator.ccclass;
        var L = function (D) {
          function _k() {
            var C = D !== null && D.apply(this, arguments) || this;
            C.positionIndex = 0;
            C.sprite = undefined;
            C.normalSpriteFrame = undefined;
            C.blurSpriteFrame = undefined;
            C.normalScale = undefined;
            C.blurScale = undefined;
            C.getSymbolZOrder = undefined;
            return C;
          }
          __extends(_k, D);
          Object.defineProperty(_k.prototype, "visible", {
            get: function () {
              return this.sprite && this.sprite.node.active;
            },
            set: function (C) {
              if (this.sprite) {
                this.sprite.node.active = C;
              }
            },
            enumerable: false,
            configurable: true
          });
          _k.prototype.init = function (C) {
            this.sprite = C.sprite;
            var u = this.normalScale = C.normalScale === undefined ? 1 : C.normalScale;
            this.blurScale = C.blurScale === undefined ? u : C.blurScale;
            this.getSymbolZOrder = C.getSymbolZOrder;
          };
          _k.prototype.setup = function (C, u, c, p = false) {
            this.symbolIndex = C;
            this.normalSpriteFrame = u;
            this.blurSpriteFrame = c;
            this.zOrder = this.getSymbolZOrder ? this.getSymbolZOrder(C) : 0;
            this.setZIndex();
            this.setBlur(p);
          };
          _k.prototype.setZIndex = function (C = 0) {
            this.node.zIndex = C + this.zOrder * 100;
          };
          _k.prototype.unuse = function () {
            this.normalSpriteFrame = undefined;
            this.blurSpriteFrame = undefined;
            this.visible = true;
            D.prototype.unuse.call(this);
          };
          _k.prototype.setBlur = function (C) {
            var u = this.sprite;
            if (u) {
              u.spriteFrame = C ? this.blurSpriteFrame : this.normalSpriteFrame;
              u.node.scale = C ? this.blurScale : this.normalScale;
            }
          };
          return __decorate([x], _k);
        }(T.default);
        K.default = L;
        cc._RF.pop();
      }
    }, {
      SlotSymbol: "SlotSymbol"
    }],
    "SlotScrollerController.spec": [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "e08af4I5BlAUaisYXf6Oz5Q", "SlotScrollerController.spec")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        K.onStateChange = undefined;
        K.onStateChange = function (T) {
          var x = System.get("automation") && System.get("automation").GameData;
          if (T > 0 && x) {
            x.emit("ScrollEvent", T === 1 ? "start" : "stop");
          }
        };
        cc._RF.pop();
      }
    }, {}],
    SlotScrollerController: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "3383aiogiFCOKC9u2Q0E3sA", "SlotScrollerController")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("SlotScrollerController.spec");
        var x = I("AutomationDecorator");
        var L = cc._decorator.ccclass;
        var D = function (k) {
          function C() {
            var u = k !== null && k.apply(this, arguments) || this;
            u.slotViews = undefined;
            u.isEnded = true;
            u.slotState = undefined;
            u.pendingSlotState = undefined;
            u.scrollers = [];
            u.abortRunScroller = undefined;
            u.bindedRunScrollerAtIndex = undefined;
            return u;
          }
          __extends(C, k);
          C.prototype.onEnable = function () {
            if (this.pendingSlotState !== undefined) {
              var u = this.pendingSlotState;
              this.pendingSlotState = undefined;
              var c = this.slotState;
              if (c !== u) {
                this.onStateChange(u, c);
              }
            }
          };
          C.prototype.onDisable = function () {
            var u;
            var c;
            try {
              for (var p = __values(this.scrollers), j = p.next(); !j.done; j = p.next()) {
                var l = j.value;
                if (!l.isEnded) {
                  l.end();
                }
              }
            } catch (V) {
              var G = {
                error: V
              };
              u = G;
            } finally {
              try {
                if (j && !j.done && (c = p.return)) {
                  c.call(p);
                }
              } finally {
                if (u) {
                  throw u.error;
                }
              }
            }
          };
          C.prototype.update = function (j) {
            var G;
            var V;
            var Q;
            var N;
            if (this.isEnded) {
              try {
                for (var Y = __values(this.scrollers), W = Y.next(); !W.done; W = Y.next()) {
                  if ((A = W.value) && A.update) {
                    A.update(j);
                  }
                }
              } catch (F) {
                var q = {
                  error: F
                };
                G = q;
              } finally {
                try {
                  if (W && !W.done && (V = Y.return)) {
                    V.call(Y);
                  }
                } finally {
                  if (G) {
                    throw G.error;
                  }
                }
              }
            } else {
              var S = true;
              try {
                for (var z = __values(this.scrollers), f = z.next(); !f.done; f = z.next()) {
                  var A;
                  if (A = f.value) {
                    if (A.update) {
                      A.update(j);
                    }
                    if (!A.isEnded) {
                      S = false;
                    }
                  }
                }
              } catch (b) {
                var M = {
                  error: b
                };
                Q = M;
              } finally {
                try {
                  if (f && !f.done && (N = z.return)) {
                    N.call(z);
                  }
                } finally {
                  if (Q) {
                    throw Q.error;
                  }
                }
              }
              if (S) {
                this.isEnded = true;
                this.abortRunScroller = undefined;
                var E = this.callbacks.onSlotStateEnd;
                if (E) {
                  E(this.slotState);
                }
              }
            }
          };
          C.prototype.init = function (u, c) {
            this.slotViews = u;
            this.callbacks = c;
            this.bindedRunScrollerAtIndex = this.runScrollerAtIndex.bind(this);
          };
          C.prototype.scrollerAtIndex = function (u) {
            return this.scrollers[u];
          };
          C.prototype.indexOfScroller = function (u) {
            return this.scrollers.indexOf(u);
          };
          C.prototype.getSlotState = function () {
            return this.slotState;
          };
          C.prototype.setSlotState = function (u) {
            if (this.enabledInHierarchy) {
              this.pendingSlotState = undefined;
              var c = this.slotState;
              if (c !== u) {
                this.onStateChange(u, c);
              }
            } else {
              this.pendingSlotState = u;
            }
          };
          C.prototype.endCurrentState = function () {
            var u;
            var c;
            var p = this.abortRunScroller;
            if (p) {
              this.abortRunScroller = undefined;
              p();
            }
            try {
              for (var j = __values(this.scrollers), l = j.next(); !l.done; l = j.next()) {
                var G = l.value;
                if (G) {
                  G.end();
                }
              }
            } catch (Q) {
              var V = {
                error: Q
              };
              u = V;
            } finally {
              try {
                if (l && !l.done && (c = j.return)) {
                  c.call(j);
                }
              } finally {
                if (u) {
                  throw u.error;
                }
              }
            }
          };
          C.prototype.onStateChange = function (u, p) {
            var j = this.slotViews;
            var G = this.scrollers;
            var V = this.callbacks;
            if (V.willChangeSlotState) {
              V.willChangeSlotState(u, p);
            }
            var Q = this.abortRunScroller;
            if (Q) {
              this.abortRunScroller = undefined;
              Q();
            }
            for (var N = 0, Y = j.length; N < Y; N++) {
              var W = G[N];
              var q = V.getScroller(N, j[N], u, p, W);
              G[N] = q;
              if (W) {
                if (!W.isEnded) {
                  W.end();
                }
                if (V.releaseScroller) {
                  V.releaseScroller(N, W);
                }
              }
              if (q) {
                q.reset();
                this.isEnded = false;
              }
            }
            this.slotState = u;
            if (V.didChangeSlotState) {
              V.didChangeSlotState(u, p);
            }
            this.abortRunScroller = V.runScroller(u, this.bindedRunScrollerAtIndex);
          };
          C.prototype.runScrollerAtIndex = function (u) {
            var c = this.scrollers[u];
            if (c) {
              c.run();
            }
          };
          __decorate([x.automationDec({
            func: T.onStateChange
          })], C.prototype, "onStateChange", null);
          return __decorate([L], C);
        }(cc.Component);
        K.default = D;
        cc._RF.pop();
      }
    }, {
      AutomationDecorator: "AutomationDecorator",
      "SlotScrollerController.spec": "SlotScrollerController.spec"
    }],
    SlotStateMachine: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "f1d53JqS5hGVbtNCz0JAnwN", "SlotStateMachine")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        K.StopStyle = K.SlotStates = undefined;
        var T;
        var x;
        var L = I("Utils");
        (function (k) {
          k[k.SPINNING = 0] = "SPINNING";
          k[k.STOPPING = 1] = "STOPPING";
          k[k.STOPPED = 2] = "STOPPED";
        })(T = K.SlotStates ||= {});
        (function (k) {
          k[k.NORMAL = 0] = "NORMAL";
          k[k.FAST = 1] = "FAST";
        })(x = K.StopStyle ||= {});
        var D = function () {
          function k() {
            this._state = T.STOPPED;
            this._stopStyle = x.NORMAL;
            this._minimumSpinningTimeReached = false;
            this._regularSpinningTimeReached = false;
            this._unscheduleRegularSpinning = undefined;
            this._stopRequestCallback = undefined;
          }
          k.prototype.getState = function () {
            return this._state;
          };
          k.prototype.getStopStyle = function () {
            return this._stopStyle;
          };
          k.prototype.spin = function (C, u) {
            if (this._state === T.STOPPED) {
              this._state = T.SPINNING;
              L.delayCallback(C)(this._minimumSpinTimeOut.bind(this));
              this._unscheduleRegularSpinning = L.delayCallback(u)(this._regularSpinTimeOut.bind(this));
            }
          };
          k.prototype.markFastStop = function () {
            if (this._state === T.SPINNING) {
              this._stopStyle = x.FAST;
            }
          };
          k.prototype.unmarkFastStop = function () {
            if (this._stopStyle === x.FAST && this._state === T.SPINNING) {
              this._stopStyle = x.NORMAL;
            }
          };
          k.prototype.fastStop = function (C) {
            if (this._state === T.SPINNING || this._state === T.STOPPING) {
              this._stopStyle = x.FAST;
              this._state = T.STOPPING;
              this._stopRequestCallback = C;
              if (this._minimumSpinningTimeReached) {
                this._fastStop();
              }
            }
          };
          k.prototype.stop = function (C) {
            if (this._state === T.SPINNING) {
              if (this._stopStyle === x.FAST) {
                return;
              }
              this._state = T.STOPPING;
              this._stopRequestCallback = C;
              if (this._regularSpinningTimeReached) {
                this._stop();
              }
            }
          };
          k.prototype.stopped = function () {
            this._state = T.STOPPED;
            this._reset();
          };
          k.prototype._minimumSpinTimeOut = function () {
            this._minimumSpinningTimeReached = true;
            if (this._state === T.STOPPING && this._stopStyle === x.FAST) {
              this._fastStop();
            }
          };
          k.prototype._regularSpinTimeOut = function () {
            this._regularSpinningTimeReached = true;
            if (this._state === T.STOPPING && this._stopStyle === x.NORMAL) {
              this._stop();
            }
          };
          k.prototype._fastStop = function () {
            var C = this._unscheduleRegularSpinning;
            this._unscheduleRegularSpinning = undefined;
            if (C) {
              C();
            }
            this._stop();
          };
          k.prototype._stop = function () {
            var C = this._stopRequestCallback;
            this._stopRequestCallback = undefined;
            if (C) {
              C();
            }
          };
          k.prototype._reset = function () {
            this._stopStyle = x.NORMAL;
            this._minimumSpinningTimeReached = false;
            this._regularSpinningTimeReached = false;
            this._stopRequestCallback = undefined;
            this._unscheduleRegularSpinning = undefined;
          };
          return k;
        }();
        K.default = D;
        cc._RF.pop();
      }
    }, {
      Utils: "Utils"
    }],
    SlotSymbol: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "95c9eiMihhJPZX0QzA3D4uZ", "SlotSymbol")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("BVFramework");
        var x = cc._decorator.ccclass;
        var L = function (D) {
          function k() {
            var C = D !== null && D.apply(this, arguments) || this;
            C.symbolRow = 1;
            C.symbolColumn = 1;
            C._enableEvent = true;
            C._onLoaded = false;
            return C;
          }
          __extends(k, D);
          Object.defineProperty(k.prototype, "visible", {
            get: function () {
              return this.node.active;
            },
            set: function (C) {
              this.node.active = C;
            },
            enumerable: false,
            configurable: true
          });
          k.prototype.onLoad = function () {
            if (this._enableEvent) {
              T.getGameContext().emit("Game.SymbolCreated", this);
              this._onLoaded = true;
            }
          };
          k.prototype.unuse = function () {
            this.symbolRow = 1;
            this.symbolColumn = 1;
            if (this._enableEvent && this._onLoaded) {
              T.getGameContext().emit("Game.SymbolRemoved", this);
            }
          };
          k.prototype.reuse = function () {
            if (this._enableEvent && this._onLoaded) {
              T.getGameContext().emit("Game.SymbolCreated", this);
            }
          };
          k.prototype.onDestroy = function () {
            if (this._enableEvent && this._onLoaded) {
              T.getGameContext().emit("Game.SymbolRemoved", this);
            }
          };
          k.prototype.enableEvent = function (C) {
            this._enableEvent = C;
          };
          return __decorate([x], k);
        }(cc.Component);
        K.default = L;
        cc._RF.pop();
      }
    }, {
      BVFramework: "BVFramework"
    }],
    SlotSystemModel: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "b8e48q3OlREgpqZ/fqigt7Z", "SlotSystemModel")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("SystemModel");
        var x = I("WinThresholdsModel");
        var L = function (D) {
          function k() {
            return D !== null && D.apply(this, arguments) || this;
          }
          __extends(k, D);
          k.prototype.updateGameInfo = function (C) {
            var u = C.cs;
            var c = C.ml;
            var p = C.mxl;
            var j = C.fbbm;
            var l = C.wt;
            this._betSizeList = u || [];
            this._betLevelList = c || [];
            this._maxLineNumber = p;
            this._featureBuyBetMultiplier = j;
            this._winThresholds = l ? new x.WinThresholdsModel(l) : undefined;
          };
          Object.defineProperty(k.prototype, "betLevelList", {
            get: function () {
              return this._betLevelList;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(k.prototype, "betSizeList", {
            get: function () {
              return this._betSizeList;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(k.prototype, "maxLineNumber", {
            get: function () {
              return this._maxLineNumber;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(k.prototype, "featureBuyBetMultiplier", {
            get: function () {
              return this._featureBuyBetMultiplier;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(k.prototype, "winThresholds", {
            get: function () {
              return this._winThresholds;
            },
            enumerable: false,
            configurable: true
          });
          return k;
        }(T.default);
        K.default = L;
        cc._RF.pop();
      }
    }, {
      SystemModel: "SystemModel",
      WinThresholdsModel: "WinThresholdsModel"
    }],
    SlotTintController: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "ed845gXmbVDfa98BSsedOoI", "SlotTintController")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("Utils");
        var x = cc._decorator;
        var L = x.ccclass;
        var D = x.property;
        var k = function (C) {
          function u() {
            var c = C !== null && C.apply(this, arguments) || this;
            c.darkSideNodes = [];
            c.darkReelNodes = [];
            c.overlayHolder = undefined;
            c._overlaySlotItems = [];
            return c;
          }
          __extends(u, C);
          u.prototype.enableDarkReel = function (c = [], p = true) {
            this.darkSideNodes.forEach(function (j) {
              j.stopAllActions();
              if (p && j.opacity !== 128) {
                j.runAction(cc.fadeTo(0.2, 128));
              } else {
                j.opacity = 128;
              }
            });
            this.darkReelNodes.forEach(function (j, l) {
              var G = c.includes(l) ? 0 : 128;
              j.stopAllActions();
              if (p && j.opacity !== G) {
                j.runAction(cc.fadeTo(0.2, G));
              } else {
                j.opacity = G;
              }
            });
          };
          u.prototype.enableFullDarkReel = function (c = true) {
            this.enableDarkReel([], c);
          };
          u.prototype.disableDarkMode = function (c, p) {
            var j = this;
            if (c === undefined) {
              c = true;
            }
            function l() {
              j.darkSideNodes.forEach(function (G) {
                G.stopAllActions();
                G.opacity = 0;
              });
              j.darkReelNodes.forEach(function (G) {
                G.stopAllActions();
                G.opacity = 0;
              });
              if (p) {
                p();
              }
            }
            if (c) {
              this.darkSideNodes.forEach(function (G) {
                G.stopAllActions();
                G.runAction(cc.fadeOut(0.2));
              });
              this.darkReelNodes.forEach(function (G) {
                G.stopAllActions();
                G.runAction(cc.fadeOut(0.2));
              });
              T.delayCallback(0.2)(l);
            } else {
              l();
            }
          };
          u.prototype.addOverlaySlotItem = function (c) {
            this._overlaySlotItems.push(c);
            T.transferToParent(c.scaleHolder, this.overlayHolder);
          };
          u.prototype.removeOverlaySlotItem = function () {
            var c = this._overlaySlotItems;
            if (c.length) {
              this._overlaySlotItems = [];
              c.forEach(function (p) {
                T.transferToParent(p.scaleHolder, p.node);
                p.resetHolderPosition();
              });
            }
          };
          __decorate([D({
            tooltip: false,
            type: [cc.Node]
          })], u.prototype, "darkSideNodes", undefined);
          __decorate([D([cc.Node])], u.prototype, "darkReelNodes", undefined);
          __decorate([D(cc.Node)], u.prototype, "overlayHolder", undefined);
          return __decorate([L], u);
        }(cc.Component);
        K.default = k;
        cc._RF.pop();
      }
    }, {
      Utils: "Utils"
    }],
    SlotTransactionModel: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "d5629sKgMRK16ZrOMxnkzm9", "SlotTransactionModel")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("WinValuesModel");
        var x = I("WinLinesModel");
        var L = I("BetRepository");
        var D = function (k) {
          function C() {
            return k !== null && k.apply(this, arguments) || this;
          }
          var u = {
            get: function () {
              return this._winLines;
            },
            enumerable: false,
            configurable: true
          };
          var c = {
            get: function () {
              return this._winValues;
            },
            enumerable: false,
            configurable: true
          };
          __extends(C, k);
          Object.defineProperty(C.prototype, "winLines", u);
          Object.defineProperty(C.prototype, "winValues", c);
          Object.defineProperty(C.prototype, "betLevelValue", {
            get: function () {
              return this._betRepository.selectedBetLevelValue;
            },
            set: function (p) {
              this._betRepository.selectedBetLevelValue = p;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(C.prototype, "betSizeValue", {
            get: function () {
              return this._betRepository.selectedBetSizeValue;
            },
            set: function (p) {
              this._betRepository.selectedBetSizeValue = p;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(C.prototype, "reels", {
            get: function () {
              return this._reels;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(C.prototype, "originalReels", {
            get: function () {
              return this._originalReels;
            },
            enumerable: false,
            configurable: true
          });
          C.prototype.updateTransactionInfo = function (p) {
            var j = p.wp;
            var G = p.lw;
            var V = p.ml;
            var Q = p.cs;
            var N = p.orl;
            var Y = p.rl;
            this._winLines = j ? new x.WinLinesModel(j) : undefined;
            this._winValues = G ? new T.WinValuesModel(G) : undefined;
            this._betRepository ||= new L.BetRepository(V, Q);
            this._betRepository.updateRemoteBets(V, Q);
            this._reels = Y;
            this._originalReels = N;
            this.updateSlotGameTransactionInfo(p);
          };
          return C;
        }(I("TransactionModel").default);
        K.default = D;
        cc._RF.pop();
      }
    }, {
      BetRepository: "BetRepository",
      TransactionModel: "TransactionModel",
      WinLinesModel: "WinLinesModel",
      WinValuesModel: "WinValuesModel"
    }],
    SlotView: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "dd04eu7yQpIx4UwS/QtQOjh", "SlotView")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        K.SlotAnchor = undefined;
        var T;
        var x = cc._decorator.ccclass;
        (function (D) {
          D[D.BOTTOM = -1] = "BOTTOM";
          D[D.MIDDLE = 0] = "MIDDLE";
          D[D.TOP = 1] = "TOP";
        })(T = K.SlotAnchor ||= {});
        var L = function () {
          function D(k, C = 0) {
            this.functionalRow = 0;
            this.symbolSize = undefined;
            this.viewHeight = 0;
            this.holder = undefined;
            this.offsetX = 0;
            this.sortBottomItemToFront = undefined;
            this.slotAnchor = T.MIDDLE;
            this.topIndex = 0;
            this.bottomIndex = 0;
            this.accumulatedPositionY = 0;
            this.slotItems = [];
            this.isDirty = true;
            this.bottomSlotIndex = undefined;
            this.holder = k;
            this.offsetX = C;
            this.viewHeight = k.height;
            k.on(cc.Node.EventType.SIZE_CHANGED, this.onSizeChanged, this);
          }
          D.prototype.init = function (k) {
            this.functionalRow = k.functionalRow;
            this.symbolSize = k.symbolSize;
            this.getItem = k.getItem;
            this.releaseItem = k.releaseItem;
            this.sortBottomItemToFront = k.sortBottomItemToFront;
            this.reloadItemsToIndex(0);
          };
          D.prototype.getFunctionalItems = function () {
            var k;
            var C;
            var u = this.slotItems;
            for (var p = u.length, j = this.symbolSize.height * 0.5, G = this.functionalRow * j, V = 0; V < p; V++) {
              var Q = (N = u[V]).node.y - N.symbolRow * j;
              if (Q < G) {
                k = G - Q >= j ? V : V + 1;
                break;
              }
            }
            for (V = p - 1; V >= 0; V--) {
              var N;
              var Y = (N = u[V]).node.y + N.symbolRow * j;
              if (Y > -G) {
                C = Y + G > j ? V : V - 1;
                break;
              }
            }
            return u.slice(k, C + 1);
          };
          D.prototype.getVisibleItems = function () {
            return this.slotItems;
          };
          D.prototype.getAccumulatedPositionY = function () {
            return this.accumulatedPositionY;
          };
          D.prototype.getItemAtIndex = function (k) {
            var C;
            var u;
            if (this.isIndexVisible(k)) {
              try {
                for (var c = __values(this.slotItems), p = c.next(); !p.done; p = c.next()) {
                  var j = p.value;
                  if (j.positionIndex <= k) {
                    return j;
                  }
                }
              } catch (G) {
                var l = {
                  error: G
                };
                C = l;
              } finally {
                try {
                  if (p && !p.done && (u = c.return)) {
                    u.call(c);
                  }
                } finally {
                  if (C) {
                    throw C.error;
                  }
                }
              }
            }
          };
          D.prototype.getNextTopIndex = function (k) {
            return Math.max(this.topIndex + 1, this.getBottomSlotIndex() + this.functionalRow + k);
          };
          D.prototype.getNextBottomIndex = function (k) {
            return Math.min(this.bottomIndex - 1, this.getBottomSlotIndex() - k - 1);
          };
          D.prototype.getDistanceToIndex = function (k) {
            var C = this.symbolSize.height;
            var u = this.getBottomSlotIndex();
            var c = this.getItemAtIndex(u);
            var p = (u - c.positionIndex - (c.symbolRow - 1) / 2) * C;
            var j = c.node.y + p;
            return (u - k) * C + ((1 - this.functionalRow) * 0.5 * C - j);
          };
          D.prototype.getAccumulatedPositionAtIndex = function (k) {
            return this.symbolSize.height * -k;
          };
          D.prototype.getOffsetX = function () {
            return this.offsetX;
          };
          D.prototype.isIndexVisible = function (k) {
            return k >= this.bottomIndex && k <= this.topIndex;
          };
          D.prototype.setFunctionalRow = function (k) {
            this.functionalRow = k;
            this.isDirty = true;
          };
          D.prototype.setSlotAnchor = function (k) {
            this.slotAnchor = k;
          };
          D.prototype.changePositionY = function (k) {
            this.accumulatedPositionY += k;
            var C = this.slotItems;
            for (var u = 0, c = C.length; u < c; u++) {
              C[u].node.y += k;
            }
            this.reviseVisibleItem();
          };
          D.prototype.resetPositionIndex = function () {
            var k = this.slotItems;
            var C = this.getBottomSlotIndex();
            k.forEach(function (u) {
              return u.positionIndex -= C;
            });
            this.topIndex -= C;
            this.bottomIndex -= C;
            this.accumulatedPositionY += C * this.symbolSize.height;
            this.isDirty = true;
          };
          D.prototype.scrollTo = function (k) {
            var C = this.getItemAtIndex(k);
            if (C) {
              var u = this.symbolSize.height;
              var c = (C.symbolRow - this.functionalRow) * 0.5 * u;
              var p = (k - C.positionIndex) * u;
              this.changePositionY(c - C.node.y - p);
            } else {
              this.reloadItemsToIndex(k);
            }
          };
          D.prototype.reloadItems = function (k = true) {
            if (k) {
              this.reloadItemsToIndex(0);
            } else {
              this.reloadItemsToIndex(this.getBottomSlotIndex());
            }
          };
          D.prototype.onSizeChanged = function () {
            var k = this.holder.height;
            if (this.viewHeight !== k) {
              var C = this.viewHeight;
              this.viewHeight = k;
              var u = this.slotAnchor;
              if (u) {
                var c = k - C;
                this.changePositionY(u * c / 2);
              } else {
                this.reviseVisibleItem();
              }
            }
          };
          D.prototype.reloadItemsToIndex = function (k) {
            var C = this;
            var u = this.slotItems;
            var c = this.symbolSize;
            if (u.length) {
              u.forEach(function (G) {
                return C.releaseItem(C, G);
              });
              u.length = 0;
            }
            var p = u[0] = this.getItem(this, k);
            var j = p.positionIndex;
            var l = p.node;
            l.parent = this.holder;
            l.y = ((p.symbolRow - this.functionalRow) / 2 + j) * c.height;
            l.x = (p.symbolColumn - 1) / 2 * c.width + this.offsetX;
            this.bottomIndex = j;
            this.topIndex = j + p.symbolRow - 1;
            this.accumulatedPositionY = -k * c.height;
            this.reviseVisibleItem();
          };
          D.prototype.reviseVisibleItem = function () {
            var k = this.slotItems;
            var C = this.symbolSize.height / 2;
            var u = this.viewHeight / 2 - 0.000005;
            var c = k[0];
            var p = k[k.length - 1];
            var j = false;
            if (c.node.y + c.symbolRow * C < u) {
              do {
                this.addItemAtTop();
                c = k[0];
              } while (c.node.y + c.symbolRow * C < u);
            } else if (c.node.y - c.symbolRow * C > u) {
              j = true;
            }
            if (p.node.y - p.symbolRow * C > -u) {
              do {
                this.addItemAtBottom();
                p = k[k.length - 1];
              } while (p.node.y - p.symbolRow * C > -u);
            } else if (p.node.y + p.symbolRow * C < -u) {
              do {
                this.removeItemAtBottom();
                p = k[k.length - 1];
              } while (p.node.y + p.symbolRow * C < -u);
            }
            if (j) {
              do {
                this.removeItemAtTop();
                c = k[0];
              } while (c.node.y - c.symbolRow * C > u);
            }
            this.isDirty = true;
          };
          D.prototype.addItemAtTop = function () {
            var k = this.symbolSize;
            var C = this.slotItems;
            var u = C[0];
            var c = this.topIndex + 1;
            var p = this.getItem(this, c);
            var j = p.node;
            j.parent = this.holder;
            j.y = u.node.y + (u.symbolRow + p.symbolRow) / 2 * k.height;
            j.x = (p.symbolColumn - 1) / 2 * k.width + this.offsetX;
            C.unshift(p);
            p.positionIndex = c;
            this.topIndex += p.symbolRow;
            if (this.sortBottomItemToFront) {
              p.setZIndex(this.getBottomSlotIndex() - p.positionIndex);
            }
          };
          D.prototype.addItemAtBottom = function () {
            var k = this.symbolSize;
            var C = this.slotItems;
            var u = C[C.length - 1];
            var c = this.bottomIndex - 1;
            var p = this.getItem(this, c);
            var j = p.node;
            j.parent = this.holder;
            j.y = u.node.y - (u.symbolRow + p.symbolRow) / 2 * k.height;
            j.x = (p.symbolColumn - 1) / 2 * k.width + this.offsetX;
            C.push(p);
            p.positionIndex = this.bottomIndex -= p.symbolRow;
            if (this.sortBottomItemToFront) {
              var G = this.getBottomSlotIndex();
              for (var V = 0, Q = C.length; V < Q; V++) {
                C[V].setZIndex(G - C[V].positionIndex);
              }
            }
          };
          D.prototype.removeItemAtTop = function () {
            var k = this.slotItems.shift();
            k.node.parent = undefined;
            this.topIndex -= k.symbolRow;
            this.releaseItem(this, k);
          };
          D.prototype.removeItemAtBottom = function () {
            var k = this.slotItems;
            var C = k.pop();
            C.node.parent = undefined;
            this.bottomIndex += C.symbolRow;
            this.releaseItem(this, C);
            if (this.sortBottomItemToFront) {
              var u = this.getBottomSlotIndex();
              for (var c = 0, p = k.length; c < p; c++) {
                k[c].setZIndex(u - k[c].positionIndex);
              }
            }
          };
          D.prototype.getBottomSlotIndex = function () {
            if (!this.isDirty) {
              return this.bottomSlotIndex;
            }
            this.isDirty = false;
            var k = this.slotItems;
            var C = this.symbolSize.height * 0.5;
            var u = (1 - this.functionalRow) * C;
            for (var c = k.length - 1; c >= 0; c--) {
              var p = k[c];
              var j = p.node.y + p.symbolRow * C;
              if (j > u) {
                var l = Math.ceil((j - u) / this.symbolSize.height);
                return this.bottomSlotIndex = p.positionIndex + p.symbolRow - l;
              }
            }
            return -1;
          };
          return __decorate([x], D);
        }();
        K.default = L;
        cc._RF.pop();
      }
    }, {}],
    SlowDropEffectController: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "3b81drg5V9HLJ/5QDZf74Yu", "SlowDropEffectController")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("NodePoolHandler");
        var x = I("GameConstant");
        var L = I("SimpleAnimationController");
        var D = I("SlowDropTopItemController");
        var k = cc._decorator;
        var C = k.ccclass;
        var j = k.property;
        var G = [370, 410, 450, 450, 410, 370];
        var V = function (Q) {
          function N() {
            var Y = Q !== null && Q.apply(this, arguments) || this;
            Y.sdVfxNodeB = undefined;
            Y.sdVfxSpriteB = undefined;
            Y.sdVfxSpriteC = undefined;
            Y.sdVfxCAnimationController = undefined;
            Y.topVfxItem = undefined;
            Y.sdVfxSpriteFramesB = [];
            Y.sdVfxSpriteFramesC = [];
            Y._slowDropEffectHolder = undefined;
            Y._resetSlowDropItemCallback = undefined;
            Y._slowDropTopItemControllerList = [];
            return Y;
          }
          __extends(N, Q);
          N.prototype.init = function (Y, W) {
            T.nodePoolHandler.registerReusableItem(x.NodePoolName.SlowDropEffectItem, this.topVfxItem, D.default, 6);
            this._slowDropEffectHolder = Y;
            this.sdVfxSpriteC.node.parent = this._slowDropEffectHolder;
            this._resetSlowDropItemCallback = W;
          };
          N.prototype.switchUI = function (Y) {
            switch (Y) {
              case x.TransitionState.FREE_SPIN:
              case x.TransitionState.FREE_SPIN_RESPIN:
                this.sdVfxNodeB.setPosition(0, 275);
                this.sdVfxSpriteB.spriteFrame = this.sdVfxSpriteFramesB[1];
                this.sdVfxSpriteC.spriteFrame = this.sdVfxSpriteFramesC[1];
                break;
              case x.TransitionState.NORMAL:
              case x.TransitionState.RESPIN:
              default:
                this.sdVfxNodeB.setPosition(0, 415);
                this.sdVfxSpriteB.spriteFrame = this.sdVfxSpriteFramesB[0];
                this.sdVfxSpriteC.spriteFrame = this.sdVfxSpriteFramesC[0];
            }
          };
          N.prototype.show = function (Y) {
            this._createSlowDropEfx(Y);
            this.sdVfxNodeB.active = true;
            this.sdVfxNodeB.stopAllActions();
            this.sdVfxNodeB.runAction(cc.fadeIn(0.3));
            this.sdVfxCAnimationController.node.active = true;
            this.sdVfxCAnimationController.play("anim_slow_drop_vfx_c_loop");
            this._slowDropTopItemControllerList.forEach(function (W) {
              W.show();
            });
          };
          N.prototype._createSlowDropEfx = function (Y) {
            var W = this;
            Y.forEach(function (q) {
              if (!Y.includes("" + q)) {
                var S = T.nodePoolHandler.dequeueReusableItem(x.NodePoolName.SlowDropEffectItem);
                var z = S.getComponent(D.default);
                var f = q * 180 - 450;
                S.setPosition(f, G[q]);
                W._slowDropTopItemControllerList.push(z);
                S.parent = W._slowDropEffectHolder;
              }
            });
          };
          N.prototype.hide = function () {
            this.sdVfxNodeB.stopAllActions();
            this.sdVfxNodeB.runAction(cc.fadeOut(0.5));
            this.sdVfxCAnimationController.play("anim_slow_drop_vfx_c_hide", this._reset.bind(this));
            this._slowDropTopItemControllerList.forEach(function (Y) {
              Y.hide();
            });
          };
          N.prototype._reset = function () {
            this.sdVfxNodeB.active = false;
            this.sdVfxNodeB.opacity = 0;
            this.sdVfxCAnimationController.node.active = false;
            this.sdVfxCAnimationController.node.opacity = 0;
            this.sdVfxCAnimationController.stop();
            this._slowDropTopItemControllerList.forEach(function (W) {
              W.reset();
              T.nodePoolHandler.enqueueReusableItem(W.node, x.NodePoolName.SlowDropEffectItem);
            });
            var Y = this._resetSlowDropItemCallback;
            if (Y) {
              Y();
            }
            this._slowDropTopItemControllerList = [];
          };
          __decorate([j(cc.Node)], N.prototype, "sdVfxNodeB", undefined);
          __decorate([j(cc.Sprite)], N.prototype, "sdVfxSpriteB", undefined);
          __decorate([j(cc.Sprite)], N.prototype, "sdVfxSpriteC", undefined);
          __decorate([j(L.default)], N.prototype, "sdVfxCAnimationController", undefined);
          __decorate([j(cc.Prefab)], N.prototype, "topVfxItem", undefined);
          __decorate([j([cc.SpriteFrame])], N.prototype, "sdVfxSpriteFramesB", undefined);
          __decorate([j([cc.SpriteFrame])], N.prototype, "sdVfxSpriteFramesC", undefined);
          return __decorate([C], N);
        }(cc.Component);
        K.default = V;
        cc._RF.pop();
      }
    }, {
      GameConstant: "GameConstant",
      NodePoolHandler: "NodePoolHandler",
      SimpleAnimationController: "SimpleAnimationController",
      SlowDropTopItemController: "SlowDropTopItemController"
    }],
    SlowDropTopItemController: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "c28b1182V1L76OZ4d+S0I1B", "SlowDropTopItemController")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = cc._decorator;
        var x = T.ccclass;
        var L = T.property;
        var D = function (k) {
          function C() {
            var u = k !== null && k.apply(this, arguments) || this;
            u.animation = undefined;
            u.vfxHolder = undefined;
            return u;
          }
          __extends(C, k);
          C.prototype.show = function () {
            this.animation.node.stopAllActions();
            this.vfxHolder.stopAllActions();
            this.vfxHolder.runAction(cc.fadeIn(0.3));
            this.animation.node.runAction(cc.fadeIn(0.3));
            this.animation.play();
          };
          C.prototype.hide = function () {
            var u = this;
            this.animation.node.stopAllActions();
            this.animation.node.runAction(cc.sequence(cc.fadeOut(0.3), cc.callFunc(function () {
              u.animation.stop();
              u.reset();
            })));
            this.vfxHolder.stopAllActions();
            this.vfxHolder.runAction(cc.fadeOut(0.3));
          };
          C.prototype.reset = function () {
            this.vfxHolder.stopAllActions();
            this.vfxHolder.opacity = 0;
            this.animation.node.stopAllActions();
            this.animation.node.opacity = 0;
            this.animation.stop();
          };
          __decorate([L(cc.Animation)], C.prototype, "animation", undefined);
          __decorate([L(cc.Node)], C.prototype, "vfxHolder", undefined);
          return __decorate([x], C);
        }(cc.Component);
        K.default = D;
        cc._RF.pop();
      }
    }, {}],
    SoundButton: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "47f2aqFJBBCiYjiG/SqB5jv", "SoundButton")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("GenericSettingButton");
        var x = cc._decorator;
        var L = x.ccclass;
        var D = x.property;
        var k = function (C) {
          function u() {
            var c = C !== null && C.apply(this, arguments) || this;
            c.sprite = undefined;
            c.soundOn = undefined;
            c.soundOff = undefined;
            c.title = undefined;
            return c;
          }
          __extends(u, C);
          u.prototype.setTitle = function (c) {
            this.title.string = c;
          };
          u.prototype.customSetup = function () {
            var c;
            this.sprite.node.y = 0;
            this.title.node.active = false;
            if ((c = this.circleCollider) !== null && c !== undefined) {
              c.y = 0;
            }
          };
          __decorate([D(cc.Sprite)], u.prototype, "sprite", undefined);
          __decorate([D(cc.SpriteFrame)], u.prototype, "soundOn", undefined);
          __decorate([D(cc.SpriteFrame)], u.prototype, "soundOff", undefined);
          __decorate([D(cc.Label)], u.prototype, "title", undefined);
          return __decorate([L], u);
        }(T.default);
        K.default = k;
        cc._RF.pop();
      }
    }, {
      GenericSettingButton: "GenericSettingButton"
    }],
    SpaceBarInterrupter: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "676cajSckdANomyB/3kyE3c", "SpaceBarInterrupter")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        K.spaceBarInterrupter = undefined;
        var T = I("BVFramework");
        var x = cc._decorator.ccclass;
        var L = new (function (D) {
          function k() {
            var C = D !== null && D.apply(this, arguments) || this;
            C._interrupterArr = [];
            C._isPaused = false;
            C._isUIBlocked = false;
            C._isUIIdle = false;
            C._isReplaying = false;
            return C;
          }
          __extends(k, D);
          k.prototype.init = function (C) {
            var u = this;
            var c = T.getGameContext();
            c.emit("Game.RequestUIIdleState", undefined, function (p) {
              u._isUIIdle = p.response;
              u.subscribeEventInterrupter("default", undefined, u._isUIIdle ? C.spinButtonClickCallback : C.reelClickCallback);
              u._defaultConfig = C;
              c.on("Game.BlockUI", u._inUIBlockedState, u);
              c.on("Game.InUIIdleState", u._inUIIdleState, u);
              u._bindedSpaceBarEvent = u._handleSpaceBarEvent.bind(u);
              cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, u._bindedSpaceBarEvent);
              c.on("Game.SkipEvent", u._onSpaceBarHit, u);
              c.on("Game.RequestReplay", u._replayStarted, u);
              c.on("Game.ReplayQuit", u._replayEnded, u);
            });
          };
          k.prototype._replayStarted = function () {
            this._isReplaying = true;
          };
          k.prototype._replayEnded = function () {
            this._isReplaying = false;
          };
          k.prototype.subscribeEventInterrupter = function (C, u, c) {
            var p = this._interrupterArr;
            for (var j = 0, l = p.length; j < l; j++) {
              if (p[j].event === C) {
                return;
              }
            }
            var G = {
              event: C,
              node: u,
              callback: c
            };
            p.push(G);
          };
          k.prototype.unsubscribeEventInterrupter = function (C) {
            var u = this._interrupterArr;
            for (var c = 0, p = u.length; c < p; c++) {
              if (u[c].event === C) {
                u.splice(c, 1);
                break;
              }
            }
          };
          k.prototype.pause = function () {
            if (this._defaultConfig) {
              if (!this._isPaused) {
                cc.systemEvent.off(cc.SystemEvent.EventType.KEY_DOWN, this._bindedSpaceBarEvent);
                this._isPaused = true;
              }
            }
          };
          k.prototype.resume = function () {
            if (this._defaultConfig && this._isPaused) {
              cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this._bindedSpaceBarEvent);
              this._isPaused = false;
            }
          };
          k.prototype.stop = function () {
            var C = T.getGameContext();
            C.off("Game.InUIIdleState", this._inUIIdleState, this);
            C.off("Game.BlockUI", this._inUIBlockedState, this);
            cc.systemEvent.off(cc.SystemEvent.EventType.KEY_DOWN, this._bindedSpaceBarEvent);
            C.off("Game.SkipEvent", this._onSpaceBarHit, this);
            C.off("Game.RequestReplay", this._replayStarted, this);
            C.off("Game.ReplayQuit", this._replayEnded, this);
            this._defaultConfig = undefined;
            this._bindedSpaceBarEvent = undefined;
            this._interrupterArr.length = 0;
          };
          k.prototype._handleSpaceBarEvent = function (C) {
            if (C.keyCode === cc.macro.KEY.space) {
              this._onSpaceBarHit();
            }
          };
          k.prototype._onSpaceBarHit = function () {
            var C = this._interrupterArr;
            for (var u = C.length - 1; u >= 0; u--) {
              var c = C[u];
              var p = c.node;
              if (!p) {
                if (j = c.callback) {
                  j();
                }
                break;
              }
              if (cc.isValid(p)) {
                if (p.active) {
                  var j;
                  if (j = c.callback) {
                    j();
                  }
                  break;
                }
              } else {
                C.splice(u, 1);
              }
            }
          };
          k.prototype._inUIIdleState = function (C) {
            this._isUIIdle = C.payload;
            this._setDefaultInterrupter();
          };
          k.prototype._inUIBlockedState = function (C) {
            var u = C.payload;
            this._isUIBlocked = typeof u == "boolean" ? u : u.isBlocked;
            this._setDefaultInterrupter();
          };
          k.prototype._setDefaultInterrupter = function () {
            var C = this._isUIBlocked;
            var u = this._isUIIdle;
            var c = this._isReplaying;
            var p = this._interrupterArr[0];
            if (c) {
              p.callback = this._defaultConfig.spinButtonClickCallback;
            } else if (C) {
              p.callback &&= undefined;
            } else {
              var j = this._defaultConfig;
              var l = j.spinButtonClickCallback;
              var G = j.reelClickCallback;
              p.callback = u ? l : G;
            }
          };
          return __decorate([x("SpaceBarInterrupter")], k);
        }(cc.Object))();
        K.spaceBarInterrupter = L;
        cc._RF.pop();
      }
    }, {
      BVFramework: "BVFramework"
    }],
    SpinButtonController: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "43d12n8a1BInJvBu7QtjALE", "SpinButtonController")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        K.SpinButtonMode = K.SpinButtonAnimationState = undefined;
        var T;
        var x;
        var L = I("SettingMenuHelper");
        var D = I("ButtonHitTest");
        var k = I("SlotAnalyticsEnum");
        var C = cc._decorator.ccclass;
        (function (p) {
          p[p.IDLE = 1] = "IDLE";
          p[p.SPINNING = 2] = "SPINNING";
          p[p.STOPPED = 3] = "STOPPED";
        })(T = K.SpinButtonAnimationState ||= {});
        (function (p) {
          p[p.ENABLED = 0] = "ENABLED";
          p[p.DISABLED = 1] = "DISABLED";
          p[p.AUTOSPIN = 2] = "AUTOSPIN";
        })(x = K.SpinButtonMode ||= {});
        var u = function (p) {
          function j() {
            var G = p !== null && p.apply(this, arguments) || this;
            G._mode = x.DISABLED;
            G._resumeState = x.DISABLED;
            G._animationState = T.STOPPED;
            G._isHovered = false;
            G._clickCallback = undefined;
            G._enterAutoSpinCallback = undefined;
            return G;
          }
          __extends(j, p);
          j.prototype.showAutoSpinLook = function () {
            if (this._enterAutoSpinCallback) {
              this._enterAutoSpinCallback();
            }
          };
          Object.defineProperty(j.prototype, "clickCallback", {
            get: function () {
              return this._clickCallback;
            },
            set: function (G) {
              this._clickCallback = G;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(j.prototype, "mode", {
            get: function () {
              return this._mode;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(j.prototype, "isHovered", {
            get: function () {
              return this._isHovered;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(j.prototype, "animationState", {
            get: function () {
              return this._animationState;
            },
            enumerable: false,
            configurable: true
          });
          j.prototype.setOnClickCallback = function (G) {
            this._clickCallback = G;
          };
          j.prototype.clearOnClickCallback = function () {
            this._clickCallback = undefined;
          };
          j.prototype.destroy = function () {
            this._clickCallback = undefined;
            this._enterAutoSpinCallback = undefined;
            this._cleanUps();
            this.node.destroy();
            return p.prototype.destroy.call(this);
          };
          j.prototype._cleanUps = function () {
            this.disableMouseHover();
            if (this.onHideMouseOverEffect) {
              this.onHideMouseOverEffect();
            }
            if (this.onStopAllAnimations) {
              this.onStopAllAnimations();
            }
          };
          j.prototype.init = function () {
            this.enableMouseHover();
            if (this.onInit) {
              this.onInit();
            }
          };
          j.prototype.idle = function () {
            this._animationState = T.IDLE;
            if (this._mode !== x.AUTOSPIN) {
              if (this.onReplaceSpinClearSpriteFrame) {
                this.onReplaceSpinClearSpriteFrame();
              }
              if (this.onShowIdleAnimation) {
                this.onShowIdleAnimation();
              }
              if (this._isHovered) {
                this._showMouseOverEffect();
              }
            }
          };
          j.prototype.spin = function () {
            this._animationState = T.SPINNING;
            if (this._mode !== x.AUTOSPIN) {
              if (this.onReplaceSpinBlurredSpriteFrame) {
                this.onReplaceSpinBlurredSpriteFrame();
              }
              if (this.onShowSpinAnimation) {
                this.onShowSpinAnimation();
              }
            }
          };
          j.prototype.stopSpin = function () {
            this._animationState = T.STOPPED;
            if (this._mode !== x.AUTOSPIN) {
              if (this.onReplaceSpinClearSpriteFrame) {
                this.onReplaceSpinClearSpriteFrame();
              }
              if (this.onShowStopSpinningAnimation) {
                this.onShowStopSpinningAnimation();
              }
            }
          };
          j.prototype.enableButton = function () {
            if (this._mode === x.AUTOSPIN) {
              this._resumeState = x.ENABLED;
            }
            if (this._mode === x.DISABLED) {
              this._mode = x.ENABLED;
              this._resumeState = x.ENABLED;
              if (this.onEnableButton) {
                this.onEnableButton();
              }
            }
          };
          j.prototype.disableButton = function () {
            if (this._mode === x.AUTOSPIN) {
              this._resumeState = x.DISABLED;
            }
            if (this._mode === x.ENABLED) {
              this._mode = x.DISABLED;
              this._resumeState = x.DISABLED;
              if (this.onDisableButton) {
                this.onDisableButton();
              }
            }
          };
          j.prototype.show = function () {
            this.node.active = true;
          };
          j.prototype.hide = function () {
            this.node.active = false;
          };
          j.prototype.isAutoSpin = function () {
            return this._mode === x.AUTOSPIN;
          };
          j.prototype.enterAutoSpinMode = function (G, V) {
            if (this._animationState === T.IDLE && G > 0) {
              this._mode = x.AUTOSPIN;
              this._enterAutoSpinCallback = V;
              this.showAutoSpinLook(G);
            }
          };
          j.prototype.updateAutoSpinCount = function (G) {
            if (this._mode === x.AUTOSPIN && this.onUpdateAutoSpinCount) {
              this.onUpdateAutoSpinCount(G);
            }
          };
          j.prototype.exitAutoSpinMode = function () {
            if (this._mode === x.AUTOSPIN) {
              this._mode = this._resumeState;
              if (this.isHovered) {
                if (this.onPlayMouseOverEffect) {
                  this.onPlayMouseOverEffect();
                }
              } else if (this.onHideMouseOverEffect) {
                this.onHideMouseOverEffect();
              }
              if (this.onExitAutoSpinMode) {
                this.onExitAutoSpinMode();
              }
              switch (this._animationState) {
                case T.IDLE:
                  if (this.onResumeIdle) {
                    this.onResumeIdle();
                  }
                  break;
                case T.SPINNING:
                  if (this.onResumeSpin) {
                    this.onResumeSpin();
                  }
                  break;
                case T.STOPPED:
                  if (this.onResumeStop) {
                    this.onResumeStop();
                  }
              }
              L.settingMenuHelper.stopSpinOptionButtonAnim();
            }
          };
          j.prototype.clickSpinButton = function (G = k.SpinTrigger.CLICK) {
            if (this.node.active === true && this._mode !== x.DISABLED && D.buttonHitTest(this.node)) {
              var V = this._clickCallback;
              if (V) {
                V(G);
              }
            }
          };
          j.prototype.enableMouseHover = function () {
            this.node.on(cc.Node.EventType.MOUSE_ENTER, this.mouseHovered, this);
            this.node.on(cc.Node.EventType.MOUSE_LEAVE, this.mouseLeave, this);
          };
          j.prototype.disableMouseHover = function () {
            this.node.off(cc.Node.EventType.MOUSE_ENTER, this.mouseHovered, this);
            this.node.off(cc.Node.EventType.MOUSE_LEAVE, this.mouseLeave, this);
          };
          j.prototype.mouseHovered = function () {
            this._isHovered = true;
            this._showMouseOverEffect();
          };
          j.prototype.mouseLeave = function () {
            this._isHovered = false;
            if (this.onHideMouseOverEffect) {
              this.onHideMouseOverEffect();
            }
          };
          j.prototype._showMouseOverEffect = function () {
            var G = this._mode;
            var V = this._animationState;
            if ((G === x.AUTOSPIN || G !== x.DISABLED && V !== T.STOPPED) && this.onPlayMouseOverEffect) {
              this.onPlayMouseOverEffect();
            }
          };
          return __decorate([C], j);
        }(cc.Component);
        K.default = u;
        cc._RF.pop();
      }
    }, {
      ButtonHitTest: "ButtonHitTest",
      SettingMenuHelper: "SettingMenuHelper",
      SlotAnalyticsEnum: "SlotAnalyticsEnum"
    }],
    "SpinButtonViewController.spec": [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "a1c10YNRzpMdp+eGGlvRpJW", "SpinButtonViewController.spec")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        K.initSpinButtonNode = K.setSpinButtonInteractivity = undefined;
        K.setSpinButtonInteractivity = function (T) {
          var x = System.get("automation") && System.get("automation").GameData;
          if (x) {
            x.emit("SpinButtonInteractivity", T);
          }
        };
        K.initSpinButtonNode = function (T) {
          var x = System.get("automation") && System.get("automation").GameConfigs;
          if (x) {
            x.initNodeConfig(T.spinButton, "spin_button");
          }
        };
        cc._RF.pop();
      }
    }, {}],
    SpinConfigHandler: [function (R, K, g) {
      'use strict';

      if (!cc._RF.push(K, "636ecG9L2tOfadXZr7kHqve", "SpinConfigHandler")) {
        Object.defineProperty(g, "__esModule", {
          value: true
        });
        g.initSpinConfig = g.featureConfig = undefined;
        var L = {
          minimumSpinningTime: 0,
          regularSpinningTime: 1,
          minimumTurboSpinningTime: 0,
          regularTurboSpinningTime: 1,
          fastStopFeature: false,
          turboSpinFeature: false
        };
        g.featureConfig = L;
        g.initSpinConfig = function (D) {
          var k = D.jurisdictionModel;
          var C = D.minimumSpinningTime;
          var j = D.regularSpinningTime;
          var G = D.minimumTurboSpinningTime;
          var V = D.regularTurboSpinningTime;
          var Q = L;
          var N = k.singlePlayMinDuration;
          var Y = C;
          var W = j;
          var q = G !== undefined ? G : C;
          var S = V !== undefined ? V : j;
          if (N > 0) {
            Y = D.minimumSpinningTimeOffset || 0;
            W = D.regularSpinningTimeOffset || 0;
            q = D.minimumTurboSpinningTimeOffset || 0;
            S = D.regularTurboSpinningTimeOffset || 0;
          }
          Q.minimumSpinningTime = N + Y;
          Q.regularSpinningTime = N + W;
          Q.minimumTurboSpinningTime = N + q;
          Q.regularTurboSpinningTime = N + S;
          Q.turboSpinFeature = k.turboSpinEnable;
          Q.fastStopFeature = k.turboSpinEnable;
          g.featureConfig = Object.freeze(Q);
        };
        cc._RF.pop();
      }
    }, {}],
    SpinOptionsButton: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "3ee68qGxY9G3q+WVKsHebfZ", "SpinOptionsButton")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("GenericSettingButton");
        var x = I("UIAppearanceHelper");
        var L = I("Utils");
        var D = cc._decorator;
        var k = D.ccclass;
        var C = D.property;
        var u = function (p) {
          function j() {
            var G = p !== null && p.apply(this, arguments) || this;
            G.holder = undefined;
            G.autoSpinTurn = undefined;
            G.autoSpinIcon = undefined;
            G.autoSpinIconShadow = undefined;
            G._abortAutoSpinIconAnim = undefined;
            return G;
          }
          __extends(j, p);
          j.prototype.onLoad = function () {
            p.prototype.onLoad.call(this);
            if (this.buttonTheme) {
              var G = x.uiAppearanceHelper.v(this.buttonTheme.domainKey + "." + this.buttonTheme.colorKey + ".normal");
              L.setNodeColorWithOpacity(this.autoSpinTurn, G);
              L.setNodeColorWithOpacity(this.autoSpinIcon, G);
              L.setNodeColorWithOpacity(this.autoSpinIconShadow, G);
            }
          };
          j.prototype.setAutoSpinSprite = function (G) {
            this.iconSprite.getComponent(cc.Sprite).spriteFrame = G;
          };
          j.prototype.playAutoSpinAnim = function () {
            this.stopAutoSpinAnim();
            var G = cc.repeatForever(cc.rotateBy(6, 360));
            this.autoSpinTurn.runAction(G);
            this.autoSpinIconShadow.parent.opacity = 0;
            this._playAutoSpinIconShadowAnim();
          };
          j.prototype.stopAutoSpinAnim = function () {
            var G = this._abortAutoSpinIconAnim;
            this._abortAutoSpinIconAnim = undefined;
            if (G) {
              G();
            }
            this.autoSpinTurn.stopAllActions();
            this.autoSpinIconShadow.parent.stopAllActions();
            this.autoSpinIconShadow.parent.opacity = 0;
            this.autoSpinIconShadow.parent.scale = 1;
          };
          j.prototype.changeButtonPressedColor = function (G) {
            if (G) {
              this.node.runAction(cc.scaleTo(0.05, 0.9));
            } else {
              this.node.runAction(cc.sequence(cc.scaleTo(0.05, 1.1), cc.scaleTo(0.05, 1.05), cc.scaleTo(0.05, 1)));
            }
          };
          j.prototype._playAutoSpinIconShadowAnim = function () {
            var G = this;
            this._abortAutoSpinIconAnim = L.delayCallback(3)(function () {
              G.autoSpinIconShadow.parent.opacity = 180;
              G.autoSpinIconShadow.parent.scale = 1;
              G.autoSpinIconShadow.parent.runAction(cc.sequence(cc.spawn(cc.scaleTo(1.2, 2.2), cc.fadeOut(1.2)), cc.callFunc(function () {
                G._playAutoSpinIconShadowAnim();
              })));
            });
          };
          j.prototype.interactableButtonColor = function (G) {
            if (this.buttonTheme) {
              var V = x.uiAppearanceHelper.v(this.buttonTheme.domainKey + "." + this.buttonTheme.colorKey + ".normal");
              var Q = x.uiAppearanceHelper.v(this.buttonTheme.domainKey + "." + this.buttonTheme.colorKey + ".disabled");
              var N = G ? V : Q;
              this.holder.opacity = N.a;
              L.setNodeColorWithOpacity(this.iconSprite, N);
              L.setNodeColorWithOpacity(this.autoSpinTurn, N);
              L.setNodeColorWithOpacity(this.autoSpinIcon, N);
              L.setNodeColorWithOpacity(this.autoSpinIconShadow, N);
            }
          };
          j.prototype.destroy = function () {
            var G = this._abortAutoSpinIconAnim;
            this._abortAutoSpinIconAnim = undefined;
            if (G) {
              G();
            }
            this.autoSpinTurn.stopAllActions();
            return p.prototype.destroy.call(this);
          };
          __decorate([C(cc.Node)], j.prototype, "holder", undefined);
          __decorate([C(cc.Node)], j.prototype, "autoSpinTurn", undefined);
          __decorate([C(cc.Node)], j.prototype, "autoSpinIcon", undefined);
          __decorate([C(cc.Node)], j.prototype, "autoSpinIconShadow", undefined);
          return __decorate([k], j);
        }(T.default);
        K.default = u;
        cc._RF.pop();
      }
    }, {
      GenericSettingButton: "GenericSettingButton",
      UIAppearanceHelper: "UIAppearanceHelper",
      Utils: "Utils"
    }],
    SubControllerConfig: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "24ea0V+c1hBKJve2dHxdOZ/", "SubControllerConfig")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        K.SubControllers = undefined;
        (function (T) {
          T[T.AUTOSPIN = 0] = "AUTOSPIN";
          T[T.BET = 1] = "BET";
          T[T.USER_SETTING = 2] = "USER_SETTING";
          T[T.HISTORY = 3] = "HISTORY";
          T[T.PAYTABLE = 4] = "PAYTABLE";
          T[T.RULE = 5] = "RULE";
          T[T.WALLET = 6] = "WALLET";
        })(K.SubControllers ||= {});
        cc._RF.pop();
      }
    }, {}],
    SymbolPayoutController: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "7c05ali6OlCEJ+GOnxbYWHT", "SymbolPayoutController")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("SymbolPayoutPanelGenerator");
        var x = I("SinglePayoutModel");
        var L = I("Utils");
        var D = I("PopOutItemHandler");
        var k = cc._decorator;
        var C = k.ccclass;
        var p = k.property;
        var j = function (G) {
          function V() {
            var Q = G !== null && G.apply(this, arguments) || this;
            Q.popOutItem = undefined;
            Q.popOutTint = undefined;
            Q._tintController = [];
            Q._additionalOnClickCallback = undefined;
            Q._additionalOnCancelCallback = undefined;
            Q._popoutItemHandler = new D.default();
            Q._extraInitialzation = undefined;
            Q._singlePayoutModel = new x.default();
            Q._symbolPayoutPanelGenerator = T.symbolPayoutPanelGenerator;
            return Q;
          }
          __extends(V, G);
          V.prototype.init = function (Q) {
            Q.containerNode = Q.containerNode ? Q.containerNode : this.node;
            this._config = Q;
            var N = Q.numberOfTint ? Q.numberOfTint : 1;
            this._overrideSymbolPayoutPanel();
            this._symbolPayoutPanelGenerator.generatePanel(Q);
            if (N > 1) {
              this._tintController = [];
              for (var Y = 0; Y < N; Y++) {
                var W = cc.instantiate(this.popOutTint);
                if (Array.isArray(this._popOutTintHolder)) {
                  this._popOutTintHolder[Y].addChild(W);
                } else {
                  this._popOutTintHolder.addChild(W);
                }
                var q;
                var S = W.getComponent("PopOutTintController");
                q = Array.isArray(this._tintConfig) ? this._tintConfig[Y] : this._tintConfig;
                this._tintController.push(S);
                S.setup(q);
              }
            } else {
              W = cc.instantiate(this.popOutTint);
              this._popOutTintHolder.addChild(W);
              this._tintController = W.getComponent("PopOutTintController");
              this._tintController.setup(this._tintConfig);
            }
            this._popoutItemHandler.init(this.popOutItem, this._popOutDisplayHolder);
            this._singlePayoutModel.payoutData = Q.payoutData;
            if (this._extraInitialzation) {
              this._extraInitialzation(Q);
            }
          };
          V.prototype.resetPanel = function (Q) {
            Q.containerNode = Q.containerNode ? Q.containerNode : this.node;
            this._config = Q;
            this._symbolPayoutPanelGenerator.regeneratePanel(Q);
            this._singlePayoutModel.payoutData = Q.payoutData ? Q.payoutData : this._singlePayoutModel.payoutData;
          };
          V.prototype.setExtraInitialzation = function (Q) {
            this._extraInitialzation = Q;
          };
          V.prototype.setPopOutDisplayHolder = function (Q) {
            this._popOutDisplayHolder = Q;
          };
          V.prototype.setPopOutTintHolder = function (Q) {
            this._popOutTintHolder = Q;
          };
          V.prototype.setReelData = function (Q, N, Y) {
            this._singlePayoutModel.reelData = Q;
            this._singlePayoutModel.extendSymbolData = N;
            this._singlePayoutModel.extendBlockData = Y;
          };
          V.prototype.setAdditionalData = function (Q) {
            this._singlePayoutModel.additionalData = Q;
          };
          V.prototype.setTintConfig = function (Q) {
            this._tintConfig = Q;
          };
          V.prototype.setupButtonEvent = function (Q) {
            var N = this;
            if (Q === undefined) {
              Q = [];
            }
            var Y = this._symbolPayoutPanelGenerator.getButtonControllerList();
            var W = this._symbolPayoutPanelGenerator.getButtonComponentList();
            Y.forEach(function (q, S) {
              if (Q.includes(S)) {
                q.setClickCallback(undefined);
                W[S].clickEvents = [];
              } else {
                var z = N._showPopOutItem.bind(N, S, N._singlePayoutModel.reelData[S], N._singlePayoutModel.payoutData);
                q.setClickCallback(z);
                var f = q.getControllerAndHandlerName();
                var A = f.ControllerName;
                var M = f.HandlerName;
                var E = new cc.Component.EventHandler();
                E.target = q.node;
                E.component = A;
                E.handler = M;
                W[S].clickEvents = [];
                W[S].clickEvents.push(E);
              }
            });
          };
          V.prototype.setAdditionalOnClickCallback = function (Q) {
            this._additionalOnClickCallback = Q;
          };
          V.prototype.setAdditionalOnCancelCallback = function (Q) {
            this._additionalOnCancelCallback = Q;
          };
          V.prototype.clearOnClickCallback = function () {
            this._symbolPayoutPanelGenerator.getButtonControllerList().forEach(function (Q) {
              Q.clearClickCallback();
            });
          };
          V.prototype.enablePanel = function () {
            this.node.active = true;
            this._symbolPayoutPanelGenerator.getButtonComponentList().forEach(function (Q) {
              Q.interactable = true;
            });
          };
          V.prototype.disablePanel = function () {
            this._symbolPayoutPanelGenerator.getButtonComponentList().forEach(function (Q) {
              Q.interactable = false;
            });
            this.node.active = false;
          };
          V.prototype.hidePopOutItem = function (Q) {
            this._hidePopOutItem(Q);
          };
          Object.defineProperty(V.prototype, "buttonList", {
            get: function () {
              return this._symbolPayoutPanelGenerator.getButtonList();
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(V.prototype, "buttonControllerList", {
            get: function () {
              return this._symbolPayoutPanelGenerator.getButtonControllerList();
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(V.prototype, "buttonComponentList", {
            get: function () {
              return this._symbolPayoutPanelGenerator.getButtonComponentList();
            },
            enumerable: false,
            configurable: true
          });
          V.prototype._showPopOutItem = function (Q, N, Y) {
            var W = this;
            this._setPopOutItemCancelCallback(this._hidePopOutItem.bind(this));
            L.spawnCallback(this._showPopOutTint.bind(this, Q, N), this._setupPopOutItem.bind(this, Q, N, Y))(function () {
              W._runAdditionalOnClickCallback();
            });
          };
          V.prototype.setPopOutItemLayout = function (Q, N) {
            var Y;
            Y = N < Math.round(this._config.numberOfColumn / 2) * this._config.numberOfRow;
            var W = Q.parent.convertToWorldSpaceAR(Q.position);
            return {
              isLeftToRight: Y,
              position: this._popOutDisplayHolder.convertToNodeSpaceAR(W)
            };
          };
          V.prototype._setupPopOutItem = function (Q, N, Y, W) {
            var q = this._singlePayoutModel;
            var S = q.extendSymbolData;
            var z = q.extendBlockData;
            var f = q.additionalData;
            if (S) {
              Object.keys(S).forEach(function (h) {
                if (S[h].includes(Q)) {
                  var b = S[h].length;
                  Q = S[h][b - 1];
                }
              });
            }
            var A = this._symbolPayoutPanelGenerator.getButtonList()[Q];
            var M = this.setPopOutItemLayout(A, Q);
            var E = M.isLeftToRight;
            var F = M.position;
            this._popoutItemHandler.runPopoutItemShowCallback(W, Y, Q, N, cc.v2(F), E, S, z, f);
          };
          V.prototype._setPopOutItemCancelCallback = function (Q) {
            this._popoutItemHandler.setCancelCallback(Q);
          };
          V.prototype._showPopOutTint = function (Q, N, Y) {
            function W() {
              if (Y) {
                Y();
              }
            }
            if (Array.isArray(this._tintController)) {
              var q = [];
              this._tintController.forEach(function (S) {
                q.push(S.show.bind(S));
              });
              L.spawnCallback(q)(W);
            } else {
              this._tintController.show(function () {
                W();
              });
            }
          };
          V.prototype._hidePopOutItem = function (Q) {
            this._popoutItemHandler.runPopoutItemHideCallback();
            function N() {
              if (Q) {
                Q();
              }
            }
            if (Array.isArray(this._tintController)) {
              var Y = [];
              this._tintController.forEach(function (W) {
                Y.push(W.hide.bind(W));
              });
              L.spawnCallback(Y)(N);
            } else {
              this._tintController.hide(N);
            }
            this._runAdditionalOnCancelCallback();
          };
          V.prototype._runAdditionalOnClickCallback = function () {
            if (this._additionalOnClickCallback) {
              this._additionalOnClickCallback();
            }
          };
          V.prototype._runAdditionalOnCancelCallback = function () {
            if (this._additionalOnCancelCallback) {
              this._additionalOnCancelCallback();
            }
          };
          V.prototype._overrideSymbolPayoutPanel = function () {
            if (this._config.symbolPayoutPanelGenerator) {
              this._symbolPayoutPanelGenerator = this._config.symbolPayoutPanelGenerator;
            }
          };
          Object.defineProperty(V.prototype, "singlePayoutModel", {
            get: function () {
              return this._singlePayoutModel;
            },
            enumerable: false,
            configurable: true
          });
          __decorate([p(cc.Prefab)], V.prototype, "popOutItem", undefined);
          __decorate([p(cc.Prefab)], V.prototype, "popOutTint", undefined);
          return __decorate([C], V);
        }(cc.Component);
        K.default = j;
        cc._RF.pop();
      }
    }, {
      PopOutItemHandler: "PopOutItemHandler",
      SinglePayoutModel: "SinglePayoutModel",
      SymbolPayoutPanelGenerator: "SymbolPayoutPanelGenerator",
      Utils: "Utils"
    }],
    SymbolPayoutPanelGenerator: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "b4807S7wZxNyKaQIPwkQNfI", "SymbolPayoutPanelGenerator")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        K.regeneratePanel = K.getButtonList = K.getButtonComponentList = K.getButtonControllerList = K.generatePanel = K.symbolPayoutPanelGenerator = undefined;
        var T = I("ButtonController");
        var x = function () {
          function L() {
            this._button = [];
            this._buttonController = [];
            this._buttonComponent = [];
            this._buttonPool = new cc.NodePool();
          }
          L.prototype._setButtonPosition = function (D, k, C, j, G, V, Q) {
            var N = Math.floor(C % Q);
            var Y = Math.floor(C / Q);
            var W = G * (1 - D.anchorY);
            var q = j * D.anchorX;
            var S = W - k.height / 2;
            var z = -(q - k.width / 2);
            var A = S - k.height * N;
            var M = z + k.width * Y;
            k.setPosition(M, A);
          };
          L.prototype.generatePanel = function (D) {
            var k = D.containerNode;
            var C = D.containerSize ? D.containerSize : k.getContentSize();
            var j = C.width;
            var G = C.height;
            k.width = j;
            k.height = G;
            var V = D.numberOfColumn;
            var Q = D.numberOfRow;
            for (var N = D.numberOfButton ? D.numberOfButton : V * Q, Y = j / V, W = G / Q, q = 0; q < N; q++) {
              var z = this._buttonPool.get();
              var A = undefined;
              var M = undefined;
              if (z) {
                A = z.getComponent(T.default);
                M = z.getComponent(cc.Button);
              } else {
                z = new cc.Node("payout_button");
                var E = new cc.Node("background");
                z.addChild(E);
                M = z.addComponent(cc.Button);
                A = z.addComponent(T.default);
                M.target = E;
                z.height = D.buttonHeight ? D.buttonHeight : W;
                z.width = D.buttonWidth ? D.buttonWidth : Y;
                M.transition = cc.Button.Transition.COLOR;
                M.pressedColor = cc.Color.GRAY;
                var F = E.addComponent(cc.Sprite);
                F.sizeMode = cc.Sprite.SizeMode.CUSTOM;
                if (D.buttonBase) {
                  F.spriteFrame = D.buttonBase.spriteFrame;
                }
                E.height = W;
                E.width = Y;
              }
              z.parent = k;
              var b = D.buttonPosition;
              if (b) {
                z.setPosition(b[q]);
              } else {
                this._setButtonPosition(k, z, q, j, G, V, Q);
              }
              this._button.push(z);
              this._buttonController.push(A);
              this._buttonComponent.push(M);
            }
          };
          L.prototype.getButtonList = function () {
            return this._button;
          };
          L.prototype.getButtonControllerList = function () {
            return this._buttonController;
          };
          L.prototype.getButtonComponentList = function () {
            return this._buttonComponent;
          };
          L.prototype.regeneratePanel = function (D) {
            var k = this;
            this._button.forEach(function (C) {
              k._buttonPool.put(C);
            });
            this._button = [];
            this._buttonComponent = [];
            this._buttonController = [];
            this.generatePanel(D);
          };
          return L;
        }();
        K.default = x;
        K.symbolPayoutPanelGenerator = new x();
        K.generatePanel = K.symbolPayoutPanelGenerator.generatePanel.bind(K.symbolPayoutPanelGenerator);
        K.getButtonControllerList = K.symbolPayoutPanelGenerator.getButtonControllerList.bind(K.symbolPayoutPanelGenerator);
        K.getButtonComponentList = K.symbolPayoutPanelGenerator.getButtonComponentList.bind(K.symbolPayoutPanelGenerator);
        K.getButtonList = K.symbolPayoutPanelGenerator.getButtonList.bind(K.symbolPayoutPanelGenerator);
        K.regeneratePanel = K.symbolPayoutPanelGenerator.regeneratePanel.bind(K.symbolPayoutPanelGenerator);
        cc._RF.pop();
      }
    }, {
      ButtonController: "ButtonController"
    }],
    SystemFeatureHandler: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "c9080q97lVM/pqPyA6WOfJi", "SystemFeatureHandler")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        K.checkSpinValidity = K.handleSystemEvent = K.getReevaluateBet = undefined;
        var T = I("SlotAnalyticsEnum");
        var x = I("Utils");
        var L = I("GameEventHandler");
        K.getReevaluateBet = k;
        K.handleSystemEvent = function (C) {
          var u = C.autoSpinCount;
          var c = C.exitAutoSpinHandler;
          var p = C.walletHelper;
          var j = C.settingMenuHelper;
          var G = C.betChangedHandler;
          x.sequenceCallback(D(p, u, c), k(j, G))(C.callback);
        };
        K.checkSpinValidity = function (C) {
          var u = C.callback;
          var c = C.walletHelper;
          var p = C.getCostPerSpinFunction;
          var j = C.dataSource;
          var l = p();
          var G = {
            totalBet: l
          };
          L.emitRequestPlayEvent(G, function (V) {
            if (V) {
              if (c.isFreeGameMode() && c.hasFreeGame()) {
                u(T.SpinCredits.FREE_GAME);
              } else {
                u(T.SpinCredits.CASH);
              }
            } else if (l > j.playerModel.balance) {
              u(T.SpinCredits.INSUFFICIENT);
            } else {
              u(T.SpinCredits.BET_INVALID);
            }
          });
        };
        cc._RF.pop();
      }
      function D(C, u, c) {
        return function (p) {
          if (C.isWalletCompleted() && u > 0 && c) {
            c();
          }
          if (p) {
            p();
          }
        };
      }
      function k(C, u) {
        return function (c) {
          if (C.reevaluateBet()) {
            if (u) {
              u(c);
            } else {
              C.updateBetValues();
              if (c) {
                c();
              }
            }
          } else if (c) {
            c();
          }
        };
      }
    }, {
      GameEventHandler: "GameEventHandler",
      SlotAnalyticsEnum: "SlotAnalyticsEnum",
      Utils: "Utils"
    }],
    SystemModel: [function (Z, I) {
      'use strict';

      if (!cc._RF.push(I, "daa8eblXeJHyaG5qwoh+Te0", "SystemModel")) {
        var R = System.get("bvframework").SystemModel;
        I.exports.default = R;
        I.exports.__esModule = true;
        cc._RF.pop();
      }
    }, {}],
    TabBarController: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "b2f70mOAvdOxZtKjfDu/lHM", "TabBarController")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("TabBar");
        var x = I("TabBarItem");
        var L = I("TransitionContext");
        var D = I("ViewController");
        var k = cc._decorator;
        var C = k.ccclass;
        var p = k.property;
        var j = function (G) {
          function V() {
            var Q = G !== null && G.apply(this, arguments) || this;
            Q.content = undefined;
            Q.tabBar = undefined;
            Q.bottomNode = undefined;
            Q.tabBarItemPrefab = undefined;
            Q._tabBarItems = [];
            Q._controllers = [];
            Q._selectedController = undefined;
            Q._selectedIndex = 0;
            Q._isOnTransistion = false;
            return Q;
          }
          __extends(V, G);
          V.prototype.onLoad = function () {
            this._resizeContent();
            this._resizeTabBar();
            this._resizeBottomPlaceHolder();
            this.node.on("size-changed", this._resize, this);
          };
          V.prototype.onEnable = function () {
            var Q = this._selectedController;
            if (Q) {
              Q.enabled = true;
            }
          };
          V.prototype.onDisable = function () {
            var Q = this._selectedController;
            if (Q) {
              Q.enabled = false;
            }
          };
          V.prototype.viewWillAppear = function (Q) {
            var N = this._selectedController;
            if (N) {
              N.viewWillAppear(Q);
            }
          };
          V.prototype.viewDidAppear = function (Q) {
            var N = this._selectedController;
            if (N) {
              N.viewDidAppear(Q);
            }
          };
          V.prototype.viewWillDisappear = function (Q) {
            var N = this._selectedController;
            if (N) {
              N.viewWillDisappear(Q);
            }
          };
          V.prototype.viewDidDisappear = function (Q) {
            var N = this._selectedController;
            if (N) {
              N.viewDidDisappear(Q);
            }
          };
          V.prototype.viewDidLayoutSubviews = function () {};
          V.prototype.setControllers = function (Q, N = 0, Y = false) {
            if (Array.isArray(Q)) {
              this._selectedIndex = N;
              this._controllers = Q;
              this._reduceDrawCalls();
              this._tabBarItems = [];
              var W = this._tabBarItems;
              for (var q = 0; q < Q.length; q++) {
                var S = Q[q];
                S.node.parent = this.content;
                this._resizeController(q);
                var z = S.tabBarItem;
                if (!z || !(z instanceof x.default)) {
                  var f = S.title;
                  (z = cc.instantiate(this.tabBarItemPrefab).getComponent(x.default)).init(f, undefined, undefined, q);
                  S.tabBarItem = z;
                }
                z.selectAction = this._selectTabAtIndex.bind(this, q, Y);
                W.push(z);
                S.enabled = q === N;
              }
              this.tabBar.setItems(W, N);
              var A = Q[N];
              this._selectedController = A;
              A.viewWillAppear(false);
              A.viewDidAppear(false);
              if (A.tabBarItem && A.tabBarItem.animFinish) {
                A.tabBarItem.animFinish();
              }
              this._moveContentToIndex(N);
            }
          };
          V.prototype.getSelectedController = function () {
            return this._selectedController;
          };
          V.prototype.getSelectedTabBarItem = function () {
            return this.tabBar.getSelectedItem();
          };
          V.prototype.hideTabBar = function () {
            if (this.tabBar.node.active || this.bottomNode.active) {
              this.tabBar.node.active = false;
              this.bottomNode.active = false;
              this._resize();
            }
          };
          V.prototype.showTabBar = function () {
            if (!this.tabBar.node.active || !this.bottomNode.active) {
              this.tabBar.node.active = true;
              this.bottomNode.active = true;
              this._resize();
            }
          };
          V.prototype._resizeController = function (Q) {
            var N = this._controllers[Q];
            var Y = this.content;
            if (N && N.node.getContentSize() !== Y.getContentSize()) {
              var W = N.node;
              var q = Y.width;
              var S = Y.height;
              var z = Y.anchorX;
              var f = Y.anchorY;
              var A = (W.anchorX - z + Q) * q;
              var M = (W.anchorY - f) * S;
              W.setContentSize(q, S);
              W.setPosition(A, M);
            }
          };
          V.prototype._getBottomSafeArea = function () {
            if (this.tabBar.node.active === true) {
              return this.safeAreaInsets.bottom;
            } else {
              return 0;
            }
          };
          V.prototype._resizeContent = function () {
            var Q = this._getBottomSafeArea();
            var N = this.node;
            var Y = N.width;
            var W = N.height;
            this.content.setContentSize(Y, W - Q);
          };
          V.prototype._resizeTabBar = function () {
            var Q = this._getBottomSafeArea();
            var N = this.node.height;
            this.tabBar.node.y = Q + this.tabBar.node.height - N;
          };
          V.prototype._resizeBottomPlaceHolder = function () {
            if (this.tabBar.node.active) {
              var Q = this._getBottomSafeArea();
              var N = this.node;
              var Y = N.width;
              var W = N.height;
              var q = this.bottomNode;
              q.setContentSize(Y, Q);
              q.y = Q - W;
            }
          };
          V.prototype._resize = function () {
            var Q = this._selectedIndex;
            this._resizeContent();
            this._resizeTabBar();
            this._resizeBottomPlaceHolder();
            this._resizeController(Q);
          };
          V.prototype._moveContentToIndex = function (Q) {
            this.content.x = -Q * this.content.width;
          };
          V.prototype._selectTabAtIndex = function (Q, N) {
            if (!this._isOnTransistion && Q !== this._selectedIndex) {
              var Y = this._controllers;
              if (!(Q >= Y.length)) {
                var W = this._selectedController;
                var q = Y[Q];
                if (W !== undefined && q !== undefined) {
                  this._handleSwitchNavigationDrawCalls(Q);
                  this._isOnTransistion = true;
                  this.tabBar.selectItemAtIndex(Q);
                  this._selectedIndex = Q;
                  this._selectedController = q;
                  if (q.setSelect) {
                    q.setSelect();
                  }
                  q.enabled = true;
                  if (W.viewWillDisappear) {
                    W.viewWillDisappear(N);
                  }
                  if (q.viewWillAppear) {
                    q.viewWillAppear(N);
                  }
                  if (N) {
                    if (this.tabBarControllerDelegate && (this.tabBarControllerDelegate.transitionAnimationForTabBarToRight || this.tabBarControllerDelegate.transitionAnimationForTabBarToLeft)) {
                      var S;
                      if (S = Q > this._selectedIndex ? this.tabBarControllerDelegate.transitionAnimationForTabBarToRight() : this.tabBarControllerDelegate.transitionAnimationForTabBarToLeft()) {
                        this._playCustomSelectTabAnim(S, W, q, Q);
                      } else {
                        this._moveContentToIndex(Q);
                        this._playDefaultSelectTabAnim(W, q, Q);
                      }
                    } else {
                      this._moveContentToIndex(Q);
                      this._playDefaultSelectTabAnim(W, q, Q);
                    }
                  } else {
                    this._moveContentToIndex(Q);
                    this._selectTabBarFinish(W, q, Q, false);
                  }
                }
              }
            }
          };
          V.prototype._playCustomSelectTabAnim = function (Q, N, Y, W) {
            var q = this;
            var S = new L.TransitionContext(N, Y, N.view, Y.view, this.content);
            Q.animateTransition(S, function () {
              q._selectTabBarFinish(N, Y, W, true);
            });
          };
          V.prototype._playDefaultSelectTabAnim = function (Q, N, Y) {
            var W = this;
            var q = N.navigator ? N.navigator : N;
            q.node.opacity = 0;
            var S = cc.sequence(cc.fadeTo(1, 255).easing(cc.easeSineIn()), cc.callFunc(function () {
              q.node.opacity = 255;
              W._selectTabBarFinish(Q, N, Y, true);
            }));
            q.node.runAction(S);
          };
          V.prototype._selectTabBarFinish = function (Q, N, Y, W) {
            if (N.tabBarItem && N.tabBarItem.animFinish) {
              N.tabBarItem.animFinish();
            }
            if (N) {
              N.viewDidAppear(W);
            }
            if (Q) {
              Q.viewDidDisappear(W);
            }
            if (Q) {
              Q.enabled = false;
            }
            this._isOnTransistion = false;
            this._reduceDrawCalls();
          };
          V.prototype._handleSwitchNavigationDrawCalls = function (Q) {
            var N;
            var Y;
            var W = this._selectedIndex;
            var q = this._controllers;
            if (W > Q) {
              N = Q;
              Y = W;
            } else {
              N = W;
              Y = Q;
            }
            for (var S = N; S <= Y; S++) {
              q[S].node.opacity = 255;
            }
          };
          V.prototype._reduceDrawCalls = function () {
            var Q = this._selectedIndex;
            for (var N = this._controllers, Y = 0; Y < N.length; Y++) {
              if (Y !== Q) {
                N[Y].node.opacity = 0;
              }
            }
          };
          __decorate([p(cc.Node)], V.prototype, "content", undefined);
          __decorate([p(T.default)], V.prototype, "tabBar", undefined);
          __decorate([p(cc.Node)], V.prototype, "bottomNode", undefined);
          __decorate([p(cc.Prefab)], V.prototype, "tabBarItemPrefab", undefined);
          return __decorate([C], V);
        }(D.default);
        K.default = j;
        cc._RF.pop();
      }
    }, {
      TabBar: "TabBar",
      TabBarItem: "TabBarItem",
      TransitionContext: "TransitionContext",
      ViewController: "ViewController"
    }],
    TabBarItem: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "cd0fbm4LQBEVL5LzWleSsGj", "TabBarItem")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = cc._decorator;
        var x = T.ccclass;
        var L = T.property;
        var D = function (k) {
          function _C2() {
            var u = k !== null && k.apply(this, arguments) || this;
            u.icon = undefined;
            u.titleLabel = undefined;
            u.tintColor = undefined;
            u.selectedTintColor = undefined;
            u._iconImage = undefined;
            u._isSelected = undefined;
            u._selectedIconImage = undefined;
            u._tag = undefined;
            u._selectAction = undefined;
            return u;
          }
          __extends(_C2, k);
          Object.defineProperty(_C2.prototype, "tag", {
            get: function () {
              return this._tag;
            },
            set: function (u) {
              this._tag = u;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(_C2.prototype, "selectAction", {
            set: function (u) {
              this._selectAction = u;
            },
            enumerable: false,
            configurable: true
          });
          _C2.prototype.init = function (u, c, p, j) {
            if (u) {
              this.titleLabel.string = u;
            }
            if (c) {
              this.icon.spriteFrame = c;
              this._iconImage = c;
            }
            this._selectedIconImage = p;
            this._tag = j;
            this._isSelected = false;
          };
          _C2.prototype.setupTouchAction = function () {
            this.node.on(cc.Node.EventType.TOUCH_START, this._onTouchStart, this);
            this.node.on(cc.Node.EventType.TOUCH_END, this._onTouchEnd, this);
          };
          _C2.prototype.setTintColor = function (u) {
            if (!this._isSelected) {
              this.icon.node.color = u;
              this.titleLabel.node.color = u;
            }
            this.tintColor = u;
          };
          _C2.prototype.setSelectedTintColor = function (u) {
            if (this._isSelected) {
              this.icon.node.color = u;
              this.titleLabel.node.color = u;
            }
            this.selectedTintColor = u;
          };
          _C2.prototype.setTitleAttributes = function (u) {
            var c = u.getFontSize();
            var p = u.getNormalFontColor();
            var j = u.getFontName();
            var l = u.getLineHeight();
            this.titleLabel.fontSize = c;
            this.titleLabel.font = j;
            this.titleLabel.node.color = p;
            this.titleLabel.lineHeight = l;
          };
          _C2.prototype.setSelect = function () {
            var u = this.selectedTintColor;
            this.icon.node.color = u;
            this.titleLabel.node.color = u;
            this.icon.spriteFrame = this._selectedIconImage;
            this._isSelected = true;
          };
          _C2.prototype.setUnselected = function () {
            var u = this.tintColor;
            this.icon.node.color = u;
            this.titleLabel.node.color = u;
            this.icon.spriteFrame = this._iconImage;
            this._isSelected = false;
          };
          _C2.prototype.animFinish = function () {};
          _C2.prototype._onTouchStart = function () {};
          _C2.prototype._onTouchEnd = function (u) {
            u.stopPropagation();
            if (this._selectAction) {
              this._selectAction();
            }
          };
          __decorate([L(cc.Sprite)], _C2.prototype, "icon", undefined);
          __decorate([L(cc.Label)], _C2.prototype, "titleLabel", undefined);
          __decorate([L(cc.Color)], _C2.prototype, "tintColor", undefined);
          __decorate([L(cc.Color)], _C2.prototype, "selectedTintColor", undefined);
          return __decorate([x], _C2);
        }(cc.Component);
        K.default = D;
        cc._RF.pop();
      }
    }, {}],
    TabBar: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "b8f7436fYdNnryqvtnVtqIL", "TabBar")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = cc._decorator;
        var x = T.ccclass;
        var L = T.property;
        var D = function (k) {
          function C() {
            var u = k !== null && k.apply(this, arguments) || this;
            u.background = undefined;
            u.itemsContainer = undefined;
            u.shadow = undefined;
            u._tabBarItems = [];
            u._selectedTabBarItem = undefined;
            return u;
          }
          __extends(C, k);
          C.prototype.onLoad = function () {
            var u = this.node.width;
            var c = this.node.height;
            this.background.node.setContentSize(u, c);
            this.shadow.node.width = u;
            this.itemsContainer.setContentSize(u, c);
          };
          C.prototype.setItems = function (u, c) {
            var p = u.length;
            if (p && !(p < 1)) {
              for (var j = 0; j < p; j++) {
                var l = u[j];
                l.setupTouchAction();
                l.node.parent = this.itemsContainer;
              }
              var G = u[c];
              G.setSelect();
              this._selectedTabBarItem = G;
              this._tabBarItems = u;
            }
          };
          C.prototype.getItems = function () {
            return this._tabBarItems;
          };
          C.prototype.selectItemAtIndex = function (u) {
            if (!(u >= this._tabBarItems.length)) {
              var c = this._selectedTabBarItem;
              if (c) {
                c.setUnselected();
              }
              var p = this._tabBarItems[u];
              p.setSelect();
              this._selectedTabBarItem = p;
            }
          };
          C.prototype.getSelectedItem = function () {
            return this._selectedTabBarItem;
          };
          C.prototype.setTintColor = function (u) {
            for (var c = this._tabBarItems, p = 0; p < c.length; p++) {
              c[p].setTintColor(u);
            }
          };
          C.prototype.setSelectedTintColor = function (u) {
            for (var c = this._tabBarItems, p = 0; p < c.length; p++) {
              c[p].setSelectedTintColor(u);
            }
          };
          C.prototype.setTitleAttributes = function (u) {
            for (var c = this._tabBarItems, p = 0; p < c.length; p++) {
              c[p].setTitleAttributes(u);
            }
          };
          C.prototype.setBackgroundImage = function (u, c) {
            if (u) {
              this.background.spriteFrame = u;
            } else if (c) {
              this.background.node.color = c;
            }
          };
          __decorate([L(cc.Sprite)], C.prototype, "background", undefined);
          __decorate([L(cc.Node)], C.prototype, "itemsContainer", undefined);
          __decorate([L(cc.Sprite)], C.prototype, "shadow", undefined);
          return __decorate([x], C);
        }(cc.Component);
        K.default = D;
        cc._RF.pop();
      }
    }, {}],
    TimedWinRollBaseController: [function (R, K, g) {
      'use strict';

      if (!cc._RF.push(K, "12aa3hO3pdL6oUvYmprts/7", "TimedWinRollBaseController")) {
        Object.defineProperty(g, "__esModule", {
          value: true
        });
        var L = R("NumberDisplayInterface");
        var D = {
          big: 0,
          mega: 1,
          superMega: 2,
          overflow: 3
        };
        var k = cc._decorator;
        var C = k.ccclass;
        var u = k.property;
        var p = function (G) {
          function V() {
            var Q = G !== null && G.apply(this, arguments) || this;
            Q.displayController = undefined;
            Q._accumulatedDt = 0;
            Q._previousThresholdTime = 0;
            Q._maxValue = -1;
            Q._numberReachIndex = 0;
            Q._numberCallbackList = [];
            Q._onNumReachedCallback = undefined;
            Q._onTimeReachedCallback = undefined;
            Q._lerp = undefined;
            Q._timeCallbackList = [];
            Q._isRolling = false;
            Q._winType = -1;
            Q._winStep = -1;
            Q._rollTime = [];
            Q._rollTo = [];
            Q._winThreshold = [];
            Q._winDuration = [];
            Q._totalWinDuration = [];
            return Q;
          }
          __extends(V, G);
          V.prototype.update = function () {};
          V.prototype.setNumbersCallback = function (Q) {
            this._numberCallbackList = Q;
          };
          V.prototype.setTimeCallback = function (Q, N) {
            this._timeCallbackList = Q;
            this._onTimeReachedCallback = N;
          };
          V.prototype.init = function (Q) {
            this._winThreshold = [Q.bigWinThreshold, Q.megaWinThreshold, Q.superMegaWinThreshold];
            this._winDuration = [Q.bigWinDuration, Q.megaWinDuration, Q.superMegaWinDuration];
            this._maxValue = Q.totalWin;
            this._totalWinDuration = [];
            for (var N = 0; N < 3; N++) {
              this._totalWinDuration[N] = this._winDuration[N].reduce(function (Y, W) {
                return Y + W;
              });
            }
            this._calculatePlayTime();
          };
          V.prototype.getWinType = function () {
            var Q = {
              winStyle: this._winType,
              winStep: this._winStep
            };
            return Q;
          };
          V.prototype.play = function (Q) {
            if (this._parametersSanityCheck()) {
              this._accumulatedDt = 0;
              this._numberReachIndex = 0;
              this._previousThresholdTime = 0;
              this._onNumReachedCallback = Q;
              this.displayController.clear();
              this.update = this._doRollNumber;
              this._isRolling = true;
            }
          };
          V.prototype.skip = function () {
            var Q = this;
            if (this._isRolling) {
              this.stop(false);
              this.displayController.displayNumber(this._maxValue, true, function () {
                if (Q._onNumReachedCallback) {
                  Q._onNumReachedCallback(Q._maxValue);
                }
              });
            }
          };
          V.prototype.stop = function (Q = true) {
            if (Q) {
              this.displayController.clear();
              this._onNumReachedCallback = undefined;
              this._onTimeReachedCallback = undefined;
            }
            this._accumulatedDt = 0;
            this._isRolling = false;
            this.update = function () {};
          };
          V.prototype._parametersSanityCheck = function () {
            if (this._numberCallbackList) {
              this._numberCallbackList.length;
            }
            return !!this._winDuration && !!this._winThreshold && !(this._maxValue < 0);
          };
          V.prototype._calculatePlayTime = function () {
            var Q = this._maxValue;
            var N = this._winThreshold;
            var Y = this._totalWinDuration;
            var W = D;
            var q = N[W.superMega] + (N[W.superMega] - N[W.mega]) * Y[W.superMega] / Y[W.mega];
            var S = [];
            var z = [];
            if (Q < N[W.mega]) {
              this._winType = W.big;
              z[W.big] = Q;
              S[W.big] = this._calibrateWinTime(Q, 0, N[W.mega], W.big, 0);
            } else if (Q < N[W.superMega]) {
              this._winType = W.mega;
              z[W.big] = N[W.mega];
              S[W.big] = Y[W.big];
              z[W.mega] = Q;
              S[W.mega] = this._calibrateWinTime(Q, N[W.mega], N[W.superMega], W.mega, N[W.mega] / Y[W.big]);
            } else if (Q < q) {
              this._winType = W.superMega;
              z[W.big] = N[W.mega];
              S[W.big] = Y[W.big];
              z[W.mega] = N[W.superMega];
              S[W.mega] = Y[W.mega];
              z[W.superMega] = Q;
              S[W.superMega] = this._calibrateWinTime(Q, N[W.superMega], q, W.superMega, (N[W.superMega] - N[W.mega]) / Y[W.mega]);
            } else {
              this._winType = W.overflow;
              this._winStep = 0;
              z[W.big] = N[W.mega];
              z[W.mega] = N[W.superMega];
              z[W.superMega] = Q;
              S = Y;
            }
            this._rollTime = S;
            this._rollTo = z;
            this._lerp = j(0, this._rollTo[0]);
          };
          V.prototype._calibrateWinTime = function (Q, N, Y, W, q) {
            var S = this._totalWinDuration[W];
            for (var z = this._winDuration[W], f = (Q - N) / (Y - N), A = 0, M = 0; M < z.length; M++) {
              var E = A + z[M];
              if (f < E / S) {
                if (q) {
                  if ((Q - N) / E >= q) {
                    this._winStep = M + 1;
                    return E;
                  } else {
                    this._winStep = M;
                    return A;
                  }
                } else if (A && f < (E + A) / 2 / S) {
                  this._winStep = M;
                  return A;
                } else {
                  this._winStep = M + 1;
                  return E;
                }
              }
              A = E;
            }
            return A;
          };
          V.prototype._doRollNumber = function (Q) {
            var N;
            var Y;
            var W;
            var q;
            var S;
            var z = (this._accumulatedDt += Q) - this._previousThresholdTime;
            var f = this._rollTime[0];
            if (z < f) {
              z += Q * (Math.random() * 0.2 - 0.1);
              N = this._lerp.evaluate(z / f);
            } else {
              var A = undefined;
              var M = undefined;
              do {
                A = this._rollTime.shift();
                f = this._rollTime[0];
                M = this._rollTo.shift();
                this._previousThresholdTime += A;
                z -= A;
              } while (f !== undefined && z >= f);
              if (f === undefined) {
                this._lerp = undefined;
                this._isRolling = false;
                this.update = function () {};
                N = this._maxValue;
              } else {
                if (this._winType === D.overflow && this._rollTime.length === 1) {
                  var E = this._lerp.getDistance() / A;
                  this._lerp = (Y = M, W = this._rollTo[0], S = W - Y - (q = E * f), {
                    evaluate: function (F) {
                      return Y + q * F + S * Math.pow(2, (F - 1) * 20);
                    }
                  });
                } else {
                  this._lerp = j(M, this._rollTo[0]);
                }
                z += Q * (Math.random() * 0.2 - 0.1);
                N = this._lerp.evaluate(z / f);
              }
            }
            this._updateNumber(N);
            if (this._onTimeReachedCallback) {
              this._checkTimeReach(this._accumulatedDt);
            }
          };
          V.prototype._updateNumber = function (Q) {
            var N = this._numberCallbackList;
            var Y = this._maxValue;
            var W = Q;
            var q = false;
            var S = [];
            var z = this._onNumReachedCallback;
            if (N !== undefined) {
              while (N.length && N[0] <= Q) {
                var f = N.shift();
                S.push(f);
              }
            }
            if (Y <= Q) {
              this.stop(false);
              W = Y;
              q = true;
              S.push(Y);
              this._onNumReachedCallback = undefined;
            }
            this.displayController.displayNumber(W, q, function () {
              S.forEach(function (A) {
                if (z) {
                  z(A);
                }
              });
            });
          };
          V.prototype._checkTimeReach = function (Q) {
            var N = this._timeCallbackList;
            if (N !== undefined && N.length && N[0] <= Q) {
              var Y = N.shift();
              this._onTimeReachedCallback(Y);
            }
          };
          __decorate([u({
            type: L.default,
            override: true
          })], V.prototype, "displayController", undefined);
          return __decorate([C], V);
        }(cc.Component);
        g.default = p;
        cc._RF.pop();
      }
      function j(G, V) {
        var Q = V - G;
        var N = {
          evaluate: function (Y) {
            return G + Q * Y;
          },
          getDistance: function () {
            return Q;
          }
        };
        return N;
      }
    }, {
      NumberDisplayInterface: "NumberDisplayInterface"
    }],
    TimedWinRollController: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "bbc6c4tBJdFQ76rTU5OtO2a", "TimedWinRollController")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("NumberDisplayController");
        var x = I("TimedWinRollBaseController");
        var L = cc._decorator;
        var D = L.ccclass;
        var k = L.property;
        var C = function (u) {
          function p() {
            var j = u !== null && u.apply(this, arguments) || this;
            j.displayController = undefined;
            return j;
          }
          var c = {
            type: T.default,
            override: true
          };
          __extends(p, u);
          __decorate([k(c)], p.prototype, "displayController", undefined);
          return __decorate([D], p);
        }(x.default);
        K.default = C;
        cc._RF.pop();
      }
    }, {
      NumberDisplayController: "NumberDisplayController",
      TimedWinRollBaseController: "TimedWinRollBaseController"
    }],
    TimedWinRollCurveController: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "ac3b0Ey1QlMtZGe7RPoOsSH", "TimedWinRollCurveController")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("NumberCurvedController");
        var x = I("TimedWinRollBaseController");
        var L = cc._decorator;
        var D = L.ccclass;
        var k = L.property;
        var C = function (u) {
          function c() {
            var j = u !== null && u.apply(this, arguments) || this;
            j.displayController = undefined;
            return j;
          }
          var p = {
            type: T.default,
            override: true
          };
          __extends(c, u);
          __decorate([k(p)], c.prototype, "displayController", undefined);
          return __decorate([D], c);
        }(x.default);
        K.default = C;
        cc._RF.pop();
      }
    }, {
      NumberCurvedController: "NumberCurvedController",
      TimedWinRollBaseController: "TimedWinRollBaseController"
    }],
    TimedWinRollLabelController: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "aa2360L0o1DHbvfzQuldvyg", "TimedWinRollLabelController")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("NumberLabelController");
        var x = I("TimedWinRollBaseController");
        var L = cc._decorator;
        var D = L.ccclass;
        var k = L.property;
        var C = function (u) {
          function c() {
            var j = u !== null && u.apply(this, arguments) || this;
            j.displayController = undefined;
            return j;
          }
          var p = {
            type: T.default,
            override: true
          };
          __extends(c, u);
          __decorate([k(p)], c.prototype, "displayController", undefined);
          return __decorate([D], c);
        }(x.default);
        K.default = C;
        cc._RF.pop();
      }
    }, {
      NumberLabelController: "NumberLabelController",
      TimedWinRollBaseController: "TimedWinRollBaseController"
    }],
    "TotalWinController.spec": [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "b3d0cO57FNIT68ecOLFdA43", "TotalWinController.spec")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        K.initTotalWinNodes = K.skipTotalWinAnimationShownEvent = K.collectTotalWinButtonShownEvent = undefined;
        K.collectTotalWinButtonShownEvent = function () {
          var T = System.get("automation") && System.get("automation").GameData;
          if (T) {
            T.emit("TotalWin", {
              displayState: "CollectButtonShown"
            });
          }
        };
        K.skipTotalWinAnimationShownEvent = function () {
          var T = System.get("automation") && System.get("automation").GameData;
          if (T) {
            T.emit("TotalWin", {
              displayState: "SkipNumberRollEnabled"
            });
          }
        };
        K.initTotalWinNodes = function (T) {
          var x = System.get("automation") && System.get("automation").GameConfigs;
          if (x) {
            x.initNodeConfig(T.collectButtonNode, "total_win_collect_button");
            x.initNodeConfig(T.skipButtonNode, "total_win_skip_button");
          }
        };
        cc._RF.pop();
      }
    }, {}],
    TotalWinController: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "2d856BrsX1JrKn92k3tMGw+", "TotalWinController")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("SpaceBarInterrupter");
        var x = I("Utils");
        var L = I("GameEventHandler");
        var D = I("WinTemplateConstant");
        var k = cc._decorator;
        var C = k.ccclass;
        var p = k.property;
        var j = function (G) {
          function V() {
            var Q = G !== null && G.apply(this, arguments) || this;
            Q.skipNode = undefined;
            Q.collectButton = undefined;
            Q.winAmountNode = undefined;
            Q.totalWinState = D.WinState.INITIAL;
            Q.winAmount = 0;
            Q.isReplaying = false;
            Q._onCompleteCallback = undefined;
            Q._willCompleteCallback = undefined;
            Q._numberRollController = undefined;
            return Q;
          }
          __extends(V, G);
          V.prototype.onDestroyed = function () {};
          V.prototype.onInit = function () {};
          V.prototype.onSetup = function () {};
          V.prototype.onPlay = function () {};
          V.prototype.onWinRollStart = function () {};
          V.prototype.onWinRollComplete = function (Q) {
            Q();
          };
          V.prototype.onCollect = function (Q) {
            Q();
          };
          V.prototype.onStop = function () {};
          V.prototype.onDismiss = function () {};
          V.prototype.onReset = function () {};
          V.prototype.destroy = function () {
            this.onDestroyed();
            this._numberRollController.stop(true);
            this._numberRollController = undefined;
            this.winAmount = 0;
            this._willCompleteCallback = undefined;
            this._onCompleteCallback = undefined;
            this.unscheduleAllCallbacks();
            var Q = this.node;
            Q.stopAllActions();
            Q.destroy();
            return G.prototype.destroy.call(this);
          };
          V.prototype.init = function (Q) {
            this.onInit(Q);
            this._numberRollController = this.winAmountNode.getComponent("NumberRollController");
          };
          V.prototype.setup = function (Q) {
            this.node.active = false;
            this.onSetup(Q);
          };
          V.prototype.onCollectButtonClick = function () {
            var Q = this;
            if (this.collectButton.interactable) {
              this._inactiveCollectButton();
              this.unscheduleAllCallbacks();
              this.onCollect(function () {
                Q._stop();
              });
            }
          };
          V.prototype.onSkipButtonClick = function () {
            this._skipNumberRoll();
          };
          V.prototype.setWillCompleteCallback = function (Q) {
            this._willCompleteCallback = Q;
          };
          V.prototype.play = function (Q, N, Y, W, q) {
            if (this.totalWinState === D.WinState.INITIAL) {
              L.emitGameEffectStateChangedEvent({
                displayState: "Start",
                effectType: "TotalWin"
              });
              var z = this.node;
              z.active = true;
              z.opacity = 0;
              z.stopAllActions();
              z.runAction(cc.fadeIn(0.3));
              this._inactiveCollectButton();
              this.isReplaying = W;
              this.totalWinState = D.WinState.PLAYING;
              this.winAmount = Q;
              this._onCompleteCallback = Y;
              this.onPlay(q);
              if (N > 0) {
                x.delayCallback(N)(this._startWinRoll.bind(this));
              } else {
                this._startWinRoll();
              }
            }
          };
          V.prototype._startWinRoll = function () {
            x.delayCallback(1)(this._activeSkipButton.bind(this));
            this.onWinRollStart();
            this._numberRollController.play(0, this.winAmount, this._winRollComplete.bind(this));
          };
          V.prototype._skipNumberRoll = function () {
            this._inactiveSkipButton();
            this._numberRollController.skip();
          };
          V.prototype._winRollComplete = function () {
            var Q = this;
            if (this.totalWinState === D.WinState.PLAYING) {
              this.totalWinState = D.WinState.WAITING;
              this._inactiveSkipButton();
              this.onWinRollComplete(function () {
                L.emitGameEffectStateChangedEvent({
                  displayState: "DidUpdate",
                  effectType: "TotalWin"
                });
                var Y = Q.isReplaying ? D.REPLAY_WIN_HOLD_DURATION : D.NORMAL_WIN_HOLD_DURATION;
                Q.unscheduleAllCallbacks();
                Q.scheduleOnce(Q.onCollectButtonClick, Y);
                Q._activeCollectButton();
              });
            }
          };
          V.prototype._stop = function () {
            if (this.totalWinState === D.WinState.WAITING) {
              this.totalWinState = D.WinState.DISMISING;
              this._inactiveCollectButton();
              this._inactiveSkipButton();
              this.onStop();
              this.unscheduleAllCallbacks();
              L.emitGameEffectStateChangedEvent({
                displayState: "WillEnd",
                effectType: "TotalWin"
              });
              if (this._willCompleteCallback) {
                var N = this._willCompleteCallback;
                this._willCompleteCallback = undefined;
                N(this._dismiss.bind(this));
              } else {
                this._dismiss();
              }
            }
          };
          V.prototype._dismiss = function () {
            if (this.totalWinState === D.WinState.DISMISING) {
              this.onDismiss();
              var Q = this.node;
              Q.stopAllActions();
              Q.runAction(cc.sequence(cc.fadeOut(0.5), cc.callFunc(this._completeShowTotalWin, this)));
            }
          };
          V.prototype._completeShowTotalWin = function () {
            L.emitGameEffectStateChangedEvent({
              displayState: "End",
              effectType: "TotalWin"
            });
            var N = this._onCompleteCallback;
            this._reset();
            if (N) {
              N();
            }
          };
          V.prototype._activeSkipButton = function () {
            if (!this.skipNode.active) {
              T.spaceBarInterrupter.subscribeEventInterrupter("totalwin", this.node, this._skipNumberRoll.bind(this));
              this.skipNode.active = true;
            }
          };
          V.prototype._inactiveSkipButton = function () {
            if (this.skipNode.active) {
              T.spaceBarInterrupter.unsubscribeEventInterrupter("totalwin");
              this.skipNode.active = false;
            }
          };
          V.prototype._activeCollectButton = function () {
            this.collectButton.interactable = true;
            T.spaceBarInterrupter.subscribeEventInterrupter("totalwinbtn", this.node, this.onCollectButtonClick.bind(this));
          };
          V.prototype._inactiveCollectButton = function () {
            this.collectButton.interactable = false;
            T.spaceBarInterrupter.unsubscribeEventInterrupter("totalwinbtn");
          };
          V.prototype._reset = function () {
            this.onReset();
            this.unscheduleAllCallbacks();
            this._numberRollController.stop(true);
            this.totalWinState = D.WinState.INITIAL;
            this.winAmount = 0;
            this._onCompleteCallback = undefined;
            var Q = this.node;
            Q.stopAllActions();
            Q.active = false;
          };
          __decorate([p(cc.Node)], V.prototype, "skipNode", undefined);
          __decorate([p(cc.Button)], V.prototype, "collectButton", undefined);
          __decorate([p(cc.Node)], V.prototype, "winAmountNode", undefined);
          return __decorate([C], V);
        }(cc.Component);
        K.default = j;
        cc._RF.pop();
      }
    }, {
      GameEventHandler: "GameEventHandler",
      SpaceBarInterrupter: "SpaceBarInterrupter",
      Utils: "Utils",
      WinTemplateConstant: "WinTemplateConstant"
    }],
    TransactionModel: [function (Z, I) {
      'use strict';

      if (!cc._RF.push(I, "54c92i9GeNK1JtqIIU4fhIX", "TransactionModel")) {
        var R = System.get("bvframework").TransactionModel;
        I.exports.default = R;
        I.exports.__esModule = true;
        cc._RF.pop();
      }
    }, {}],
    TransactionStateMachineHandler: [function (Z, I) {
      'use strict';

      if (!cc._RF.push(I, "c42f8INb4ZMyJTA7LnNSlci", "TransactionStateMachineHandler")) {
        var R = System.get("bvframework").TransactionStateMachineHandler;
        for (var K in R) {
          if (R.hasOwnProperty(K)) {
            I.exports[K] = R[K];
          }
        }
        I.exports.__esModule = true;
        cc._RF.pop();
      }
    }, {}],
    TransitionContext: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "9fd10r5SF9AY7ViKPJFg+fR", "TransitionContext")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        K.TransitionContext = undefined;
        var T = function () {
          function x(L, D, k, C, u) {
            this._fromController = L;
            this._toController = D;
            this._fromView = k;
            this._toView = C;
            this._container = u;
          }
          x.prototype.getFromController = function () {
            return this._fromController;
          };
          x.prototype.getToController = function () {
            return this._toController;
          };
          x.prototype.getFromView = function () {
            return this._fromView;
          };
          x.prototype.getToView = function () {
            return this._toView;
          };
          x.prototype.getContainer = function () {
            return this._container;
          };
          return x;
        }();
        K.TransitionContext = T;
        cc._RF.pop();
      }
    }, {}],
    TransitionEnum: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "ba325vamDZMr5FAGrgPtoRH", "TransitionEnum")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        K.NavigationControllerOperation = undefined;
        (function (T) {
          T[T.None = 0] = "None";
          T[T.Push = 1] = "Push";
          T[T.Pop = 2] = "Pop";
        })(K.NavigationControllerOperation ||= {});
        cc._RF.pop();
      }
    }, {}],
    TurboButtonEffect: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "5e837vEECVAj4O05haO7Gt+", "TurboButtonEffect")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = cc._decorator.ccclass;
        var x = function (L) {
          function D() {
            var k = L !== null && L.apply(this, arguments) || this;
            k._turboMiddleIcon = undefined;
            return k;
          }
          __extends(D, L);
          D.prototype.setUpdateTurboMiddleIconCallback = function (k) {
            this._turboMiddleIcon = k;
          };
          D.prototype.changeTurboSprite = function () {
            if (this._turboMiddleIcon) {
              this._turboMiddleIcon();
            }
          };
          return __decorate([T], D);
        }(cc.Component);
        K.default = x;
        cc._RF.pop();
      }
    }, {}],
    TweaksConfig: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "0602bmSQ0NBZrhW+yhcJtSb", "TweaksConfig")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        I("RtConfig");
        I("GamePreference");
        I("CreatorTweaks");
        I("Utils");
        I("QuitGame");
        I("Printer");
        I("TweaksData");
        K.default = undefined;
        cc._RF.pop();
      }
    }, {
      CreatorTweaks: "CreatorTweaks",
      GamePreference: "GamePreference",
      Printer: "Printer",
      QuitGame: "QuitGame",
      RtConfig: "RtConfig",
      TweaksData: "TweaksData",
      Utils: "Utils"
    }],
    TweaksData: [function (Z, I) {
      'use strict';

      if (!cc._RF.push(I, "b0089xUdQRLiZXeZmKk7dCG", "TweaksData")) {
        I.exports = {};
        I.exports.__esModule = true;
        cc._RF.pop();
      }
    }, {}],
    UIAppearanceHelper: [function (k, C, j) {
      'use strict';

      if (!cc._RF.push(C, "f4549VlHlxOL4w7V7h4rhZg", "UIAppearanceHelper")) {
        Object.defineProperty(j, "__esModule", {
          value: true
        });
        j.uiAppearanceHelper = j.getOffsetY = undefined;
        var A = k("BACKUP_DATA");
        var M = function () {
          function m() {}
          m.prototype.interpret = function (v) {
            return v[0];
          };
          return m;
        }();
        var E = function () {
          function m() {}
          m.prototype.interpret = function (v) {
            return new cc.Color(v[0], v[1], v[2], v[3]);
          };
          return m;
        }();
        var F = cc._decorator.ccclass;
        var b = function (m) {
          function v() {
            var J = m.call(this) || this;
            J._uiAppearance = undefined;
            var Z0 = J._uiAppearance = shell.uiAppearance;
            if (Z0) {
              Z0.registerInterpreter("font", new M());
              Z0.registerInterpreter("value", new M());
              Z0.registerInterpreter("path", new M());
              Z0.registerInterpreter("color", new E());
              Z0.registerInterpreter("classname", new M());
            }
            return J;
          }
          __extends(v, m);
          v.prototype.v = function (J) {
            var Z0 = this._uiAppearance && this._uiAppearance.v(J);
            if (Z0 === null) {
              Z0 = y(J);
            }
            return Z0;
          };
          v.prototype.unregisterInterpreter = function (J) {
            return this._uiAppearance && this._uiAppearance.unregisterInterpreter(J);
          };
          return __decorate([F("UIAppearanceHelper")], v);
        }(cc.Object);
        var H = Object.freeze({
          windows: {
            native: 4,
            non_native: 3
          },
          macos: {
            native: 4,
            non_native: 5
          },
          ios: {
            native: 2,
            non_native: 2
          },
          android: {
            native: 5,
            non_native: 4
          }
        });
        var w = Object.freeze({
          windows: {
            native: 0,
            non_native: 5
          },
          macos: {
            native: 2,
            non_native: 3
          },
          ios: {
            native: 0,
            non_native: 3
          },
          android: {
            native: 4,
            non_native: 4
          }
        });
        var U = shell.I18n.currentLocale;
        var B = shell.getBrowserBaseType().toLowerCase();
        var P = U === "zh" || U === "ko" || U === "ja" ? w : H;
        j.getOffsetY = function () {
          switch (cc.sys.os) {
            case cc.sys.OS_WINDOWS:
              if (B === "ie" || B === "edge") {
                return P.windows.native;
              } else {
                return P.windows.non_native;
              }
            case cc.sys.OS_ANDROID:
              if (B === "chrome") {
                return P.android.native;
              } else {
                return P.android.non_native;
              }
            case cc.sys.OS_OSX:
              if (B === "safari") {
                return P.macos.native;
              } else {
                return P.macos.non_native;
              }
            case cc.sys.OS_IOS:
              if (B === "mobile safari") {
                return P.ios.native;
              } else {
                return P.ios.non_native;
              }
            default:
              return P.macos.non_native;
          }
        };
        var X = new b();
        j.uiAppearanceHelper = X;
        cc._RF.pop();
      }
      function y(m) {
        var v;
        var J = m.split(".");
        for (var Z0 = 0, Z1 = J.length; Z0 < Z1; Z0++) {
          var Z2 = J[Z0];
          if ((v = v && v[Z2] || A.default[Z2]) === undefined) {
            return null;
          }
        }
        return v;
      }
    }, {
      BACKUP_DATA: "BACKUP_DATA"
    }],
    UIKitUtils: [function (I, R, K) {
      'use strict';

      function g() {
        return cc.sys.os === cc.sys.OS_IOS;
      }
      if (!cc._RF.push(R, "b3045XdzRhDNrJLCqWLZ6eT", "UIKitUtils")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        K.isNotBrowserMode = K.deviceHasNotch = K.isIphoneX = K.isIphone = undefined;
        K.isIphone = g;
        K.isIphoneX = function () {
          var x = cc.view.getFrameSize();
          return g() && (x.width === 812 && x.height === 375 || x.width === 375 && x.height === 812);
        };
        K.deviceHasNotch = function () {
          return shell.environment.hasNotch();
        };
        K.isNotBrowserMode = function () {
          return window.navigator.standalone || shell.getEnvironment() === "app";
        };
        cc._RF.pop();
      }
    }, {}],
    UIKit: [function (u, c, p) {
      'use strict';

      if (!cc._RF.push(c, "cfcacQ0hpxOzKvh1YNNRBbk", "UIKit")) {
        Object.defineProperty(p, "__esModule", {
          value: true
        });
        p.safeArea = p.TabBarConfigs = p.NavigationConfigs = undefined;
        p.NavigationConfigs = {
          bar: {
            landscape: {
              height: 139.5,
              item_space_x: 48
            },
            portrait: {
              height: 186,
              item_space_x: 48
            }
          }
        };
        p.TabBarConfigs = {
          bar: {
            landscape: {
              height: 180
            },
            portrait: {
              height: 180
            }
          }
        };
        p.safeArea = Object.freeze({
          iphone_x: {
            top: 80,
            left: 0,
            bottom: 102,
            right: 0
          },
          iphone: {
            top: 50,
            left: 0,
            bottom: 0,
            right: 0
          },
          normal: {
            top: 0,
            left: 0,
            bottom: 0,
            right: 0
          }
        });
        cc._RF.pop();
      }
    }, {}],
    UISetupHandler: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "71e5eAt2xdH5J3VT6nognao", "UISetupHandler")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        K.renderUIBaseOnState = K.BonusGameUI = K.NormalGameUI = K.settingMenuInteractable = undefined;
        var T = I("GameConstant");
        var x = I("SettingMenuHelper");
        var L = I("SlotGameTools");
        var D = I("InfoBoardController");
        var k = I("Utils");
        K.settingMenuInteractable = function (N) {
          x.settingMenuHelper.setAllButtonsInteractable(N);
        };
        var C = function () {
          function N() {}
          N.prototype.setup = function (Y, W) {
            this._generalControllers = Y.generalControllers;
            this._dataSource = Y.dataSource;
            G(this._dataSource);
            k.sequenceCallback(this._setupUI.bind(this), this._showWaysText.bind(this), this._showWinAmount.bind(this), this._showMultiplier.bind(this))(W);
          };
          N.prototype._setupUI = function (Y) {
            var W = this._generalControllers;
            var q = W.slotController;
            var S = W.slotTintController;
            var z = W.spinButtonController;
            var f = W.settingMenuFooterController;
            var A = W.backgroundController;
            var M = W.foregroundController;
            var E = W.fastSpinController;
            var F = W.slowDropEffectController;
            var b = this._dataSource.transactionModel;
            A.switchUI(T.TransitionState.NORMAL);
            M.switchUI(T.TransitionState.NORMAL);
            F.switchUI(T.TransitionState.NORMAL);
            x.settingMenuHelper.setHidden(false);
            f.returnHolder();
            if (x.settingMenuHelper.isIdle()) {
              z.show();
            }
            q.removeOverlaySlotItems();
            S.node.setPosition(0, 180);
            q.node.setPosition(0, 180);
            E.node.setPosition(0, 180);
            q.reloadData(b);
            E.reset();
            this._setupFeatureButton();
            this._resumeFeatureButton();
            if (Y) {
              Y();
            }
          };
          N.prototype._showWinAmount = function (Y) {
            Q(this._generalControllers, this._dataSource, false, Y);
          };
          N.prototype._showMultiplier = function (Y) {
            var W = this._generalControllers.multiplierController;
            var q = this._dataSource.transactionModel.gameMultiplier;
            W.reloadMultiplier(q, false);
            if (Y) {
              Y();
            }
          };
          N.prototype._showWaysText = function (Y) {
            this._generalControllers.waysController.node.active = false;
            if (Y) {
              Y();
            }
          };
          N.prototype._setupFeatureButton = function (Y) {
            var W = this._dataSource.systemModel;
            var q = W.operatorJurisdiction.buyFeature;
            var S = this._generalControllers.featureBuyController;
            if (q) {
              var z = W.featureBuy;
              if (z) {
                S.setFeatureBuyButtonState(q);
                S.setFeatureBuyMultiply(z.betMultiplier);
              } else {
                S.setFeatureBuyButtonState(false);
              }
            } else {
              S.hideFeatureBuy();
            }
            if (Y) {
              Y();
            }
          };
          N.prototype._resumeFeatureButton = function (Y) {
            var W = this._dataSource.systemModel;
            var q = this._dataSource.transactionModel.stateTransitionTo;
            var S = W.featureBuy;
            var z = this._generalControllers.featureBuyController;
            if (S) {
              if (S.isSupported === false) {
                z.disableFeatureBuy();
                if (Y) {
                  Y();
                }
                return;
              }
              if (q === T.TransitionState.RESPIN || q === T.TransitionState.FREE_SPIN) {
                x.settingMenuHelper.additionalBetCalculation();
                S.threshold;
                z.disableFeatureBuy();
              }
            }
            if (Y) {
              Y();
            }
          };
          return N;
        }();
        K.NormalGameUI = C;
        var j = function () {
          function _N() {}
          _N.prototype.setup = function (Y, W) {
            this._generalControllers = Y.generalControllers;
            this._bonusControllers = Y.bonusControllers;
            this._dataSource = Y.dataSource;
            G(this._dataSource);
            k.sequenceCallback(this._setupUI.bind(this), this._showWaysText.bind(this), this._showWinAmount.bind(this), this._showMultiplier.bind(this), this._setupSymbolPopout.bind(this))(W);
          };
          _N.prototype._setupUI = function (Y) {
            var W = this._generalControllers;
            var q = W.slotController;
            var S = W.slotTintController;
            var z = W.spinButtonController;
            var f = W.settingMenuFooterController;
            var A = W.settingMenuFooterHolder;
            var M = W.backgroundController;
            var E = W.foregroundController;
            var F = W.fastSpinController;
            var b = W.slowDropEffectController;
            var H = this._dataSource.transactionModel;
            var w = H.freeSpin;
            M.switchUI(T.TransitionState.FREE_SPIN);
            E.switchUI(T.TransitionState.FREE_SPIN);
            b.switchUI(T.TransitionState.FREE_SPIN);
            z.hide();
            f.changeHolder(A);
            q.removeOverlaySlotItems();
            S.node.setPosition(0, 50);
            q.node.setPosition(0, 50);
            F.node.setPosition(0, 50);
            q.reloadData(H);
            F.reset();
            this._bonusControllers.remainingFreeSpinController.show(w.step);
            this._setupFeatureButton();
            if (Y) {
              Y();
            }
          };
          _N.prototype._showWinAmount = function (Y) {
            Q(this._generalControllers, this._dataSource, true, Y);
          };
          _N.prototype._showMultiplier = function (Y) {
            var W = this._generalControllers.multiplierController;
            var q = this._dataSource.transactionModel.gameMultiplier;
            W.reloadMultiplier(q, true);
            if (Y) {
              Y();
            }
          };
          _N.prototype._setupSymbolPopout = function (Y) {
            var W = this._generalControllers.symbolPayoutController;
            W.hidePopOutItem();
            W.clearOnClickCallback();
            W.disablePanel();
            if (Y) {
              Y();
            }
          };
          _N.prototype._showWaysText = function (Y) {
            this._generalControllers.waysController.node.active = true;
            if (Y) {
              Y();
            }
          };
          _N.prototype._setupFeatureButton = function (Y) {
            var W = this._dataSource.systemModel;
            var q = W.operatorJurisdiction.buyFeature;
            var S = this._generalControllers.featureBuyController;
            if (q) {
              var z = W.featureBuy;
              if (z) {
                S.setFeatureBuyButtonState(q);
                S.setFeatureBuyMultiply(z.betMultiplier);
                S.hideFeatureButton();
                S.disableFeatureBuy();
                S.hideFeatureBuy();
              }
            } else {
              S.hideFeatureBuy();
            }
            if (Y) {
              Y();
            }
          };
          return _N;
        }();
        K.BonusGameUI = j;
        K.renderUIBaseOnState = function (N, Y) {
          var W = N.dataSource.transactionModel;
          var q = W.stateTransitionFrom;
          var S = W.stateTransitionTo;
          var z = q === T.TransitionState.FREE_SPIN || q === T.TransitionState.FREE_SPIN_RESPIN;
          var f = S === T.TransitionState.FREE_SPIN || S === T.TransitionState.FREE_SPIN_RESPIN;
          switch (true) {
            case z && f:
              new j().setup(N, Y);
              break;
            default:
              new C().setup(N, Y);
          }
        };
        cc._RF.pop();
      }
      function G(N) {
        var Y = N.playerModel.balance;
        var W = N.transactionModel.accumulatedWinAmount;
        x.settingMenuHelper.setBalance(Y);
        x.settingMenuHelper.setWinAmount(W);
      }
      function V(N) {
        var Y = N.systemModel;
        var W = Y.maxLineNumber;
        var q = Y.winThresholds;
        var S = N.transactionModel;
        var z = S.betSizeValue;
        var f = S.betLevelValue;
        return q.getAllThresholds(z, f, W);
      }
      function Q(N, Y, W, q) {
        var S = Y.transactionModel;
        var z = S.accumulatedWinAmount;
        var A = S.totalWinAmount;
        var M = S.isTransactionEnd;
        var E = S.gameMultiplier;
        var F = N.infoboardController;
        var b = V(Y);
        var H = M ? z : A;
        F.resetWinEffect();
        if (L.isBigWinThreshold(H, b) && M) {
          F.play({
            playState: D.InfoBoardShowState.HIGH_PAY_BIG_TOTAL_WIN,
            amount: H,
            multiplierNumber: E,
            isMute: true
          }, q);
        } else if (L.isMediumWinThreshold(H, b)) {
          var w = M ? D.InfoBoardShowState.INSTANT_HIGH_PAY_TOTAL_WIN : D.InfoBoardShowState.HIGH_PAY_WIN;
          var U = {
            playState: w,
            amount: H,
            multiplierNumber: E,
            isMute: true
          };
          F.play(U, q);
        } else if (H > 0) {
          w = M ? D.InfoBoardShowState.LOW_PAY_TOTAL_WIN : D.InfoBoardShowState.LOW_PAY_WIN;
          F.play({
            playState: w,
            amount: H,
            multiplierNumber: E,
            isMute: true
          }, q);
        } else {
          var B = W ? D.InfoboardUIState.FREE_SPIN_TIPS : D.InfoboardUIState.NORMAL_TIPS;
          F.showTips(B, true);
          if (q) {
            q();
          }
        }
      }
    }, {
      GameConstant: "GameConstant",
      InfoBoardController: "InfoBoardController",
      SettingMenuHelper: "SettingMenuHelper",
      SlotGameTools: "SlotGameTools",
      Utils: "Utils"
    }],
    UIStateMachine: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "c32dchyVoJJ6YgRw+Shog7m", "UIStateMachine")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T;
        var x = I("UIState");
        (function (D) {
          D[D.Ready = 0] = "Ready";
          D[D.Running = 1] = "Running";
          D[D.Exiting = 2] = "Exiting";
          D[D.End = 3] = "End";
        })(T ||= {});
        var L = function () {
          function D(k) {
            this._previousUIState = undefined;
            this._currentUIState = undefined;
            this._stateMachineStatus = T.Ready;
            this._getNextUIState = k.getNextUIState;
            this._exitUIStateMachineCallback = k.exitUIStateMachineCallback;
          }
          Object.defineProperty(D.prototype, "previousUIState", {
            get: function () {
              return this._previousUIState;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(D.prototype, "currentUIState", {
            get: function () {
              return this._currentUIState;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(D.prototype, "isStateReady", {
            get: function () {
              return this._stateMachineStatus === T.Ready;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(D.prototype, "isStateRunning", {
            get: function () {
              return this._stateMachineStatus === T.Running;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(D.prototype, "isStateExiting", {
            get: function () {
              return this._stateMachineStatus === T.Exiting;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(D.prototype, "isStateEnd", {
            get: function () {
              return this._stateMachineStatus === T.End;
            },
            enumerable: false,
            configurable: true
          });
          D.prototype.setExitUIStateMachineCallback = function (k) {
            this._exitUIStateMachineCallback = k;
          };
          D.prototype.run = function () {
            if (this.isStateReady) {
              this._stateMachineStatus = T.Running;
              this._evaluateState();
            }
          };
          D.prototype.exit = function (k) {
            if (!this.isStateExiting && !this.isStateEnd) {
              this._stateMachineStatus = T.Exiting;
              var C = this.currentUIState;
              if (C) {
                C.setExitCallback(this._exit.bind(this));
                C.forceExit(k);
              }
            }
          };
          D.prototype.dispatchEvent = function (k, C) {
            if (this.isStateRunning) {
              var u = this.currentUIState;
              if (u && u.dispatchEvent) {
                u.dispatchEvent(k, C);
              }
            }
          };
          D.prototype.destroy = function () {
            this._exitUIStateMachineCallback = undefined;
            this._getNextUIState = undefined;
          };
          D.prototype._evaluateState = function () {
            var k = this;
            if (this.isStateRunning) {
              var C = this._getNextUIState();
              this._previousUIState = this.currentUIState;
              this._currentUIState = undefined;
              switch (true) {
                case C instanceof x.default:
                  var u = this._currentUIState = C;
                  u.setExitCallback(this._evaluateState.bind(this));
                  u.run();
                  break;
                case typeof C == "object":
                  var c = C;
                  var p = c.nextState;
                  var j = c.enterStateTransition;
                  var G = c.exitStateTransition;
                  this._currentUIState = p;
                  p.setExitCallback(function () {
                    if (G) {
                      G(function () {
                        if (k.isStateRunning) {
                          k._evaluateState();
                        }
                      });
                    } else {
                      k._evaluateState();
                    }
                  });
                  if (j) {
                    j(function () {
                      if (k.isStateRunning) {
                        p.run();
                      }
                    });
                  } else {
                    p.run();
                  }
                  break;
                case C === undefined:
                  this._stateMachineStatus = T.Exiting;
                  this._exit();
              }
            }
          };
          D.prototype._exit = function () {
            if (!this.isStateEnd) {
              this._stateMachineStatus = T.End;
              var k = this._exitUIStateMachineCallback;
              this._exitUIStateMachineCallback = undefined;
              if (k) {
                k();
              }
            }
          };
          return D;
        }();
        K.default = L;
        cc._RF.pop();
      }
    }, {
      UIState: "UIState"
    }],
    UIState: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "4267crib8ZEZLPPtFcOTt7i", "UIState")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        K.UIStateStatus = undefined;
        var T;
        var x = I("Utils");
        var L = I("GeneralSlotTemplate");
        (function (k) {
          k[k.Ready = 0] = "Ready";
          k[k.Running = 1] = "Running";
          k[k.Exiting = 2] = "Exiting";
          k[k.End = 3] = "End";
        })(T = K.UIStateStatus ||= {});
        var D = function () {
          function k(j, l, G) {
            this.name = "UI State";
            this.uiStateStatus = T.Ready;
            this.setDataSource(j);
            this.setControllerPool(l);
            this.setExitCallback(G);
            this.onReady();
          }
          var C = {
            get: function () {
              return this.uiStateStatus === T.Ready;
            },
            enumerable: false,
            configurable: true
          };
          var u = {
            get: function () {
              return this.uiStateStatus === T.Running;
            },
            enumerable: false,
            configurable: true
          };
          var c = {
            get: function () {
              return this.uiStateStatus === T.Exiting;
            },
            enumerable: false,
            configurable: true
          };
          var p = {
            get: function () {
              return this.uiStateStatus === T.End;
            },
            enumerable: false,
            configurable: true
          };
          k.prototype.eventListener = function () {};
          Object.defineProperty(k.prototype, "isStateReady", C);
          Object.defineProperty(k.prototype, "isStateRunning", u);
          Object.defineProperty(k.prototype, "isStateExiting", c);
          Object.defineProperty(k.prototype, "isStateEnd", p);
          k.prototype.setDataSource = function (j) {
            this.dataSource = j;
          };
          k.prototype.setControllerPool = function (j) {
            this.controllerPool = j;
          };
          k.prototype.setExitCallback = function (j) {
            this.finalCallback = j;
          };
          k.prototype.run = function () {
            this.uiStateStatus = T.Running;
            this.onRun();
          };
          k.prototype.exit = function (j) {
            var l = this;
            if (!this.isStateExiting && !this.isStateEnd) {
              this.uiStateStatus = T.Exiting;
              this.onExit(function () {
                if (j == null ? undefined : j.before) {
                  j.before();
                }
                var G = l.finalCallback;
                l.finalCallback = undefined;
                l.destroy();
                if (L.GSTConfig.disableStateExitDefer) {
                  l.uiStateStatus = T.End;
                  if (G) {
                    G();
                  }
                  if (j == null ? undefined : j.after) {
                    j.after();
                  }
                } else {
                  x.deferCallback(true)(function () {
                    x.deferCallback(true)(function () {
                      l.uiStateStatus = T.End;
                      if (G) {
                        G();
                      }
                      if (j == null ? undefined : j.after) {
                        j.after();
                      }
                    });
                  });
                }
              });
            }
          };
          k.prototype.forceExit = function (j) {
            var l = this;
            this.uiStateStatus = T.Exiting;
            this.onForceExit(function () {
              if (j == null ? undefined : j.before) {
                j.before();
              }
              var G = l.finalCallback;
              l.finalCallback = undefined;
              l.destroy();
              if (L.GSTConfig.disableStateExitDefer) {
                l.uiStateStatus = T.End;
                if (G) {
                  G();
                }
                if (j == null ? undefined : j.after) {
                  j.after();
                }
              } else {
                x.deferCallback(true)(function () {
                  x.deferCallback(true)(function () {
                    l.uiStateStatus = T.End;
                    if (G) {
                      G();
                    }
                    if (j == null ? undefined : j.after) {
                      j.after();
                    }
                  });
                });
              }
            });
          };
          k.prototype.destroy = function () {
            var j = this;
            this.onDestroy(function () {
              j.dataSource = undefined;
              j.finalCallback = undefined;
              j.controllerPool = undefined;
            });
          };
          k.prototype.dispatchEvent = function (j, l) {
            this.eventListener(j, l);
          };
          return k;
        }();
        K.default = D;
        cc._RF.pop();
      }
    }, {
      GeneralSlotTemplate: "GeneralSlotTemplate",
      Utils: "Utils"
    }],
    Utils: [function (I, R) {
      'use strict';

      if (!cc._RF.push(R, "03755Dj0/VFQbz7rFuRrlJG", "Utils")) {
        var g = System.get("common").Utils;
        var T = function (L, D) {
          var k = {};
          for (var C in D) {
            if (L.hasOwnProperty(C)) {
              k[L[C]] = D[C];
            } else {
              k[C] = D[C];
            }
          }
          return k;
        }({
          u0: "convertToNodeSpace",
          u1: "convertToNodeSpaceAR",
          u2: "getAbsolutePosition",
          u3: "getAbsoluteX",
          u4: "getAbsoluteY",
          u5: "setAbsolutePosition",
          u6: "setAbsoluteX",
          u7: "setAbsoluteY",
          u8: "transferToParent",
          u9: "getSharedScheduler",
          u10: "delayCallback",
          u11: "timeoutCallback",
          u12: "selectorCallback",
          u13: "sequenceCallback",
          u14: "spawnCallback",
          u15: "waterfCallback",
          u16: "condCallback",
          u17: "deferCallback",
          u18: "tickCallback",
          u19: "observeCallback",
          u20: "formatTwoDigit",
          u21: "formatDate",
          u22: "isRTL",
          u23: "getProtocol",
          u24: "getOrigin"
        }, g);
        for (var x in T) {
          if (T.hasOwnProperty(x)) {
            R.exports[x] = T[x];
          }
        }
        R.exports.__esModule = true;
        if (g.sharedScheduler == null) {
          R.exports.sharedScheduler = T.getSharedScheduler();
        }
        cc._RF.pop();
      }
    }, {}],
    ViewControllerTransition: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "8e202781KBBRIxVxe3NWQ9e", "ViewControllerTransition")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = function () {
          function x() {}
          x.prototype.transitionDuration = function () {
            return 0.3;
          };
          x.prototype.animateTransition = function () {};
          x.prototype.animationEnd = function () {};
          return x;
        }();
        K.default = T;
        cc._RF.pop();
      }
    }, {}],
    ViewController: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "ef8ab8zk59N1LEX0M2uhmRU", "ViewController")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("UIKitUtils");
        var x = I("UIKit");
        var L = cc._decorator;
        var D = L.ccclass;
        var k = L.property;
        var C = function (u) {
          function c() {
            var p = u !== null && u.apply(this, arguments) || this;
            p.title = "";
            p.leftItem = undefined;
            p.middleItem = undefined;
            p.rightItem = undefined;
            p._navigator = undefined;
            p._safeAreaInsets = undefined;
            return p;
          }
          __extends(c, u);
          Object.defineProperty(c.prototype, "navigator", {
            get: function () {
              return this._navigator;
            },
            set: function (p) {
              this._navigator = p;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(c.prototype, "view", {
            get: function () {
              return this.node;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(c.prototype, "safeAreaInsets", {
            get: function () {
              var p;
              var j;
              var G;
              var V;
              this._safeAreaInsets ||= (p = T.deviceHasNotch(), j = T.isIphone(), G = T.isNotBrowserMode(), V = shell.is1959Supported, p && G && V ? x.safeArea.iphone_x : p && V ? {
                top: x.safeArea.normal.top,
                left: x.safeArea.iphone_x.left,
                bottom: x.safeArea.iphone_x.bottom,
                right: x.safeArea.iphone_x.right
              } : j && G ? x.safeArea.iphone : x.safeArea.normal);
              return this._safeAreaInsets;
            },
            enumerable: false,
            configurable: true
          });
          c.prototype.onEnable = function () {};
          c.prototype.onDisable = function () {};
          c.prototype.viewWillAppear = function () {};
          c.prototype.viewDidAppear = function () {};
          c.prototype.viewWillDisappear = function () {};
          c.prototype.viewDidDisappear = function () {};
          c.prototype.viewWillLayoutSubviews = function () {};
          c.prototype.viewDidLayoutSubviews = function () {};
          __decorate([k(cc.String)], c.prototype, "title", undefined);
          return __decorate([D], c);
        }(cc.Component);
        K.default = C;
        cc._RF.pop();
      }
    }, {
      UIKit: "UIKit",
      UIKitUtils: "UIKitUtils"
    }],
    "WBSApiClient.spec": [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "9958eyjxAdE+bayPUee8vxY", "WBSApiClient.spec")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        K.onRequestSent = K.onRequestReceived = undefined;
        K.onRequestReceived = function (T, x) {
          var L = System.get("automation") && System.get("automation").GameData;
          var D = {
            error: T,
            result: x
          };
          if (L) {
            L.emit("RequestReceived", D);
          }
        };
        K.onRequestSent = function () {
          var T = System.get("automation") && System.get("automation").GameData;
          if (T) {
            T.emit("RequestSent");
          }
        };
        cc._RF.pop();
      }
    }, {}],
    WBSApiClient: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "482e7ITATFKo7j4cEkygqNc", "WBSApiClient")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        K.wbsApiClient = undefined;
        var T = I("APIClient");
        var x = I("SettingMenuHelper");
        var L = I("WBSDataSource");
        I("TweaksData");
        var D = I("AutomationDecorator");
        var k = I("WBSApiClient.spec");
        var C = function (p) {
          function j() {
            var Q = p !== null && p.apply(this, arguments) || this;
            Q._spinInfo = undefined;
            return Q;
          }
          var G = {
            func: k.onRequestSent
          };
          var V = {
            func: k.onRequestReceived
          };
          __extends(j, p);
          j.prototype.spin = function (Q) {
            var N = this;
            var Y = this.dataSource;
            var W = Y.isFeatureBuy;
            var q = Y.transactionModel.transactionId;
            var S = {
              cs: x.settingMenuHelper.betSizeValue,
              ml: x.settingMenuHelper.betLevelValue,
              sn: this.currentSelectedMenuIndex ? this.dataSource.currentSelectedMenuIndex : 1,
              id: q,
              crl: undefined,
              wk: this.dataSource.playerModel.walletKey,
              fb: !!W && 2
            };
            this._onRequestSent("v2/Spin", S, function (z, f) {
              N.logResult("spin", f);
              N._onRequestReceived(z, f);
              if (Q) {
                Q(z, f);
              }
            });
          };
          j.prototype.updateTransactionInfo = function () {
            var Q = this._spinInfo;
            if (Q) {
              this.dataSource.isFeatureBuy = false;
              this.dataSource.updateTransactionInfo(Q);
            }
          };
          j.prototype._onRequestSent = function (Q, N, Y) {
            this.requestEngine(Q, N, Y);
          };
          j.prototype._onRequestReceived = function (Q, N) {
            if (N && N.dt) {
              var Y = N.dt.si;
              this.print(Y.sid);
              this._spinInfo = Y;
            }
          };
          __decorate([D.automationDec(G)], j.prototype, "_onRequestSent", null);
          __decorate([D.automationDec(V)], j.prototype, "_onRequestReceived", null);
          return j;
        }(T.default);
        K.default = C;
        var u = new C(L.wbsDataSource);
        K.wbsApiClient = u;
        cc._RF.pop();
      }
    }, {
      APIClient: "APIClient",
      AutomationDecorator: "AutomationDecorator",
      SettingMenuHelper: "SettingMenuHelper",
      TweaksData: "TweaksData",
      "WBSApiClient.spec": "WBSApiClient.spec",
      WBSDataSource: "WBSDataSource"
    }],
    WBSBigWinController: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "95993uxZSpGnLlF8wzkefdw", "WBSBigWinController")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("AutomationDecorator");
        var x = I("BigWinController");
        var L = I("WinTemplateConstant");
        var D = I("BigWinController.spec");
        var k = I("Utils");
        var C = I("BGMHandler");
        var j = I("AudioManager");
        var G = cc._decorator;
        var V = G.ccclass;
        var Q = G.property;
        var N = function (Y) {
          function W() {
            var q = Y !== null && Y.apply(this, arguments) || this;
            q.winTextSpriteList = [];
            q.vfxHolder = undefined;
            q.boardHolder = undefined;
            q._disposeBulletEffect = undefined;
            q._vfxD = undefined;
            q._bullets = undefined;
            q._vfxC = [];
            q._vfxA = [];
            q._coinParticle = undefined;
            q._vfxB = undefined;
            return q;
          }
          __extends(W, Y);
          W.prototype.onInit = function (q) {
            this._initBigWinNodes({
              skipButtonNode: this.buttonNode
            });
            if (q) {
              if (q.bigWin) {
                this.winTextSpriteList[L.BigWinRollState.BIG_WIN].spriteFrame = q.bigWin;
              }
              if (q.megaWin) {
                this.winTextSpriteList[L.BigWinRollState.MEGA_WIN].spriteFrame = q.megaWin;
              }
              if (q.superMegaWin) {
                this.winTextSpriteList[L.BigWinRollState.SUPER_MEGA_WIN].spriteFrame = q.superMegaWin;
              }
              var S = this.vfxHolder.children;
              this._vfxD = S[0];
              this._bullets = S[1];
              this._vfxC.push(S[2].getComponent(cc.Animation));
              this._vfxC.push(S[3].getComponent(cc.Animation));
              this._vfxA.push(S[5]);
              this._vfxA.push(S[6]);
              this._coinParticle = S[4].getComponent("AnimParticleSystem");
              this._vfxB = S[7].getComponent(cc.ParticleSystem);
            }
          };
          W.prototype.onPlay = function () {
            var q = this.numberRollNode;
            q.parent.stopAllActions();
            q.parent.scale = 0;
            q.parent.runAction(cc.scaleTo(0.3, 1).easing(cc.easeBackOut()));
            C.bgmHandler.fadeBgmTo(0, 0.3);
            if (j.GeneralAudioPool.bgm_bigwin_main) {
              j.GeneralAudioPool.bgm_bigwin_main.play();
            }
          };
          W.prototype.onPlayBigWinEffect = function (q) {
            this._skipButtonActive();
            this._coinParticle.resetSystem();
            this._vfxB.resetSystem();
            this._playShine();
            this._playEffects();
            q();
          };
          W.prototype.onPlayMegaWinEffect = function () {
            this._playShine();
            this._playEffects();
          };
          W.prototype.onPlaySuperMegaWinEffect = function () {
            this._playShine();
            this._playEffects();
          };
          W.prototype.onWinRollComplete = function () {
            this._playShine();
            var q = this.numberRollNode;
            q.parent.stopAllActions();
            q.parent.scale = 1;
            if (j.GeneralAudioPool.bgm_bigwin_main) {
              j.GeneralAudioPool.bgm_bigwin_main.stop();
            }
            if (j.GeneralAudioPool.bgm_bigwin_end) {
              j.GeneralAudioPool.bgm_bigwin_end.play();
            }
          };
          W.prototype.onStop = function () {
            C.bgmHandler.fadeBgmTo(1, 1);
          };
          W.prototype.onDismiss = function () {};
          W.prototype.onReset = function () {
            var q = this.numberRollNode;
            q.parent.stopAllActions();
            q.parent.scale = 0;
            this.boardHolder.children.forEach(function (S) {
              S.stopAllActions();
              S.active = false;
            });
            this.winTextSpriteList.forEach(function (S) {
              S.node.stopAllActions();
              S.node.active = false;
            });
            this._vfxD.stopAllActions();
            this._resetBulletEffect();
            this._vfxC.forEach(function (S) {
              S.stop();
              S.node.active = false;
            });
            this._vfxA.forEach(function (S) {
              S.stopAllActions();
              S.eulerAngles = cc.Vec3.ZERO;
            });
            this._coinParticle.stopSystem();
            this._vfxB.stopSystem();
            if (j.GeneralAudioPool.bgm_bigwin_main) {
              j.GeneralAudioPool.bgm_bigwin_main.stop();
            }
            if (j.GeneralAudioPool.bgm_bigwin_end) {
              j.GeneralAudioPool.bgm_bigwin_end.stop();
            }
          };
          W.prototype._initBigWinNodes = function () {};
          W.prototype._skipButtonActive = function () {};
          W.prototype._playEffects = function () {
            var q = this;
            this.winTextSpriteList.forEach(function (f, A) {
              f.node.active = A === q.winRollState;
              if (A === q.winRollState) {
                var M = f.node;
                M.stopAllActions();
                M.scale = 0;
                M.runAction(cc.sequence(cc.scaleTo(0.15, 3), cc.scaleTo(0.1, 1).easing(cc.easeBackOut())));
              }
            });
            this.boardHolder.children.forEach(function (f, A) {
              f.active = A === q.winRollState;
              if (A === q.winRollState) {
                f.stopAllActions();
                f.opacity = 0;
                f.scale = 2;
                f.runAction(cc.spawn(cc.fadeIn(0.1), cc.scaleTo(0.3, 1)));
              }
            });
            var S = this._vfxA[0];
            S.stopAllActions();
            S.eulerAngles = cc.Vec3.ZERO;
            S.runAction(cc.rotateBy(1, 15).repeatForever());
            var z = this._vfxA[1];
            z.stopAllActions();
            z.eulerAngles = cc.Vec3.ZERO;
            z.runAction(cc.rotateBy(1, -15).repeatForever());
            switch (this.winRollState) {
              case L.BigWinRollState.BIG_WIN:
                S.scale = 4.7619;
                z.scale = 4.7619;
                this._playBulletEffect(false);
                this._playVfxC(false);
                break;
              case L.BigWinRollState.MEGA_WIN:
                S.scale = 6.66;
                z.scale = 6.66;
                this._playBulletEffect(true);
                this._playVfxC(false);
                break;
              case L.BigWinRollState.SUPER_MEGA_WIN:
                S.scale = 9.99;
                z.scale = 9.99;
                this._playBulletEffect(true);
                this._playVfxC(true);
            }
          };
          W.prototype._playShine = function () {
            var q = this._vfxD;
            q.stopAllActions();
            q.opacity = 255;
            q.scale = 0;
            q.runAction(cc.spawn(cc.scaleTo(1, 10).easing(cc.easeOut(3)), cc.sequence(cc.delayTime(0.6), cc.fadeOut(0.4).easing(cc.easeIn(2)))));
          };
          W.prototype._playBulletEffect = function (q) {
            var S = this;
            if (q === undefined) {
              q = true;
            }
            var z = this._bullets;
            if (q) {
              if (!this._disposeBulletEffect) {
                z.active = true;
                var f = [];
                z.children.forEach(function (A) {
                  f.push(function (E) {
                    var F = k.randomInt(1, 3);
                    A.setScale(F);
                    A.opacity = 255;
                    var b = A.getComponent(cc.Animation);
                    b.setCurrentTime(0);
                    b.play();
                    E();
                  });
                  var M = k.randomInt(0, 3) * 0.1;
                  f.push(k.delayCallback(M));
                });
                this._disposeBulletEffect = k.sequenceCallback(f)(function () {
                  if (S._disposeBulletEffect) {
                    S._disposeBulletEffect = undefined;
                    S._playBulletEffect();
                  }
                });
              }
            } else {
              if (z.active === true) {
                z.children.forEach(function (A) {
                  A.getComponent(cc.Animation).stop();
                });
              }
              z.active = false;
            }
          };
          W.prototype._resetBulletEffect = function () {
            var q = this._disposeBulletEffect;
            this._disposeBulletEffect = undefined;
            if (q) {
              q();
            }
            var S = this.vfxHolder.children[1];
            S.children.forEach(function (z) {
              var f = z.getComponent(cc.Animation);
              f.stop();
              f.setCurrentTime(0);
              z.opacity = 0;
            });
            S.active = false;
          };
          W.prototype._playVfxC = function (q) {
            var S = this._vfxC[0];
            var z = this._vfxC[1];
            if (q) {
              if (S.node.active === false) {
                S.node.active = true;
                S.stop();
                S.play();
              }
              if (z.node.active === false) {
                z.node.active = true;
                z.stop();
                z.play();
              }
            } else {
              if (S.node.active === true) {
                S.stop();
                S.node.active = false;
              }
              if (z.node.active === true) {
                z.stop();
                z.node.active = false;
              }
            }
          };
          __decorate([Q({
            type: [cc.Sprite],
            tooltip: false
          })], W.prototype, "winTextSpriteList", undefined);
          __decorate([Q(cc.Node)], W.prototype, "vfxHolder", undefined);
          __decorate([Q(cc.Node)], W.prototype, "boardHolder", undefined);
          __decorate([T.automationDec({
            func: D.skipBigWinAnimationActiveEvent
          })], W.prototype, "onWinRollComplete", null);
          __decorate([T.automationDec({
            func: D.initBigWinNodes
          })], W.prototype, "_initBigWinNodes", null);
          __decorate([T.automationDec({
            func: D.skipBigWinButtonActiveEvent
          })], W.prototype, "_skipButtonActive", null);
          return __decorate([V], W);
        }(x.default);
        K.default = N;
        cc._RF.pop();
      }
    }, {
      AudioManager: "AudioManager",
      AutomationDecorator: "AutomationDecorator",
      BGMHandler: "BGMHandler",
      BigWinController: "BigWinController",
      "BigWinController.spec": "BigWinController.spec",
      Utils: "Utils",
      WinTemplateConstant: "WinTemplateConstant"
    }],
    WBSDataSource: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "ea57bfn2ppGbJ8oIv5a3F58", "WBSDataSource")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        K.wbsDataSource = undefined;
        var T = I("PlayerModel");
        var x = I("DataSource");
        var L = I("RtConfig");
        var D = I("WBSSlotTransactionModel");
        var k = I("WBSSlotSystemModel");
        var C = function (p) {
          function j() {
            var G = p.call(this, {
              playerModel: new T.default(),
              systemModel: new k.default(L.cs_Config),
              transactionModel: new D.default()
            }) || this;
            G.autoSpinCount = -1;
            G.demoReminderCount = -1;
            G.currentSelectedMenuIndex = 0;
            G.isReplayDone = false;
            G.isRefreshWorld = false;
            G.isReplayStarted = false;
            G.isFeatureBuy = false;
            return G;
          }
          __extends(j, p);
          return j;
        }(x.default);
        K.default = C;
        var u = new C();
        K.wbsDataSource = u;
        cc._RF.pop();
      }
    }, {
      DataSource: "DataSource",
      PlayerModel: "PlayerModel",
      RtConfig: "RtConfig",
      WBSSlotSystemModel: "WBSSlotSystemModel",
      WBSSlotTransactionModel: "WBSSlotTransactionModel"
    }],
    WBSFreeSpinGameState: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "542e1UUE4JBmp28UPjLy4JX", "WBSFreeSpinGameState")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var x = I("Utils");
        var L = I("TransactionStateMachineHandler");
        var D = I("GameEventHandler");
        var k = I("NotifyHelper");
        var C = I("SettingMenuHelper");
        var j = I("AppState");
        var G = I("UIStateMachine");
        var V = I("SlotGameTools");
        var Q = I("GameConstant");
        var N = I("WBSRequestApiState");
        var Y = I("WBSPrizeState");
        var W = I("WBSResultState");
        var q = I("WBSUIState");
        var z = I("WBSRespinState");
        var A = I("InfoBoardController");
        var M = I("BGMHandler");
        var E = I("AudioManager");
        var F = I("AudioConstant");
        var H = function (w) {
          function U(B, P, X) {
            var J = w.call(this, B, P, X) || this;
            J.name = "Free Spin Game State";
            J._preloadState = undefined;
            J._isForceExit = false;
            return J;
          }
          __extends(U, w);
          U.prototype.onReady = function () {
            this._setupUIStateMachine();
          };
          U.prototype.onRun = function () {
            var B = this;
            this._setup(function () {
              B.uiStateMachine.run();
            });
          };
          U.prototype.onExit = function (B) {
            if (this._isForceExit) {
              B();
            } else {
              this._transitionToNextState(B);
            }
          };
          U.prototype.onForceExit = function (B) {
            this._isForceExit = true;
            this.uiStateMachine.exit();
            B();
          };
          U.prototype.onDestroy = function (B) {
            this._destroyPreloadState();
            this.uiStateMachine = undefined;
            B();
          };
          U.prototype._setup = function (B) {
            var P = this.dataSource.transactionModel.stateTransitionFrom;
            var X = this.dataSource.isRefreshWorld;
            D.emitGameFlowStateChangedEvent({
              displayState: "Start",
              flowType: "BonusGame"
            });
            var Z0 = this.controllerPool.generalControllers;
            var Z1 = Z0.spinButtonController;
            var Z2 = Z0.settingMenuFooterHolder;
            var Z3 = Z0.settingMenuFooterController;
            var Z4 = Z0.symbolPayoutController;
            switch (P) {
              case Q.TransitionState.NORMAL:
              case Q.TransitionState.RESPIN:
                if (X) {
                  x.sequenceCallback(this._preSetupUI.bind(this), this._setupUI.bind(this), this._setupBackground.bind(this), this._switchMultiplierSkipAnim.bind(this))(B);
                } else {
                  x.sequenceCallback(this._playScatterWinEffect.bind(this), x.delayCallback(1.5), this._showBonusLoading.bind(this), this._preSetupUI.bind(this), x.spawnCallback(this._loadBonusAssets.bind(this), this._setupBackground.bind(this)), this._setupUI.bind(this), this._loadComplete.bind(this), this._switchMultiplier.bind(this))(B);
                }
                break;
              case Q.TransitionState.FREE_SPIN:
              case Q.TransitionState.FREE_SPIN_RESPIN:
                C.settingMenuHelper.setHidden(true);
                Z1.hide();
                Z3.changeHolder(Z2);
                Z4.disablePanel();
                Z4.clearOnClickCallback();
                Z4.hidePopOutItem();
                B();
                break;
              default:
                B();
            }
          };
          U.prototype._playScatterWinEffect = function (B) {
            this.controllerPool.generalControllers.slotController.playScatterWinEffect();
            if (B) {
              B();
            }
          };
          U.prototype._preSetupUI = function (B) {
            var P = this.controllerPool.generalControllers;
            var X = P.multiplierController;
            var J = P.infoboardController;
            X.reloadMultiplier(1, false);
            J.showTips(A.InfoboardUIState.FREE_SPIN_TIPS, true);
            if (B) {
              B();
            }
          };
          U.prototype._setupUI = function (B) {
            var P = this.controllerPool.generalControllers;
            var X = P.spinButtonController;
            var J = P.symbolPayoutController;
            var Z0 = P.settingMenuFooterController;
            var Z1 = P.settingMenuFooterHolder;
            var Z2 = P.featureBuyController;
            var Z3 = this.dataSource.playerModel.balance;
            var Z4 = this.dataSource.transactionModel.freeSpin;
            Z0.changeHolder(Z1);
            C.settingMenuHelper.setHidden(true);
            C.settingMenuHelper.setBalance(Z3);
            J.disablePanel();
            J.clearOnClickCallback();
            J.hidePopOutItem();
            X.hide();
            this.controllerPool.bonusControllers.remainingFreeSpinController.show(Z4.step);
            Z2.hideFeatureButton();
            Z2.disableFeatureBuy();
            Z2.hideFeatureBuy();
            if (B) {
              B();
            }
          };
          U.prototype._setupUIStateMachine = function () {
            this.uiStateMachine = new G.default({
              getNextUIState: this._evaluateUIState.bind(this),
              exitUIStateMachineCallback: this.exit.bind(this)
            });
          };
          U.prototype._transitionToNextState = function (B) {
            var P = this.dataSource.transactionModel;
            if (P.stateTransitionTo === Q.TransitionState.NORMAL) {
              var X = P.freeSpin;
              if ((X ? X.accumulatedWin : 0) > 0) {
                x.sequenceCallback(x.delayCallback(1), x.spawnCallback(this._playTotalWin.bind(this), this._resetUI.bind(this)), this._releaseBonusAssets.bind(this), this._playNormalBgm.bind(this), this._showInfoboardTotalWin.bind(this))(B);
              } else {
                x.sequenceCallback(x.spawnCallback(this._playTotalWin.bind(this), this._resetUI.bind(this)), this._releaseBonusAssets.bind(this), this._playNormalBgm.bind(this), this._showInfoboardTotalWin.bind(this))(B);
              }
            } else {
              L.transitionCompleteCallback("idle")(B);
            }
          };
          U.prototype._evaluateUIState = function () {
            var B = this;
            var P = this.uiStateMachine.currentUIState;
            var X = this.dataSource.transactionModel.stateTransitionTo === Q.TransitionState.FREE_SPIN_RESPIN;
            var J = undefined;
            switch (true) {
              case P instanceof q.default && !X:
              case P instanceof z.default:
                var Z0 = this._preloadState;
                this._preloadState = undefined;
                J = Z0 || this._runRequestApiState();
                break;
              case P instanceof N.default:
                J = this._runResultState();
                break;
              case P instanceof W.default:
                J = this._runPrizeState();
                break;
              case P instanceof Y.default:
                break;
              case P instanceof q.default && X:
                var Z1 = this.dataSource.isRefreshWorld;
                var Z2 = this._runRespinState();
                Z2.setPreloadStateCallback(function () {
                  if (!Z1) {
                    B._preloadState = B._runRequestApiState();
                  }
                });
                J = Z2;
                break;
              default:
                J = this._runUIState();
            }
            return J;
          };
          U.prototype._runRequestApiState = function () {
            var B = this.dataSource;
            return new N.default(B, this.controllerPool, undefined);
          };
          U.prototype._runResultState = function () {
            var B = this.dataSource;
            return new W.default(B, this.controllerPool, undefined);
          };
          U.prototype._runPrizeState = function () {
            var B = this.dataSource;
            return new Y.default(B, this.controllerPool, undefined);
          };
          U.prototype._runRespinState = function () {
            var B = this.dataSource;
            return new z.default(B, this.controllerPool, undefined);
          };
          U.prototype._runUIState = function () {
            var B = this.dataSource;
            return new q.default(B, this.controllerPool, undefined);
          };
          U.prototype._showBonusLoading = function (B) {
            var P = this.controllerPool.generalControllers;
            var X = P.bonusLoadingController;
            var J = P.settingMenuFooterController;
            var Z0 = P.settingMenuFooterHolder;
            var Z1 = this.dataSource.transactionModel.freeSpin.totalStep;
            J.changeHolder(Z0);
            X.show(Z1, B);
            E.playAudio(F.GENERAL_AUDIO.fsTrans.key);
            M.bgmHandler.playBgm(Q.TransitionState.FREE_SPIN);
          };
          U.prototype._loadBonusAssets = function (B) {
            this.controllerPool.loadingController.loadBonusBundle(B);
          };
          U.prototype._loadComplete = function (B) {
            var P = this.dataSource.isGameReplaying;
            this.controllerPool.generalControllers.bonusLoadingController.onLoadComplete(P, B);
          };
          U.prototype._releaseBonusAssets = function (B) {
            this.controllerPool.loadingController.releaseBonusBundle(B);
          };
          U.prototype._setupBackground = function (B) {
            var P = this.controllerPool.generalControllers;
            var X = P.slotController;
            var J = P.slotTintController;
            var Z0 = P.backgroundController;
            var Z1 = P.foregroundController;
            var Z2 = P.waysController;
            var Z3 = P.slowDropEffectController;
            var Z4 = P.fastSpinController;
            Z0.switchUI(Q.TransitionState.FREE_SPIN);
            Z1.switchUI(Q.TransitionState.FREE_SPIN);
            Z3.switchUI(Q.TransitionState.FREE_SPIN);
            X.removeOverlaySlotItems();
            J.node.setPosition(0, 50);
            X.node.setPosition(0, 50);
            X.addOverlayScatterAndWild();
            Z4.node.setPosition(0, 50);
            Z4.reset();
            Z2.node.active = true;
            if (B) {
              B();
            }
          };
          U.prototype._resetUI = function (B) {
            var P = this;
            x.delayCallback(0.5)(function () {
              var X = P.dataSource.transactionModel.gameMultiplier;
              var J = P.controllerPool.generalControllers;
              var Z0 = J.backgroundController;
              var Z1 = J.foregroundController;
              var Z2 = J.waysController;
              var Z3 = J.slotController;
              var Z4 = J.slotTintController;
              var Z5 = J.slowDropEffectController;
              var Z6 = J.fastSpinController;
              Z0.switchUI(Q.TransitionState.NORMAL);
              Z1.switchUI(Q.TransitionState.NORMAL);
              Z5.switchUI(Q.TransitionState.NORMAL);
              Z3.removeOverlaySlotItems();
              Z4.node.setPosition(0, 180);
              Z3.node.setPosition(0, 180);
              Z3.addOverlayScatterAndWild();
              Z6.node.setPosition(0, 180);
              Z6.reset();
              Z2.node.active = false;
              C.settingMenuHelper.setHidden(false);
              var Z7 = P.controllerPool.generalControllers;
              var Z8 = Z7.spinButtonController;
              var Z9 = Z7.settingMenuFooterController;
              var ZZ = Z7.multiplierController;
              Z8.show();
              Z9.returnHolder();
              P.controllerPool.bonusControllers.remainingFreeSpinController.hide();
              ZZ.reloadMultiplier(X, false);
              if (B) {
                B();
              }
            });
          };
          U.prototype._playTotalWin = function (B) {
            var P = this.controllerPool.generalControllers.totalWinController;
            var X = this.dataSource.transactionModel.freeSpin;
            var J = X ? X.accumulatedWin : 0;
            function Z0() {
              L.transitionCompleteCallback("setup")(B);
            }
            if (J > 0) {
              var Z1 = this.dataSource.isGameReplaying;
              var Z2 = {
                freeSpinCount: X.totalStep
              };
              P.play(J, 0, Z0, Z1, Z2);
            } else {
              x.sequenceCallback(function (Z3) {
                k.showFullLoadingPage();
                Z3();
              }, x.delayCallback(1), function (Z3) {
                k.hideFullLoadingPage();
                Z3();
              })(Z0);
            }
          };
          U.prototype._playNormalBgm = function (B) {
            M.bgmHandler.playBgm(Q.TransitionState.NORMAL);
            B();
          };
          U.prototype._showInfoboardTotalWin = function (B) {
            var P = this.dataSource.transactionModel;
            var X = P.accumulatedWinAmount;
            var J = P.gameMultiplier;
            var Z0 = this.controllerPool.generalControllers.infoboardController;
            if (X > 0) {
              var Z1 = this._getWinThresholds();
              if (V.isBigWinThreshold(X, Z1)) {
                Z0.play({
                  playState: A.InfoBoardShowState.HIGH_PAY_BIG_TOTAL_WIN,
                  amount: X,
                  multiplierNumber: J
                }, B);
              } else if (V.isMediumWinThreshold(X, Z1)) {
                Z0.play({
                  playState: A.InfoBoardShowState.INSTANT_HIGH_PAY_TOTAL_WIN,
                  amount: X,
                  multiplierNumber: J
                }, B);
              } else {
                Z0.play({
                  playState: A.InfoBoardShowState.LOW_PAY_TOTAL_WIN,
                  amount: X,
                  multiplierNumber: J
                }, B);
              }
            } else {
              Z0.showTips(A.InfoboardUIState.NORMAL_TIPS, true);
              if (B) {
                B();
              }
            }
          };
          U.prototype._switchMultiplier = function (B) {
            this.controllerPool.generalControllers.multiplierController.playTransformToFreeSpinMutliplier(B);
          };
          U.prototype._switchMultiplierSkipAnim = function (B) {
            this.controllerPool.generalControllers.multiplierController.reloadMultiplier(8, true);
            B();
          };
          U.prototype._getWinThresholds = function () {
            var B = this.dataSource.systemModel;
            var P = B.maxLineNumber;
            var X = B.winThresholds;
            var J = this.dataSource.transactionModel;
            var Z0 = J.betSizeValue;
            var Z1 = J.betLevelValue;
            return X.getAllThresholds(Z0, Z1, P);
          };
          U.prototype._destroyPreloadState = function () {
            var B = this._preloadState;
            if (B) {
              B.destroy();
              this._preloadState = undefined;
            }
          };
          return U;
        }(j.default);
        K.default = H;
        cc._RF.pop();
      }
    }, {
      AppState: "AppState",
      AudioConstant: "AudioConstant",
      AudioManager: "AudioManager",
      BGMHandler: "BGMHandler",
      GameConstant: "GameConstant",
      GameEventHandler: "GameEventHandler",
      InfoBoardController: "InfoBoardController",
      NotifyHelper: "NotifyHelper",
      SettingMenuHelper: "SettingMenuHelper",
      SlotGameTools: "SlotGameTools",
      TransactionStateMachineHandler: "TransactionStateMachineHandler",
      UIStateMachine: "UIStateMachine",
      Utils: "Utils",
      WBSPrizeState: "WBSPrizeState",
      WBSRequestApiState: "WBSRequestApiState",
      WBSRespinState: "WBSRespinState",
      WBSResultState: "WBSResultState",
      WBSUIState: "WBSUIState"
    }],
    WBSFreeSpinModel: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "08a7d4KfrBBvpHCYQNoE6SK", "WBSFreeSpinModel")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = function () {
          function x(L) {
            var D = L.aw;
            var k = L.s;
            var C = L.ts;
            var u = L.as;
            this._accumulatedWin = D;
            this._step = k;
            this._totalStep = C;
            this._additionalStep = u;
          }
          Object.defineProperty(x.prototype, "accumulatedWin", {
            get: function () {
              return this._accumulatedWin;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(x.prototype, "step", {
            get: function () {
              return this._step;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(x.prototype, "totalStep", {
            get: function () {
              return this._totalStep;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(x.prototype, "additionalStep", {
            get: function () {
              return this._additionalStep;
            },
            enumerable: false,
            configurable: true
          });
          return x;
        }();
        K.default = T;
        cc._RF.pop();
      }
    }, {}],
    WBSGameUtils: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "8caf2Z5GP1O36zsmaXn7b4T", "WBSGameUtils")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        K.getPositionRemoveColumnList = K.lerpTo = K.isPassUKGC = K.getProcessedReelSymbols = K.differentArray = K.uniqueArray = K.scheduleIterator = undefined;
        var T = I("GameUtils");
        var x = I("Utils");
        var L = I("WBSDataSource");
        var D = I("GameConstant");
        var k = x.getSharedScheduler();
        K.scheduleIterator = function (C, u, c, p) {
          var j = 0;
          var G = 0;
          function V() {
            if (++G === c && p) {
              p();
            }
          }
          function Q() {
            C(j, V);
            j++;
          }
          Q();
          if (c >= 2) {
            k.schedule(Q, u, c - 2, 0);
          }
          return function () {
            if (c >= 2) {
              k.unschedule(Q);
            }
            p = undefined;
          };
        };
        K.uniqueArray = function (C) {
          return C.filter(function (u, c, p) {
            return p.indexOf(u) === c;
          });
        };
        K.differentArray = function (C, u) {
          var c = [];
          for (var p = 0; p < C.length; p++) {
            if (!u.includes(C[p])) {
              c.push(C[p]);
            }
          }
          return c;
        };
        K.getProcessedReelSymbols = function (C, u) {
          var c = [];
          var p = u ? Object.keys(u) : [];
          C.forEach(function (V) {
            c.push(V + D.BLOCK_TYPE.NORMAL);
          });
          for (var j = 0; j < p.length; j++) {
            var l = u[p[j]];
            var G = c[l] % 100;
            c[l] = G + D.BLOCK_TYPE.GOLD;
          }
          return c;
        };
        K.isPassUKGC = function (C) {
          return T.checkOperatorProfit(C, L.wbsDataSource);
        };
        K.lerpTo = function (C, u, c, p = 0) {
          var j = 0;
          var l = 0;
          function G(V) {
            if ((j += V / p) >= 1) {
              k.unschedule(G);
              j = 1;
            }
            l = cc.misc.lerp(u, c, j);
            C(l, j);
          }
          k.schedule(G, 0, cc.macro.REPEAT_FOREVER, 0);
          return function () {
            return k.unschedule(G);
          };
        };
        K.getPositionRemoveColumnList = function (C) {
          var u = [];
          for (var c = 0; c < C.length; c++) {
            if (C[c].length > 0) {
              u.push(c);
            }
          }
          return u;
        };
        cc._RF.pop();
      }
    }, {
      GameConstant: "GameConstant",
      GameUtils: "GameUtils",
      Utils: "Utils",
      WBSDataSource: "WBSDataSource"
    }],
    WBSIdleState: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "67aa1MWLyVGqJ7DSmrzs2GE", "WBSIdleState")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("TransactionStateMachineHandler");
        var x = I("Utils");
        var L = I("SpinButtonController");
        var D = I("IdleState");
        var k = I("SettingMenuHelper");
        var C = I("SpaceBarInterrupter");
        var p = I("SlotAnalyticsEnum");
        var j = function (G) {
          function V(Q, N, Y) {
            var W = G.call(this, Q, N, Y) || this;
            W.name = "Idle State";
            var q = N.generalControllers;
            var S = q.slotController;
            var z = q.spinButtonController;
            W.setSlotController(S);
            W.setSpinButtonController(z);
            return W;
          }
          __extends(V, G);
          V.prototype.run = function () {
            var Q = this;
            if (this.dataSource.isReplayDone) {
              G.prototype.run.call(this);
            } else {
              T.goToStateCallback("idle", true)(function () {
                G.prototype.run.call(Q);
              });
            }
          };
          V.prototype.onStateFullyIdle = function () {
            var Q = this.controllerPool.generalControllers;
            var N = Q.symbolPayoutController;
            var Y = Q.featureBuyController;
            var W = this.dataSource.systemModel.featureBuy;
            var q = this.dataSource.playerModel.minimumBetAmount;
            if (W && W.isSupported && k.settingMenuHelper.additionalBetCalculation() <= W.threshold) {
              Y.showFeatureButton();
              Y.enableFeatureBuy();
              if (k.settingMenuHelper.additionalBetCalculation() < q) {
                Y.playButtonHoverEffect();
              }
            } else {
              Y.hideFeatureButton();
              Y.disableFeatureBuy();
            }
            N.setupButtonEvent();
            N.enablePanel();
          };
          V.prototype.onExit = function (Q) {
            var N = this.controllerPool.generalControllers;
            var Y = N.symbolPayoutController;
            var W = N.featureBuyController;
            var q = N.spinButtonController;
            if (q && q.mode === L.SpinButtonMode.AUTOSPIN) {
              W.hideFeatureButton();
            }
            Y.hidePopOutItem();
            Y.clearOnClickCallback();
            Y.disablePanel();
            T.transitionCompleteCallback("action")(Q);
          };
          V.prototype.defineSystemEventConfigParam = function () {
            var Q = this;
            return {
              callback: function () {
                var N = Q.dataSource;
                if (N.isReplayDone) {
                  N.isReplayDone = false;
                  C.spaceBarInterrupter.resume();
                  Q.tryAutoSpin();
                } else {
                  x.sequenceCallback(T.transitionCompleteCallback("idle"), T.goToStateCallback("action", true))(Q.tryAutoSpin.bind(Q));
                }
              }
            };
          };
          V.prototype.disableAvailableActions = function () {
            this.controllerPool.generalControllers.featureBuyController.disableFeatureBuy();
          };
          V.prototype.getCostPerSpin = function (Q) {
            var N = this.dataSource.systemModel;
            var Y = N.maxLineNumber;
            var W = N.featureBuy;
            var q = this.dataSource.transactionModel;
            var S = q.betSizeValue;
            var z = q.betLevelValue;
            if ((W && W.betMultiplier !== undefined) === false) {
              throw Error("Invalid feature buy bet multiplier");
            }
            if (Q === p.SpinTrigger.FEATURE_BUY) {
              return x.toDecimalWithExp(S * z * Y * W.betMultiplier, 2);
            } else {
              return G.prototype.getCostPerSpin.call(this, Q);
            }
          };
          V.prototype.spinInvalidBet = function (Q) {
            G.prototype.spinInvalidBet.call(this, Q);
            this.dataSource.isFeatureBuy = false;
          };
          return V;
        }(D.default);
        K.default = j;
        cc._RF.pop();
      }
    }, {
      IdleState: "IdleState",
      SettingMenuHelper: "SettingMenuHelper",
      SlotAnalyticsEnum: "SlotAnalyticsEnum",
      SpaceBarInterrupter: "SpaceBarInterrupter",
      SpinButtonController: "SpinButtonController",
      TransactionStateMachineHandler: "TransactionStateMachineHandler",
      Utils: "Utils"
    }],
    WBSNormalGameState: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "72b4e3mj8BEebf5FY/wO+S6", "WBSNormalGameState")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("GameEventHandler");
        var x = I("TransactionStateMachineHandler");
        var L = I("AppState");
        var D = I("UIStateMachine");
        var k = I("SettingMenuHelper");
        var C = I("GameConstant");
        var j = I("WBSIdleState");
        var G = I("WBSPrizeState");
        var V = I("WBSResultState");
        var Q = I("WBSRespinState");
        var N = I("WBSRequestApiState");
        var Y = I("WBSUIState");
        var W = function (q) {
          function S() {
            var z = q !== null && q.apply(this, arguments) || this;
            z.name = "Nornal Game State";
            z._preloadState = undefined;
            z._isForceExit = false;
            return z;
          }
          __extends(S, q);
          S.prototype.onReady = function () {
            this._setupUIStateMachine();
          };
          S.prototype.onRun = function () {
            var z = this;
            this._setup(function () {
              z.uiStateMachine.run();
            });
          };
          S.prototype.onExit = function (z) {
            if (this._isForceExit) {
              z();
            } else {
              this._transitionToNextState(z);
            }
          };
          S.prototype.onForceExit = function (z) {
            this._isForceExit = true;
            this.uiStateMachine.exit();
            z();
          };
          S.prototype.onDestroy = function (z) {
            this._destroyPreloadState();
            this.uiStateMachine = undefined;
            z();
          };
          S.prototype._setup = function (z) {
            var A = this.controllerPool.generalControllers.settingMenuFooterController;
            switch (true) {
              case this.dataSource.transactionModel.stateTransitionFrom === C.TransitionState.NORMAL:
                A.returnHolder();
                k.settingMenuHelper.setHidden(false);
            }
            T.emitGameFlowStateChangedEvent({
              displayState: "End",
              flowType: "BonusGame"
            });
            z();
          };
          S.prototype._evaluateUIState = function () {
            var z = this;
            var A = this.uiStateMachine.currentUIState;
            var M = this.dataSource.transactionModel.stateTransitionTo === C.TransitionState.RESPIN;
            var E = undefined;
            switch (true) {
              case A instanceof j.default:
              case A instanceof Q.default:
                var F = this._preloadState;
                this._preloadState = undefined;
                E = F || this._runRequestApiState();
                break;
              case A instanceof N.default:
                E = this._runResultState();
                break;
              case A instanceof V.default:
                E = this._runPrizeState();
                break;
              case A instanceof G.default:
                break;
              case A instanceof Y.default:
                if (M) {
                  var b = this.dataSource.isRefreshWorld;
                  var H = this._runRespinState();
                  H.setPreloadStateCallback(function () {
                    if (!b) {
                      z._preloadState = z._runRequestApiState();
                    }
                  });
                  E = H;
                } else {
                  E = this._runIdleState();
                }
                break;
              default:
                E = this._runUIState();
            }
            return E;
          };
          S.prototype._setupUIStateMachine = function () {
            this.uiStateMachine = new D.default({
              getNextUIState: this._evaluateUIState.bind(this),
              exitUIStateMachineCallback: this.exit.bind(this)
            });
          };
          S.prototype._transitionToNextState = function (z) {
            var A = this.dataSource.transactionModel.stateTransitionTo === C.TransitionState.NORMAL ? "setup" : "idle";
            x.transitionCompleteCallback(A)(z);
          };
          S.prototype._runUIState = function () {
            var z = this.dataSource;
            return new Y.default(z, this.controllerPool, undefined);
          };
          S.prototype._runIdleState = function () {
            var z = this.dataSource;
            return new j.default(z, this.controllerPool, undefined);
          };
          S.prototype._runRequestApiState = function () {
            var z = this.dataSource;
            return new N.default(z, this.controllerPool, undefined);
          };
          S.prototype._runRespinState = function () {
            var z = this.dataSource;
            return new Q.default(z, this.controllerPool, undefined);
          };
          S.prototype._runResultState = function () {
            var z = this.dataSource;
            return new V.default(z, this.controllerPool, undefined);
          };
          S.prototype._runPrizeState = function () {
            var z = this.dataSource;
            return new G.default(z, this.controllerPool, undefined);
          };
          S.prototype._destroyPreloadState = function () {
            var z = this._preloadState;
            if (z) {
              z.destroy();
              this._preloadState = undefined;
            }
          };
          return S;
        }(L.default);
        K.default = W;
        cc._RF.pop();
      }
    }, {
      AppState: "AppState",
      GameConstant: "GameConstant",
      GameEventHandler: "GameEventHandler",
      SettingMenuHelper: "SettingMenuHelper",
      TransactionStateMachineHandler: "TransactionStateMachineHandler",
      UIStateMachine: "UIStateMachine",
      WBSIdleState: "WBSIdleState",
      WBSPrizeState: "WBSPrizeState",
      WBSRequestApiState: "WBSRequestApiState",
      WBSRespinState: "WBSRespinState",
      WBSResultState: "WBSResultState",
      WBSUIState: "WBSUIState"
    }],
    WBSPopOutItem: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "caad0pqW6xKH6zUM9ZK/HDT", "WBSPopOutItem")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("Utils");
        var x = I("PopOutItem");
        var L = I("AudioConstant");
        var D = I("AudioManager");
        var k = I("GameConstant");
        var C = I("WBSSlotController");
        var j = cc._decorator;
        var G = j.ccclass;
        var V = j.property;
        var Q = function (N) {
          function Y() {
            var W = N !== null && N.apply(this, arguments) || this;
            W.backgroundSprite = undefined;
            W.payoutContainer = undefined;
            W.descLabel = undefined;
            W.symbolHolder = undefined;
            W.payoutLayouts = [];
            W._isLeftToRight = true;
            W._slotItemOriginalParent = undefined;
            return W;
          }
          __extends(Y, N);
          Y.prototype.showItem = function (W, q, S, z, A, M, E, F, b) {
            if (this._slotItemOriginalParent) {
              this.hide();
            }
            D.playAudio(L.GENERAL_AUDIO.uiInfo.key);
            N.prototype.showItem.call(this, W, q, S, z, A, M, E, F, b);
            this._isLeftToRight = S < 12;
            this._setItemDirection(z);
            this._setRTLLanguage();
            var H = C.default.getSlotItemByIndex(S);
            this._slotItemOriginalParent = H.contentHolder.parent;
            T.transferToParent(H.contentHolder, this.symbolHolder);
          };
          Y.prototype.hideItem = function () {
            if (this._slotItemOriginalParent) {
              var W = this.symbolHolder.children[0];
              T.transferToParent(W, this._slotItemOriginalParent);
              W.setPosition(0, 0);
              this._slotItemOriginalParent = undefined;
            }
            N.prototype.hideItem.call(this);
          };
          Y.prototype.setPayoutValue = function (W, q) {
            var S = W % 100;
            var z = q[S];
            var f = Object.keys(z);
            f.reverse();
            if (S !== k.SlotSymbols.Wild && S !== k.SlotSymbols.Scatter) {
              this.payoutContainer.active = true;
              this.descLabel.node.active = false;
              this.payoutContainer.children.forEach(function (A, M) {
                var E = A.children[1].getComponent("NumberDisplayController");
                E.clear();
                E.displayNumber(z[f[M]]);
              });
            } else {
              this.payoutContainer.active = false;
              this.descLabel.node.active = true;
              if (S === k.SlotSymbols.Wild) {
                this.descLabel.string = shell.I18n.t("WildBountyShowdown.WildDesc");
              } else if (S === k.SlotSymbols.Scatter) {
                this.descLabel.string = shell.I18n.t("WildBountyShowdown.ScatterDesc");
              } else {
                this.descLabel.string = "";
              }
            }
          };
          Y.prototype._setItemDirection = function (W) {
            var q = W % 100;
            this.backgroundSprite.node.x = 0;
            if (this._isLeftToRight) {
              this.node.anchorX = 0;
              this.node.x -= 80;
              this.payoutContainer.setPosition(90, this.payoutContainer.y);
              this.descLabel.node.x = 90;
              this.symbolHolder.setPosition(80, 0);
            } else {
              this.descLabel.node.x = -105;
              if (q === k.SlotSymbols.Wild) {
                this.backgroundSprite.node.x = -20;
                this.descLabel.node.x = -125;
              }
              this.node.anchorX = 1;
              this.node.x += 200;
              this.payoutContainer.setPosition(-90, this.payoutContainer.y);
              this.symbolHolder.setPosition(-80, 0);
            }
          };
          Y.prototype._setRTLLanguage = function () {
            if (k.isRTL) {
              this.payoutLayouts.forEach(function (W) {
                W.horizontalDirection = cc.Layout.HorizontalDirection.RIGHT_TO_LEFT;
                W.node.anchorX = 1;
                W.node.x = 60;
              });
            }
          };
          __decorate([V(cc.Sprite)], Y.prototype, "backgroundSprite", undefined);
          __decorate([V(cc.Node)], Y.prototype, "payoutContainer", undefined);
          __decorate([V(cc.Label)], Y.prototype, "descLabel", undefined);
          __decorate([V(cc.Node)], Y.prototype, "symbolHolder", undefined);
          __decorate([V([cc.Layout])], Y.prototype, "payoutLayouts", undefined);
          return __decorate([G], Y);
        }(x.default);
        K.default = Q;
        cc._RF.pop();
      }
    }, {
      AudioConstant: "AudioConstant",
      AudioManager: "AudioManager",
      GameConstant: "GameConstant",
      PopOutItem: "PopOutItem",
      Utils: "Utils",
      WBSSlotController: "WBSSlotController"
    }],
    WBSPrizeState: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "3abd4EpJjRPAJTm/EYgPzXu", "WBSPrizeState")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("Utils");
        var x = I("TransactionStateMachineHandler");
        var L = I("PrizeState");
        var D = I("SettingMenuHelper");
        var k = I("SlotGameTools");
        var C = I("GameConstant");
        var j = I("InfoBoardController");
        I("WBSTweaksConfig");
        var G = I("AutomationDecorator");
        var V = I("WinHighlight.spec");
        var Q = function (N) {
          function Y(W, q, S) {
            var z = N.call(this, W, q, S) || this;
            z.name = "Prize State";
            var f = q.generalControllers;
            var A = f.slotController;
            var M = f.spinButtonController;
            z.setSlotController(A);
            z.setSpinButtonController(M);
            return z;
          }
          __extends(Y, N);
          Y.prototype.renderPrize = function () {
            var W = this.dataSource.transactionModel;
            var q = W.isTransactionEnd;
            var S = W.gameMultiplier;
            if (!q && S > 1) {
              T.sequenceCallback(this._updateTransitionState.bind(this), T.spawnCallback(this.renderLines.bind(this), T.sequenceCallback(T.spawnCallback(this._playMultiplier.bind(this), this._preSymbolBreakEffect.bind(this)), this.playPrize.bind(this))), T.spawnCallback(this._showFreeSpinWon.bind(this), this._checkBonusStep.bind(this)))(this.exit.bind(this));
            } else {
              T.sequenceCallback(this._updateTransitionState.bind(this), T.spawnCallback(this.renderLines.bind(this), T.sequenceCallback(this._preSymbolBreakEffect.bind(this), T.delayCallback(0.3)), this.playPrize.bind(this)), T.spawnCallback(this._showFreeSpinWon.bind(this), this._checkBonusStep.bind(this)))(this.exit.bind(this));
            }
          };
          Y.prototype.renderLines = function (W) {
            N.prototype.renderLines.call(this, W);
          };
          Y.prototype.playAllLines = function (W) {
            if (this.dataSource.transactionModel.isMaximumWin) {
              W();
            } else {
              this._playHighLightEffect(W);
            }
          };
          Y.prototype.playPrize = function (W) {
            var q = this.dataSource.transactionModel;
            var S = q.singleSpinAccumulatedWin;
            var z = q.totalWinAmount;
            var f = q.stateTransitionFrom;
            var A = q.isTransactionEnd;
            var M = this.getWinThresholds();
            var E = f !== C.TransitionState.NORMAL && A ? S : z;
            if (A) {
              if (k.isBigWinThreshold(E, M)) {
                this.runBigPrizeState(E, W);
              } else if (k.isMediumWinThreshold(S, M)) {
                this.runMediumPrizeState(E, W);
              } else if (E > 0) {
                this.runSmallPrizeState(E, W);
              } else {
                this._updatePrizes();
                W();
              }
            } else {
              if (k.isMediumWinThreshold(S, M)) {
                this.runMediumPrizeState(E);
              } else if (E > 0) {
                this.runSmallPrizeState(E);
              } else {
                this._updatePrizes();
              }
              W();
            }
          };
          Y.prototype.runBigPrizeState = function (W, q) {
            var S = this.dataSource.transactionModel;
            var z = S.isTransactionEnd;
            var f = S.gameMultiplier;
            var A = z ? j.InfoBoardShowState.HIGH_PAY_BIG_TOTAL_WIN : j.InfoBoardShowState.HIGH_PAY_WIN;
            T.sequenceCallback(k.emitSocialBigWinStart, T.delayCallback(1), this._playBigWin(W), this._showInfoboardWin(A, W, f), T.delayCallback(0.5), k.emitSocialBigWinEnd, this._updatePrizes.bind(this))(q);
          };
          Y.prototype.runMediumPrizeState = function (W, q) {
            var S = this.dataSource.transactionModel;
            var z = S.isTransactionEnd;
            var f = S.gameMultiplier;
            var A = z ? j.InfoBoardShowState.HIGH_PAY_TOTAL_WIN : j.InfoBoardShowState.HIGH_PAY_WIN;
            T.sequenceCallback(this._showInfoboardWin(A, W, f), this._updatePrizes.bind(this))(function () {
              if (q) {
                q();
              }
            });
          };
          Y.prototype.runSmallPrizeState = function (W, q) {
            var S = this.dataSource.transactionModel;
            var z = S.isTransactionEnd;
            var f = S.gameMultiplier;
            var A = z ? j.InfoBoardShowState.LOW_PAY_TOTAL_WIN : j.InfoBoardShowState.LOW_PAY_WIN;
            T.sequenceCallback(this._showInfoboardWin(A, W, f), this._updatePrizes.bind(this))(function () {
              if (q) {
                q();
              }
            });
          };
          Y.prototype.runBeforeMultiplierPrizeState = function (W, q, S) {
            this._showInfoboardWin(j.InfoBoardShowState.BEFORE_FINAL_PAY_WIN, W, q)();
            if (S) {
              S();
            }
          };
          Y.prototype._showFreeSpinWon = function (W) {
            var q = this.dataSource.transactionModel;
            var S = q.freeSpin;
            if (q.stateTransitionTo === C.TransitionState.FREE_SPIN && S && S.additionalStep) {
              var z = this.controllerPool.bonusControllers.freeSpinWonController;
              var f = this.controllerPool.generalControllers.slotTintController;
              this.controllerPool.generalControllers.infoboardController.showFreeSpinWonTip();
              f.enableFullDarkReel();
              z.play(S.additionalStep, function () {
                f.disableDarkMode(true, W);
              });
            } else if (W) {
              W();
            }
          };
          Y.prototype._checkBonusStep = function (W) {
            var q = this.dataSource.transactionModel;
            var S = q.freeSpin;
            if (q.stateTransitionTo === C.TransitionState.FREE_SPIN && S && S.additionalStep) {
              var z = this.controllerPool.bonusControllers.remainingFreeSpinController;
              T.delayCallback(1)(function () {
                z.increaseFreeSpinCount(S.step, W);
              });
            } else if (W) {
              W();
            }
          };
          Y.prototype._updateTransitionState = function (W) {
            var q = this.dataSource.transactionModel;
            var S = q.isTransactionEnd;
            var z = q.stateTransitionTo;
            if (S) {
              var f = z === C.TransitionState.NORMAL ? "setup" : "idle";
              T.sequenceCallback(x.transitionCompleteCallback("prize"), x.goToStateCallback(f, true))(W);
            } else if (W) {
              W();
            }
          };
          Y.prototype._updatePrizes = function (W) {
            var q = this.dataSource.playerModel.balance;
            var S = this.dataSource.transactionModel.accumulatedWinAmount;
            D.settingMenuHelper.setWinAmount(S);
            D.settingMenuHelper.setBalance(q);
            if (W) {
              W();
            }
          };
          Y.prototype._playBigWin = function (W) {
            var q = this;
            return function (S) {
              q.controllerPool.generalControllers.bigWinController.play(W, 0, S);
            };
          };
          Y.prototype._showInfoboardWin = function (W, q, S) {
            var z = this;
            return function (f) {
              var A = z.controllerPool.generalControllers.infoboardController;
              var M = {
                playState: W,
                amount: q,
                multiplierNumber: S
              };
              A.stop();
              A.play(M, f);
            };
          };
          Y.prototype._playHighLightEffect = function (W) {
            var q = D.settingMenuHelper.turboSpinOn;
            var S = this.controllerPool.generalControllers;
            var z = S.slotTintController;
            var f = S.slotController;
            var A = this.dataSource.transactionModel.winPositionList;
            z.removeOverlaySlotItem();
            z.enableFullDarkReel(true);
            var M = [];
            if (q) {
              f.getSlotItems(A).forEach(function (b) {
                z.addOverlaySlotItem(b);
                M.push(function (H) {
                  b.playHighLight(H);
                });
              });
            } else {
              var E = function (b) {
                var H = C.SLOT_ITEM_MAP[b];
                var w = b * 0.05;
                var U = function (P) {
                  var X = A[P];
                  if (H.includes(X)) {
                    var y = f.getSlotItems([X])[0];
                    z.addOverlaySlotItem(y);
                    M.push(function (m) {
                      T.delayCallback(w)(function () {
                        y.playHighLight(m);
                      });
                    });
                  }
                };
                for (var B = 0; B < A.length; B++) {
                  U(B);
                }
              };
              for (var F = 0; F < C.SLOT_ITEM_MAP.length; F++) {
                E(F);
              }
            }
            T.spawnCallback(M)(W);
          };
          Y.prototype._preSymbolBreakEffect = function (W) {
            var q = this.dataSource.transactionModel;
            var S = q.isMaximumWin;
            var z = q.winLines;
            if (!S && z) {
              var f = this.controllerPool.generalControllers.slotController;
              var A = this.dataSource.transactionModel.winPositionList;
              var M = f.getSlotItems(A);
              T.delayCallback(0.7)(function () {
                M.forEach(function (E) {
                  E.playPreBreak();
                });
                if (W) {
                  W();
                }
              });
            } else if (W) {
              W();
            }
          };
          Y.prototype._playMultiplier = function (W) {
            var q = this.dataSource.transactionModel;
            var S = q.gameMultiplier;
            var z = q.totalWinBeforeMultiplier;
            var f = this.controllerPool.generalControllers.multiplierController;
            this.runBeforeMultiplierPrizeState(z, S, function () {
              f.playMultiplier(W);
            });
          };
          __decorate([G.automationDec({
            func: V.showWinHighlight
          })], Y.prototype, "playAllLines", null);
          return Y;
        }(L.default);
        K.default = Q;
        cc._RF.pop();
      }
    }, {
      AutomationDecorator: "AutomationDecorator",
      GameConstant: "GameConstant",
      InfoBoardController: "InfoBoardController",
      PrizeState: "PrizeState",
      SettingMenuHelper: "SettingMenuHelper",
      SlotGameTools: "SlotGameTools",
      TransactionStateMachineHandler: "TransactionStateMachineHandler",
      Utils: "Utils",
      WBSTweaksConfig: "WBSTweaksConfig",
      "WinHighlight.spec": "WinHighlight.spec"
    }],
    WBSRefreshWorldHandler: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "c8a43wFvPdBdqSw7KC9kFgc", "WBSRefreshWorldHandler")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("TransactionStateMachineHandler");
        var x = I("RefreshWorldHandler");
        var L = I("SpaceBarInterrupter");
        var D = I("GameConstant");
        var k = I("BGMHandler");
        var C = I("WBSGameUtils");
        var j = I("SettingMenuHelper");
        var G = cc._decorator.ccclass;
        var V = function (Q) {
          function N() {
            var Y = Q !== null && Q.apply(this, arguments) || this;
            Y._loadingController = undefined;
            Y._appStateMachine = undefined;
            Y._refreshWorldCallback = undefined;
            return Y;
          }
          __extends(N, Q);
          N.prototype.initialize = function (Y) {
            this._loadingController = Y.loadingController;
            this.setAppStateMachine(Y.appStateMachine);
            Q.prototype.initialize.call(this, Y);
          };
          N.prototype.setAppStateMachine = function (Y) {
            this._appStateMachine = Y;
          };
          N.prototype.refreshWorldByChangeWalletIdle = function (Y, W) {
            this._refreshWorldCallback = W;
            var q = this.dataSource;
            var S = q.isGameReplaying;
            var z = q.isReplayStarted;
            L.spaceBarInterrupter.pause();
            if (S && !z) {
              this.dataSource.isReplayStarted = true;
              Q.prototype.refreshWorldByChangeWalletIdle.call(this, Y, this._startReplay.bind(this));
            } else if (z) {
              this.dataSource.isReplayStarted = false;
              Q.prototype.refreshWorldByChangeWalletIdle.call(this, Y, this._exitReplay.bind(this));
            } else {
              Q.prototype.refreshWorldByChangeWalletIdle.call(this, Y, this._onExit.bind(this));
            }
          };
          N.prototype._startReplay = function () {
            var Y = this.dataSource.transactionModel.stateTransitionTo;
            this.dataSource.isRefreshWorld = true;
            T.cacheTransitionCallback();
            T.clearTransition();
            k.bgmHandler.playBgm(Y);
            this._appStateMachine.exit();
            var W = this._refreshWorldCallback;
            this._refreshWorldCallback = undefined;
            if (W) {
              W();
            }
          };
          N.prototype._exitReplay = function () {
            this.dataSource.isReplayDone = true;
            k.bgmHandler.playBgm(D.TransitionState.NORMAL);
            k.bgmHandler.setBgmVolume(1);
            var Y = this._refreshWorldCallback;
            this._refreshWorldCallback = undefined;
            if (Y) {
              Y();
            }
            T.retrieveTransitionCallback();
            this._appStateMachine.exit();
          };
          N.prototype._onExit = function () {
            var Y = this._refreshWorldCallback;
            this._refreshWorldCallback = undefined;
            if (Y) {
              Y();
            }
            L.spaceBarInterrupter.resume();
          };
          N.prototype.resetController = function (Y) {
            var W = this.generalControllers;
            var q = W.slotController;
            var z = W.symbolPayoutController;
            var A = W.slotTintController;
            var M = this.dataSource.transactionModel;
            var E = M.reels;
            var F = M.goldSymbol;
            var b = C.getProcessedReelSymbols(E, F);
            var H = this.generalControllers.featureBuyController;
            var w = this.dataSource.systemModel.featureBuy;
            var U = this.dataSource.playerModel.minimumBetAmount;
            A.disableDarkMode(false);
            A.removeOverlaySlotItem();
            q.reloadData(M);
            z.hidePopOutItem();
            z.clearOnClickCallback();
            z.disablePanel();
            z.setReelData(b);
            z.setupButtonEvent();
            z.enablePanel();
            if (H && w) {
              var B = w.isSupported;
              var P = w.threshold;
              if (B && j.settingMenuHelper.additionalBetCalculation() <= P) {
                var X = this.dataSource.transactionModel.stateTransitionTo;
                if (X === D.TransitionState.NORMAL) {
                  H.showFeatureButton();
                  H.enableFeatureBuy();
                  if (j.settingMenuHelper.additionalBetCalculation() < U) {
                    H.playButtonHoverEffect();
                  }
                } else if (X === D.TransitionState.RESPIN) {
                  H.showFeatureButton();
                  H.disableFeatureBuy();
                } else {
                  H.hideFeatureButton();
                  H.disableFeatureBuy();
                  H.hideFeatureBuy();
                }
              } else {
                H.hideFeatureButton();
                H.disableFeatureBuy();
              }
            }
            if (Y) {
              Y();
            }
          };
          N.prototype.executeTransition = function (Y) {
            switch (this.dataSource.transactionModel.stateTransitionTo) {
              case D.TransitionState.FREE_SPIN_RESPIN:
              case D.TransitionState.FREE_SPIN:
                this._loadingController.loadBonusBundle(Y);
                break;
              default:
                this._loadingController.releaseBonusBundle(Y);
            }
          };
          return __decorate([G], N);
        }(x.default);
        K.default = V;
        cc._RF.pop();
      }
    }, {
      BGMHandler: "BGMHandler",
      GameConstant: "GameConstant",
      RefreshWorldHandler: "RefreshWorldHandler",
      SettingMenuHelper: "SettingMenuHelper",
      SpaceBarInterrupter: "SpaceBarInterrupter",
      TransactionStateMachineHandler: "TransactionStateMachineHandler",
      WBSGameUtils: "WBSGameUtils"
    }],
    WBSRequestApiState: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "884a62tCFZCe4sJiY2iRKqr", "WBSRequestApiState")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("Utils");
        var x = I("RequestHandler");
        var L = I("TransactionStateMachineHandler");
        var D = I("RequestApiState");
        var k = I("AutoSpinHandler");
        var C = I("WBSApiClient");
        var j = I("GameConstant");
        var G = I("InfoBoardController");
        var V = I("SettingMenuHelper");
        var Q = I("AudioManager");
        var N = I("AudioConstant");
        var Y = cc._decorator.ccclass;
        var W = function (q) {
          function S(A, M, E) {
            var F = q.call(this, A, M, E) || this;
            var b = {
              nextSpinData: undefined
            };
            F.name = "Request API State";
            F._dispose = undefined;
            F._data = b;
            var H = M.generalControllers;
            var w = H.slotController;
            var U = H.spinButtonController;
            F.setSlotController(w);
            F.setSpinButtonController(U);
            return F;
          }
          var z = {
            get: function () {
              return this._data.nextSpinData;
            },
            enumerable: false,
            configurable: true
          };
          __extends(S, q);
          Object.defineProperty(S.prototype, "nextSpinData", z);
          S.prototype.callApi = function (A) {
            var M = this;
            if (this.nextSpinData) {
              this._changeState(A);
            } else {
              this._dispose = this._observe(function () {
                M._dispose = undefined;
                M._changeState(A);
              });
            }
          };
          S.prototype.onReady = function () {
            q.prototype.onReady.call(this);
            L.goToStateCallback("result", true)(this._requestApi.bind(this));
          };
          S.prototype.onRun = function () {};
          S.prototype.onExit = function (A) {
            this._disableShake();
            q.prototype.onExit.call(this, A);
          };
          S.prototype.onForceExit = function (A) {
            var M = this._dispose;
            if (M) {
              this._dispose = undefined;
              M();
            }
            q.prototype.onForceExit.call(this, A);
          };
          S.prototype.onDestroy = function (A) {
            var M = this._dispose;
            if (M) {
              this._dispose = undefined;
              M();
            }
            q.prototype.onDestroy.call(this, A);
          };
          S.prototype.startSlotController = function () {
            var A = this.controllerPool.generalControllers.featureBuyController;
            var M = this.dataSource.transactionModel.stateTransitionTo;
            var E = this.slotController;
            switch (M) {
              case j.TransitionState.NORMAL:
                q.prototype.startSlotController.call(this);
                if (this.dataSource.isFeatureBuy) {
                  Q.playAudio(N.GENERAL_AUDIO.featureBuyStart.key);
                }
                this._displayInfoboardTips(G.InfoboardUIState.NORMAL_TIPS);
                A.disableFeatureBuy();
                this._resetMultiplier(false);
                break;
              case j.TransitionState.FREE_SPIN:
                E.spin(false, M);
                this._displayInfoboardTips(G.InfoboardUIState.FREE_SPIN_TIPS);
                this._resetMultiplier(true);
            }
          };
          S.prototype._observe = function (A) {
            return T.observeCallback(this._data, "nextSpinData")(function (M) {
              if (!M) {
                A();
              }
            });
          };
          S.prototype._displayInfoboardTips = function (A) {
            var M = this.controllerPool.generalControllers.infoboardController;
            M.resetWinEffect();
            M.showTips(A, V.settingMenuHelper.turboSpinOn);
          };
          S.prototype._requestApi = function () {
            var A = this;
            x.doTransactionAPIRequest({
              name: this.name,
              apiRequest: C.wbsApiClient.spin.bind(C.wbsApiClient),
              errorTitle: "",
              fallbackRequest: C.wbsApiClient.getGameInfo.bind(C.wbsApiClient)
            }, this.dataSource, function (M, E) {
              var F = {
                error: M,
                result: E
              };
              A._data.nextSpinData = F;
            });
          };
          S.prototype._changeState = function (A) {
            var M = this.nextSpinData;
            var E = M.error;
            var F = M.result;
            C.wbsApiClient.updateTransactionInfo();
            if (F && F.dt) {
              if (E && k.shouldAutoSpin()) {
                var b = this.spinButtonController;
                k.exitAutoSpin(b);
              }
              L.transitionCompleteCallback("result")(A);
            }
          };
          S.prototype._resetMultiplier = function (A = false) {
            this.controllerPool.generalControllers.multiplierController.playReset(A);
          };
          S.prototype._disableShake = function (A) {
            this.slotController.stopSlotItemsShakeEffect(A);
          };
          return __decorate([Y], S);
        }(D.default);
        K.default = W;
        cc._RF.pop();
      }
    }, {
      AudioConstant: "AudioConstant",
      AudioManager: "AudioManager",
      AutoSpinHandler: "AutoSpinHandler",
      GameConstant: "GameConstant",
      InfoBoardController: "InfoBoardController",
      RequestApiState: "RequestApiState",
      RequestHandler: "RequestHandler",
      SettingMenuHelper: "SettingMenuHelper",
      TransactionStateMachineHandler: "TransactionStateMachineHandler",
      Utils: "Utils",
      WBSApiClient: "WBSApiClient"
    }],
    WBSRespinState: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "00a34dTvhRLNYoHGKRmiubo", "WBSRespinState")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("Utils");
        var x = I("TransactionStateMachineHandler");
        var L = I("UIState");
        var D = I("GameConstant");
        var k = I("AutomationDecorator");
        var C = I("SlotController.spec");
        var u = function (p) {
          function j() {
            var G = p !== null && p.apply(this, arguments) || this;
            G.name = "Respin State";
            G._preloadStateCallback = undefined;
            G._disposeRunCallback = undefined;
            G._disposeCollapseCallback = undefined;
            return G;
          }
          __extends(j, p);
          j.prototype.setPreloadStateCallback = function (G) {
            this._preloadStateCallback = G;
          };
          j.prototype.onRun = function () {
            this._disposeRunCallback = T.sequenceCallback(this._setupUI.bind(this), this._playCollapse.bind(this))(this.exit.bind(this));
          };
          j.prototype.onReady = function () {};
          j.prototype.onForceExit = function (G) {
            this._disposeRun();
            this._disposeCollapse();
            G();
          };
          j.prototype.onExit = function (G) {
            this._disposeRun();
            this._disposeCollapse();
            G();
          };
          j.prototype.onDestroy = function (G) {
            this._disposeRun();
            this._disposeCollapse();
            G();
          };
          j.prototype._preloadNextState = function (G) {
            if (this._preloadStateCallback) {
              this._preloadStateCallback();
            }
            if (G) {
              G();
            }
          };
          j.prototype._changeState = function (G) {
            var V = this;
            x.goToStateCallback("action", true, {
              noBet: true
            })(function () {
              if (V.dataSource) {
                var N = V.dataSource.transactionModel.stateTransitionTo;
                if (N === D.TransitionState.RESPIN || N === D.TransitionState.FREE_SPIN_RESPIN) {
                  x.transitionCompleteCallback("action")(function () {
                    if (G) {
                      G();
                    }
                  });
                }
              }
            });
          };
          j.prototype._setupUI = function (G) {
            var V = this.controllerPool.generalControllers.symbolPayoutController;
            V.disablePanel();
            V.clearOnClickCallback();
            V.hidePopOutItem();
            if (G) {
              G();
            }
          };
          j.prototype._playCollapse = function (G) {
            this._disposeCollapseCallback = T.sequenceCallback(this._symbolBreak.bind(this), T.spawnCallback(this._disableDimBackground.bind(this), T.sequenceCallback(T.delayCallback(0.3), this._playDropOldSymbols.bind(this)), T.sequenceCallback(this._changeState.bind(this), this._preloadNextState.bind(this))))(G);
          };
          j.prototype._symbolBreak = function (G) {
            var V = this.controllerPool.generalControllers.slotController;
            var Q = this.dataSource.transactionModel.winPositionList;
            var N = [];
            V.getSlotItems(Q).forEach(function (Y) {
              N.push(function (W) {
                Y.playBreak(W);
              });
            });
            T.spawnCallback(N)(function () {
              if (G) {
                G();
              }
            });
          };
          j.prototype._disableDimBackground = function (G) {
            this.controllerPool.generalControllers.slotTintController.disableDarkMode();
            if (G) {
              G();
            }
          };
          j.prototype._playDropOldSymbols = function (G) {
            var V = this.controllerPool.generalControllers.slotController;
            V.removeSymbols();
            V.playShiftOldSlotEffect();
            this._enableShake();
            G();
          };
          j.prototype._enableShake = function (G) {
            this.controllerPool.generalControllers.slotController.playSlotItemsShakeEffect();
            if (G) {
              G();
            }
          };
          j.prototype._disposeRun = function () {
            var G = this._disposeRunCallback;
            if (G) {
              G();
            }
            this._disposeRunCallback = undefined;
          };
          j.prototype._disposeCollapse = function () {
            var G = this._disposeCollapseCallback;
            if (G) {
              G();
            }
            this._disposeCollapseCallback = undefined;
          };
          __decorate([k.automationDec({
            func: C.symbolBreak
          })], j.prototype, "_symbolBreak", null);
          return j;
        }(L.default);
        K.default = u;
        cc._RF.pop();
      }
    }, {
      AutomationDecorator: "AutomationDecorator",
      GameConstant: "GameConstant",
      "SlotController.spec": "SlotController.spec",
      TransactionStateMachineHandler: "TransactionStateMachineHandler",
      UIState: "UIState",
      Utils: "Utils"
    }],
    WBSResultState: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "ae16e5Ei4VNGopxdeQ1ARYp", "WBSResultState")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("TransactionStateMachineHandler");
        var x = I("SlotAnalyticsEnum");
        var L = I("SlotStateMachine");
        var D = I("ResultState");
        var k = I("GameConstant");
        var C = I("WBSGameUtils");
        var j = I("AudioConstant");
        var G = I("AudioManager");
        var V = function (Q) {
          function N(Y, W, q) {
            var S = Q.call(this, Y, W, q) || this;
            S.name = "Result State";
            var z = W.generalControllers;
            var f = z.slotController;
            var A = z.spinButtonController;
            S.setSlotController(f);
            S.setSpinButtonController(A);
            return S;
          }
          __extends(N, Q);
          N.prototype.onRun = function () {
            this._setAvailableActions();
          };
          N.prototype.onReady = function () {
            this.controllerPool.generalControllers.slotController.setOnEachStopColumnCallback(this._onEachReelStop.bind(this));
          };
          N.prototype.invokeSlotStop = function () {
            var Y = this.slotController;
            var W = this.dataSource.transactionModel.originalReels;
            if (Y.getStopStyle() === L.StopStyle.FAST) {
              Y.fastStop(W);
            } else {
              Y.stopSpin();
            }
          };
          N.prototype.triggerFastStopWhileStopping = function () {
            var Y = this.dataSource.transactionModel.originalReels;
            var W = this.slotController;
            var q = this.spinButtonController;
            this.disableSpinAction();
            q.disableButton();
            W.setOnClickCallback(undefined);
            W.fastStop(Y);
          };
          N.prototype.setSlotData = function () {
            var Y = this.dataSource.transactionModel;
            var W = Y.reels;
            var q = Y.goldSymbol;
            var S = this.controllerPool.generalControllers.symbolPayoutController;
            var z = C.getProcessedReelSymbols(W, q);
            S.setReelData(z);
            this.slotController.setReelData(Y);
          };
          N.prototype.resultDidStartRender = function (Y) {
            if (this.dataSource.transactionModel.isTransactionEnd) {
              T.goToStateCallback("prize", true)(Y);
            } else {
              T.goToStateCallback("idle", true)(Y);
            }
          };
          N.prototype.renderFeature = function (Y) {
            switch (this.dataSource.transactionModel.stateTransitionFrom) {
              case k.TransitionState.RESPIN:
              case k.TransitionState.FREE_SPIN_RESPIN:
                this._playDropNewSymbols(Y);
                break;
              case k.TransitionState.NORMAL:
              case k.TransitionState.FREE_SPIN:
              default:
                if (Y) {
                  Y();
                }
            }
          };
          N.prototype.onDestroy = function (Y) {
            this.controllerPool.generalControllers.slotController.setOnEachStopColumnCallback(undefined);
            if (Y) {
              Y();
            }
          };
          N.prototype._onEachReelStop = function () {
            if (this.controllerPool.generalControllers.slotController.getStopStyle() !== L.StopStyle.FAST) {
              G.playAudio(j.GENERAL_AUDIO.spinStop.key);
            }
          };
          N.prototype._setAvailableActions = function () {
            switch (this.dataSource.transactionModel.stateTransitionFrom) {
              case k.TransitionState.RESPIN:
              case k.TransitionState.FREE_SPIN_RESPIN:
                this.process = x.SpinStateProcess.REEL_STOPPED;
                break;
              case k.TransitionState.NORMAL:
              case k.TransitionState.FREE_SPIN:
              default:
                this.process = x.SpinStateProcess.REEL_SPINNING;
            }
          };
          N.prototype._playDropNewSymbols = function (Y) {
            var W = this.slotController;
            var q = this.dataSource.transactionModel;
            this._shiftMultiplier();
            W.playShiftNewSlotEffect(function () {
              W.reloadData(q);
              if (Y) {
                Y();
              }
            });
          };
          N.prototype._shiftMultiplier = function (Y) {
            var W = this.controllerPool.generalControllers.multiplierController;
            var q = this.dataSource.transactionModel;
            var S = q.gameMultiplier;
            var z = q.stateTransitionFrom;
            var f = z === k.TransitionState.FREE_SPIN || z === k.TransitionState.FREE_SPIN_RESPIN;
            W.playShiftRight(S, f, Y);
          };
          return N;
        }(D.default);
        K.default = V;
        cc._RF.pop();
      }
    }, {
      AudioConstant: "AudioConstant",
      AudioManager: "AudioManager",
      GameConstant: "GameConstant",
      ResultState: "ResultState",
      SlotAnalyticsEnum: "SlotAnalyticsEnum",
      SlotStateMachine: "SlotStateMachine",
      TransactionStateMachineHandler: "TransactionStateMachineHandler",
      WBSGameUtils: "WBSGameUtils"
    }],
    WBSSlotController: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "8057dBhRYNMxL+23kANKBOd", "WBSSlotController")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var x = I("Utils");
        var L = I("NodePoolHandler");
        var D = I("SlotStateMachine");
        var k = I("GameConstant");
        var C = I("SlotHandler");
        var j = I("WBSDataSource");
        var G = I("WBSSlotItemController");
        var V = I("WBSGameUtils");
        var Q = I("AutomationDecorator");
        var N = I("SlotController.spec");
        var Y = I("InfoBoardController");
        var W = I("AudioManager");
        var q = I("AudioConstant");
        var z = I("SpinConfigHandler");
        var A = cc._decorator;
        var M = A.ccclass;
        var E = A.property;
        var F = function (b) {
          function H() {
            var U = b !== null && b.apply(this, arguments) || this;
            U.slotItemPrefab = undefined;
            U._stateMachine = new D.default();
            U._shakingInProgress = false;
            U._isFastSpinInProgress = false;
            U._disposeCameraZoom = undefined;
            return U;
          }
          var w;
          __extends(H, b);
          w = H;
          H.getSlotItemByIndex = function (U) {
            return w.slotHandler.getSlotItemByIndices([U])[0];
          };
          H.prototype.setOnClickCallback = function (U) {
            this._onClickCallback = U;
          };
          H.prototype.setStopCompletedCallback = function (U) {
            this._didStopSpinCompleteCallback = U;
          };
          H.prototype.setOnEachStopColumnCallback = function (U) {
            this._onEachStopColumnCallback = U;
          };
          H.prototype.setScatterEffectStartCallback = function (U) {
            this._scatterEffectStartCallback = U;
          };
          H.prototype.setScatterEffectStopCallback = function (U) {
            this._scatterEffectStopCallback = U;
          };
          H.prototype.setupControllers = function (U) {
            this._infoboardController = U.infoboardController;
            this._clickEffectController = U.clickEffectController;
            this._slotTintController = U.slotTintController;
            this._multiplierController = U.multiplierController;
            this._fastSpinController = U.fastSpinController;
            this._featureBuyButtonController = U.featureBuyButtonController;
            this._slowDropEffectController = U.slowDropEffectController;
            this._foregroundController = U.foregroundController;
          };
          H.prototype._initSlotItemCustom = function () {
            var U = [];
            L.nodePoolHandler.registerReusableItem(k.NodePoolName.SlotItemCustom, this.slotItemPrefab, "WBSSlotItemController", 30);
            for (var B = 0; B < 24; B++) {
              (P = L.nodePoolHandler.dequeueReusableItem(k.NodePoolName.SlotItemCustom)).getComponent(G.default).enableEvent(false);
              U.push(P);
            }
            for (B = 0; B < U.length; B++) {
              var P = U[B];
              L.nodePoolHandler.enqueueReusableItem(P, k.NodePoolName.SlotItemCustom);
            }
          };
          H.prototype.init = function (U) {
            this._initNodes({
              reelArea: this.node
            });
            var B = U.reels;
            L.nodePoolHandler.registerReusableItem(k.NodePoolName.SlotItem, this.slotItemPrefab, "WBSSlotItemController", 30);
            this._initSlotItemCustom();
            w.slotHandler.setOnBeforeReloadCallback(this._onBeforeReload.bind(this));
            w.slotHandler.setOnAfterReloadCallback(this._onAfterReload.bind(this));
            w.slotHandler.setOnReelStopCallback(this._onReelStopCallback.bind(this));
            w.slotHandler.setOnSpinStopCallback(this._onSpinStopCallback.bind(this));
            w.slotHandler.setOnScatterEffectStartCallback(this._onScatterEffectStartCallback.bind(this));
            w.slotHandler.setOnScatterEffectStopCallback(this._onScatterEffectStopCallback.bind(this));
            w.slotHandler.init({
              reels: B,
              containerNode: this.node
            });
          };
          H.prototype.spin = function (U, B) {
            this.removeOverlaySlotItems();
            this._stateMachine.spin(0.3, z.featureConfig.regularSpinningTime);
            var P = U;
            if (P) {
              this.markFastStop();
            } else {
              w.slotHandler.setFastStop(false);
            }
            w.slotHandler.spin(B, P);
            W.playAudio(q.GENERAL_AUDIO.spinActiveLoop.key, true);
            this._enableTouchEvent();
            this.exitSlotItemSpine();
          };
          H.prototype.gameIntroCameraZoomIn = function (U, B) {
            var P = this;
            if (U === undefined) {
              U = false;
            }
            var X = this._disposeCameraZoom;
            if (X) {
              X();
            }
            this._disposeCameraZoom = undefined;
            this._foregroundController.playGameIntroBullet();
            if (U) {
              cc.Camera.cameras[0].zoomRatio = 1;
              if (B) {
                B();
              }
            } else {
              cc.Camera.cameras[0].zoomRatio = 0.81;
              x.delayCallback(0.2)(function () {
                P._disposeCameraZoom = V.lerpTo(function (J, Z0) {
                  var Z1 = Z0 * Z0 * Z0 * Z0;
                  var Z2 = cc.misc.lerp(0.81, 1, Z1);
                  cc.Camera.cameras[0].zoomRatio = Z2;
                  if (Z0 === 1) {
                    P._disposeCameraZoom = undefined;
                    if (B) {
                      B();
                    }
                  }
                }, 0.81, 1, 1);
              });
              x.delayCallback(1)(function () {
                P._multiplierController.playGameIntroZoomIn(false, function () {
                  P._multiplierController.playGameIntroShinningEffect();
                });
                P._featureBuyButtonController.zoomIn(U);
              });
            }
          };
          H.prototype.cameraZoomIn = function (U, B) {
            var P = this;
            if (U === undefined) {
              U = false;
            }
            var X = this._disposeCameraZoom;
            if (X) {
              X();
            }
            this._disposeCameraZoom = undefined;
            this._multiplierController.zoomIn(U);
            this._featureBuyButtonController.zoomIn(U);
            if (U) {
              cc.Camera.cameras[0].zoomRatio = 1;
              if (B) {
                B();
              }
            } else {
              cc.Camera.cameras[0].zoomRatio = 0.87;
              this._disposeCameraZoom = V.lerpTo(function (J, Z0) {
                var Z1 = Z0 * (2 - Z0);
                var Z2 = cc.misc.lerp(0.87, 1, Z1);
                cc.Camera.cameras[0].zoomRatio = Z2;
                if (Z0 === 1) {
                  P._disposeCameraZoom = undefined;
                  if (B) {
                    B();
                  }
                }
              }, 0.87, 1, 1);
            }
          };
          H.prototype.cameraZoomOut = function (U, B) {
            var P = this;
            if (U === undefined) {
              U = false;
            }
            var X = this._disposeCameraZoom;
            if (X) {
              X();
            }
            this._disposeCameraZoom = undefined;
            this._multiplierController.zoomOut(U);
            this._featureBuyButtonController.zoomOut(U);
            if (U) {
              cc.Camera.cameras[0].zoomRatio = 0.87;
              if (B) {
                B();
              }
            } else {
              cc.Camera.cameras[0].zoomRatio = 1;
              this._disposeCameraZoom = V.lerpTo(function (J, Z0) {
                var Z1 = Z0 * (2 - Z0);
                var Z2 = cc.misc.lerp(1, 0.87, Z1);
                cc.Camera.cameras[0].zoomRatio = Z2;
                if (Z0 === 1) {
                  P._disposeCameraZoom = undefined;
                  if (B) {
                    B();
                  }
                }
              }, 1, 0.87, 4);
            }
          };
          H.prototype.playShiftOldSlotEffect = function (U) {
            this.removeOverlaySlotItems();
            w.slotHandler.playShiftOldSlotEffect(U);
          };
          H.prototype.playShiftNewSlotEffect = function (U) {
            var B = this;
            var P = j.wbsDataSource.transactionModel;
            var X = P.stateTransitionTo;
            var J = P.reelNextSymbol;
            var Z0 = P.nextGoldSymbols;
            var Z1 = P.previousScatterCount;
            var Z2 = V.getPositionRemoveColumnList(J);
            if (this.isHeartBeat()) {
              x.sequenceCallback(x.delayCallback(0.8), function (Z3) {
                B._playScatterHeartbeatEffect();
                B._infoboardController.showScatterRequestTip();
                B.addOverlayScatter();
                B.enableDarkReel([]);
                B._playSlowDrop(Z2);
                Z3();
              }, x.delayCallback(2))(function () {
                B.removeOverlaySlotItems();
                B.disableDarkMode();
              });
            } else if (Z1 > k.FAST_SCROLL_MIN_REQUIRE_SCATTER) {
              this._infoboardController.showFreeSpinWonTip();
            }
            w.slotHandler.playShiftNewSlotEffect(J, Z0, function () {
              if (B.isHeartBeat()) {
                B._stopSlowDrop();
              }
            }, function () {
              B.addOverlayScatterAndWild();
              switch (X) {
                case k.TransitionState.RESPIN:
                case k.TransitionState.FREE_SPIN_RESPIN:
                  if (U) {
                    U();
                  }
                  break;
                case k.TransitionState.NORMAL:
                case k.TransitionState.FREE_SPIN:
                default:
                  x.delayCallback(0.3)(function () {
                    if (U) {
                      U();
                    }
                  });
              }
            });
          };
          H.prototype._playSlowDrop = function (U) {
            this._slowDropEffectController.show(U);
          };
          H.prototype._stopSlowDrop = function () {
            this._slowDropEffectController.hide();
          };
          H.prototype.stopSpin = function () {
            if (this.getStopStyle() === D.StopStyle.NORMAL) {
              this._stateMachine.stop(w.slotHandler.stopSpin.bind(w.slotHandler));
            }
          };
          H.prototype.getStopStyle = function () {
            return this._stateMachine.getStopStyle();
          };
          H.prototype.fastStop = function () {
            this._showTips(true);
            this._fastSpinController.reset();
            this._playScatterFastSpinExitEffect(true);
            w.slotHandler.setFastStop();
            this._stateMachine.fastStop(w.slotHandler.instantStopScroll.bind(w.slotHandler));
          };
          H.prototype.markFastStop = function () {
            w.slotHandler.setFastStop();
            this._stateMachine.markFastStop();
          };
          H.prototype.unmarkFastStop = function () {
            w.slotHandler.setFastStop(false);
            this._stateMachine.unmarkFastStop();
          };
          H.prototype.setReelData = function (U) {
            w.slotHandler.setReelData(U);
          };
          H.prototype.reloadData = function (U) {
            w.slotHandler.reloadData(U);
          };
          H.prototype._onBeforeReload = function () {
            this.removeOverlaySlotItems();
          };
          H.prototype._onAfterReload = function () {
            this._playSymbolIdleEffect(true);
            this.addOverlayScatterAndWild();
          };
          H.prototype.getSlotHandler = function () {
            return w.slotHandler;
          };
          H.prototype._onReelStopCallback = function (U) {
            var B = this;
            var P = this.getSlotItems(k.SLOT_ITEM_MAP[U]);
            function X(Z2) {
              if (U === k.NUMBER_OF_COLUMN - 1) {
                B._disableFastSpin();
              } else {
                B._enableFastSpin(U);
              }
              Z2();
            }
            function J(Z2) {
              P.forEach(function (Z3) {
                if (Z3.symbolIndex === k.SlotSymbols.Scatter) {
                  W.stopAudio(q.GENERAL_AUDIO.symScatter.key);
                  W.playAudio(q.GENERAL_AUDIO.symScatter.key);
                  B._slotTintController.addOverlaySlotItem(Z3);
                }
              });
              Z2();
            }
            function Z0(Z2) {
              B._playSymbolSpawnEffect(P, Z2);
            }
            function Z1(Z2) {
              var Z3 = j.wbsDataSource.transactionModel.scatterCount;
              var Z4 = 1;
              var Z5 = 0;
              if (Z3 === k.FAST_SCROLL_MIN_REQUIRE_SCATTER + 1) {
                var Z6 = [];
                var Z7 = 0;
                for (var Z8 = 0; Z8 <= U; Z8++) {
                  Z6 = Z6.concat(k.SLOT_ITEM_MAP[Z8]);
                }
                var Z9 = B.getSlotItems(Z6);
                Z9.forEach(function (ZZ) {
                  if (ZZ.symbolIndex === k.SlotSymbols.Scatter) {
                    Z7 += 1;
                  }
                });
                if (Z7 === k.FAST_SCROLL_MIN_REQUIRE_SCATTER + 1) {
                  Z9.forEach(function (ZZ) {
                    if (ZZ.symbolIndex === k.SlotSymbols.Scatter) {
                      Z4++;
                    }
                  });
                }
              }
              if (Z4 === ++Z5 && Z2) {
                Z2();
              }
            }
            x.deferCallback(this, true)(function () {
              x.spawnCallback(X, J, Z0, Z1)(x.emptyFunc);
            });
            if (this._onEachStopColumnCallback) {
              this._onEachStopColumnCallback(U);
            }
          };
          H.prototype._onSpinStopCallback = function () {
            this.addOverlayScatterAndWild();
            this._stateMachine.stopped();
            W.stopAudio(q.GENERAL_AUDIO.spinActiveLoop.key);
            var U = this._didStopSpinCompleteCallback;
            this._didStopSpinCompleteCallback = undefined;
            if (U) {
              U();
            }
          };
          H.prototype._onScatterEffectStartCallback = function (U) {
            x.deferCallback(this, true)(this._playScatterFastSpinStartEffect.bind(this, U));
            if (this._scatterEffectStartCallback) {
              this._scatterEffectStartCallback(U);
            }
          };
          H.prototype._onScatterEffectStopCallback = function (U, B) {
            if (U === k.NUMBER_OF_COLUMN - 1) {
              this._playScatterFastSpinExitEffect();
            }
            if (this._scatterEffectStopCallback) {
              this._scatterEffectStopCallback(U, B);
            } else if (B) {
              B();
            }
          };
          H.prototype._enableTouchEvent = function () {
            this.node.on(cc.Node.EventType.TOUCH_START, this.onSlotRegionClicked, this);
          };
          H.prototype._disableTouchEvent = function () {
            this.node.off(cc.Node.EventType.TOUCH_START, this.onSlotRegionClicked, this);
          };
          H.prototype.onSlotRegionClicked = function (U) {
            if (this._onClickCallback) {
              this._disableTouchEvent();
              if (U) {
                this._clickEffectController.showClickEffect(U.getLocation());
                this._clickEffectController.showFlash();
              }
              var B = this._onClickCallback;
              this._onClickCallback = undefined;
              if (B) {
                B();
              }
            }
          };
          H.prototype.getSlotItems = function (U) {
            return w.slotHandler.getSlotItemByIndices(U);
          };
          H.prototype.setSlotItemsVisible = function (U, B) {
            var P;
            if (B.length !== 0) {
              (P = w.slotHandler).setSlotItemsVisible.apply(P, __spread([U], B));
            }
          };
          H.prototype.getAllSlotItemPosition = function () {
            return w.slotHandler.getSlotItemsWorldPosition();
          };
          H.prototype.enableDarkReel = function (U = [], B = true) {
            this._slotTintController.enableDarkReel(U, B);
          };
          H.prototype.disableDarkMode = function (U = true) {
            this._slotTintController.disableDarkMode(U);
          };
          H.prototype.addOverlayScatter = function () {
            this.removeOverlaySlotItems();
            for (var U = this.getSlotItems(), B = 0; B < U.length; B++) {
              var P = U[B];
              if (P.symbolIndex === k.SlotSymbols.Scatter) {
                this._slotTintController.addOverlaySlotItem(P);
              }
            }
          };
          H.prototype.addOverlayScatterAndWild = function () {
            this.removeOverlaySlotItems();
            for (var U = this.getSlotItems(), B = 0; B < U.length; B++) {
              var P = U[B];
              var X = P.symbolIndex;
              if (X === k.SlotSymbols.Scatter || X === k.SlotSymbols.Wild) {
                this._slotTintController.addOverlaySlotItem(P);
              }
            }
          };
          H.prototype.removeOverlaySlotItems = function () {
            this._slotTintController.removeOverlaySlotItem();
          };
          H.prototype.playSlotItemsShakeEffect = function () {
            var U = this;
            this._shakeItemDisposer = x.delayCallback(0.5)(function () {
              U._shakeItemDisposer = undefined;
              U._shakingInProgress = true;
              U.getSlotItems().forEach(function (B) {
                B.playSymbolShake();
              });
            });
          };
          H.prototype.stopSlotItemsShakeEffect = function (U) {
            var B = this;
            if (this._shakeItemDisposer) {
              var P = this._shakeItemDisposer;
              this._shakeItemDisposer = undefined;
              this._shakingInProgress = false;
              if (P) {
                P();
              }
              if (U) {
                U();
              }
            } else if (this._shakingInProgress) {
              var X = this.getSlotItems();
              X.forEach(function (J, Z0) {
                J.stopSymbolShake();
                if (Z0 === X.length - 1) {
                  B._shakingInProgress = false;
                  if (U) {
                    U();
                  }
                }
              });
            } else if (U) {
              U();
            }
          };
          H.prototype.exitSlotItemSpine = function () {
            this.getSlotItems().forEach(function (U) {
              U.playSpineExit();
            });
          };
          H.prototype.isSlowDrop = function () {
            return w.slotHandler.isSlowDrop();
          };
          H.prototype.isHeartBeat = function () {
            return w.slotHandler.isHeartBeat();
          };
          H.prototype.removeSymbols = function (U) {
            var B = j.wbsDataSource.transactionModel;
            var P = B.winPositionList;
            var X = B.winningGoldSymbol;
            for (var J = V.differentArray(P, X), Z0 = 0; Z0 < J.length; Z0++) {
              var Z1 = J[Z0];
              this.setSlotItemsVisible(false, __spread(Z1));
            }
            if (U) {
              U();
            }
          };
          H.prototype.isFastStop = function () {
            return w.slotHandler.getFastStop();
          };
          H.prototype._enableFastSpin = function (U) {
            var B = U + 1 > k.NUMBER_OF_COLUMN - 1 ? undefined : U + 1;
            var P = this.isFastStop();
            if (!this.isFastStop()) {
              if (B && w.slotHandler.isFastSpinScroller(B)) {
                this.enableDarkReel([B]);
                this._fastSpinController.play(B);
                if (!this._isFastSpinInProgress) {
                  this._isFastSpinInProgress = true;
                  this.cameraZoomOut(P);
                }
              }
            }
          };
          H.prototype._disableFastSpin = function () {
            if (w.slotHandler.isFastSpinScroller(k.NUMBER_OF_COLUMN - 1)) {
              var U = j.wbsDataSource.transactionModel;
              var B = U.stateTransitionFrom;
              var P = U.scatterCount;
              if (B !== k.TransitionState.FREE_SPIN || !(P > k.FAST_SCROLL_MIN_REQUIRE_SCATTER)) {
                this.disableDarkMode(false);
              }
              this._fastSpinController.stop();
              var X = this.isFastStop();
              if (this._isFastSpinInProgress) {
                this._isFastSpinInProgress = false;
                W.playAudio(q.GENERAL_AUDIO.fastspinExit.key);
                this.cameraZoomIn(X);
              }
            }
          };
          H.prototype._playSymbolSpawnEffect = function (U = [], B) {
            var P = U.length;
            var X = 0;
            function J() {
              if (++X === P && B) {
                B();
              }
            }
            if (P) {
              for (var Z0 = 0; Z0 < P; Z0++) {
                U[Z0].playSpineSpawn(J);
              }
            } else if (B) {
              B();
            }
          };
          H.prototype._playSymbolIdleEffect = function (U = false) {
            var B = this.getSlotItems();
            var P = B.length;
            if (P) {
              for (var X = 0; X < P; X++) {
                var J = B[X];
                J.playSpineIdle(U);
                J.playScatterIdle(U);
              }
            }
          };
          H.prototype._playScatterHeartbeatEffect = function () {
            W.playAudio(q.GENERAL_AUDIO.heartBeatNoise.key);
            var U = this.getSlotItems();
            var B = U.length;
            if (B) {
              for (var P = 0; P < B; P++) {
                U[P].playScatterHeartBeat();
              }
            }
          };
          H.prototype.playScatterWinEffect = function () {
            W.playAudio(q.GENERAL_AUDIO.scatterWinHighlight.key);
            this.getSlotItems().forEach(function (U) {
              if (U.symbolIndex === k.SlotSymbols.Scatter) {
                U.playSpineWin(function () {
                  U.playScatterWinIdleSpine();
                });
              }
            });
            this._infoboardController.showFreeSpinWonTip();
          };
          H.prototype._showTips = function (U = false) {
            var B = this._infoboardController;
            var P = j.wbsDataSource.transactionModel.stateTransitionFrom;
            if (P === k.TransitionState.NORMAL || P === k.TransitionState.RESPIN) {
              B.showTips(Y.InfoboardUIState.NORMAL_TIPS, U);
            } else {
              B.showTips(Y.InfoboardUIState.FREE_SPIN_TIPS);
            }
          };
          H.prototype._playScatterFastSpinStartEffect = function (U, B) {
            var P = [];
            for (var X = 0; X < U; X++) {
              P = P.concat(k.SLOT_ITEM_MAP[X]);
            }
            var J = 0;
            this.getSlotItems(P).forEach(function (Z0) {
              if (Z0.symbolIndex === k.SlotSymbols.Scatter) {
                J++;
                if (!Z0.isFastSpinSpine) {
                  Z0.playScatterFastSpinStart(function () {
                    Z0.playScatterFastSpinIdle();
                    if (B) {
                      B();
                    }
                  });
                }
              }
            });
            if (J === k.FAST_SCROLL_MIN_REQUIRE_SCATTER) {
              this._infoboardController.showScatterRequestTip();
            } else if (J > k.FAST_SCROLL_MIN_REQUIRE_SCATTER) {
              this._infoboardController.showFreeSpinWonTip();
            } else {
              this._showTips(true);
            }
          };
          H.prototype._playScatterFastSpinExitEffect = function (U = false, B) {
            if (!j.wbsDataSource.transactionModel.winLines) {
              this._showTips(true);
            }
            this.getSlotItems().forEach(function (P) {
              if (P.symbolIndex === k.SlotSymbols.Scatter && P.isFastSpinSpine) {
                P.playScatterFastSpinExit(U, B);
              }
            });
          };
          H.prototype._initNodes = function () {};
          H.slotHandler = new C.default();
          __decorate([E(cc.Prefab)], H.prototype, "slotItemPrefab", undefined);
          __decorate([Q.automationDec({
            func: N.symbolDrop
          })], H.prototype, "playShiftNewSlotEffect", null);
          __decorate([Q.automationDec({
            func: N.symbolShake
          })], H.prototype, "playSlotItemsShakeEffect", null);
          __decorate([Q.automationDec({
            func: N.initSlotControllerNode
          })], H.prototype, "_initNodes", null);
          return w = __decorate([M], H);
        }(cc.Component);
        K.default = F;
        cc._RF.pop();
      }
    }, {
      AudioConstant: "AudioConstant",
      AudioManager: "AudioManager",
      AutomationDecorator: "AutomationDecorator",
      GameConstant: "GameConstant",
      InfoBoardController: "InfoBoardController",
      NodePoolHandler: "NodePoolHandler",
      "SlotController.spec": "SlotController.spec",
      SlotHandler: "SlotHandler",
      SlotStateMachine: "SlotStateMachine",
      SpinConfigHandler: "SpinConfigHandler",
      Utils: "Utils",
      WBSDataSource: "WBSDataSource",
      WBSGameUtils: "WBSGameUtils",
      WBSSlotItemController: "WBSSlotItemController"
    }],
    WBSSlotDataHandler: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "ff7d0/y5MdPn5g0ygeMX3C8", "WBSSlotDataHandler")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("SlotDataHandler");
        var x = I("GameConstant");
        var L = function (D) {
          function k() {
            return D !== null && D.apply(this, arguments) || this;
          }
          __extends(k, D);
          k.prototype.setReelData = function (C) {
            for (var j = this.numberOfColumn, G = this.topBufferRow, V = this.bottomBufferRow, Q = this.spinType, N = this.getRandomSymbol, Y = this.backupBufferedSymbol = [], W = 0; W < j; W++) {
              var q = Y[W] = [];
              for (var S = 0; S < V; S++) {
                q[S] = N(W, Q, S, false, true, 1);
              }
              var z = V + x.NUMBER_OF_ROW_LIST[W];
              var f = z + G;
              for (S = z; S < f; S++) {
                q[S] = N(W, Q, S, false, true, 1);
              }
            }
            this.updateReelData(C);
          };
          k.prototype.updateReelData = function (C) {
            for (var u = this.numberOfColumn, p = this.bottomBufferRow, j = this.backupBufferedSymbol, G = this.formattedReelData = [], V = 0; V < u; V++) {
              var Q = x.NUMBER_OF_ROW_LIST[V];
              var N = x.COLUMN_START_INDEX[V];
              var Y = __spread(j[V]);
              Y.splice.apply(Y, __spread([p, Q], C.slice(N, N + Q).reverse()));
              G.push(Y);
            }
          };
          return k;
        }(T.default);
        K.default = L;
        cc._RF.pop();
      }
    }, {
      GameConstant: "GameConstant",
      SlotDataHandler: "SlotDataHandler"
    }],
    WBSSlotHelper: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "239d699csBFGqLUk4z1+S78", "WBSSlotHelper")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("SlotHelper");
        var x = I("GameConstant");
        var L = function (D) {
          function k() {
            var C = D !== null && D.apply(this, arguments) || this;
            C._topBufferRow = 1;
            return C;
          }
          __extends(k, D);
          k.prototype.init = function (C) {
            this._topBufferRow = C.topBufferRow;
            C.slotViews.forEach(function (u, c) {
              u.slotViewIndex = c;
            });
            D.prototype.init.call(this, C);
          };
          k.prototype.scrollerGetStopDistance = function (C) {
            var u;
            var c = this._scrollerController.indexOfScroller(C);
            var p = this._slotViews[c];
            var j = this._topBufferRow + x.NUMBER_OF_ROW_LIST[c];
            u = C.getRunTimeConfig().maxSpeed > 0 ? p.getNextBottomIndex(j) : p.getNextTopIndex(this._topExtraScrollRow);
            this._slotDataHandler.setReelDataPosition(c, u);
            return p.getDistanceToIndex(u);
          };
          return k;
        }(T.default);
        K.default = L;
        cc._RF.pop();
      }
    }, {
      GameConstant: "GameConstant",
      SlotHelper: "SlotHelper"
    }],
    WBSSlotItemController: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "7086fUCRa9IQZnKVRemVnXo", "WBSSlotItemController")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("SlotItem");
        var x = I("GameConstant");
        var L = I("SlotImageHandler");
        var D = I("PayoutEffectController");
        var k = I("ScatterEffectController");
        var C = I("Utils");
        var j = I("AudioManager");
        var G = I("AudioConstant");
        var V = cc._decorator;
        var Q = V.ccclass;
        var N = V.property;
        var Y = function (W) {
          function q() {
            var S = W !== null && W.apply(this, arguments) || this;
            S.scaleHolder = undefined;
            S.contentHolder = undefined;
            S.bgContentHolder = undefined;
            S.content = undefined;
            S.frame = undefined;
            S.spine = undefined;
            S.fakeContent = undefined;
            S.fakeSpine = undefined;
            S.fakeContentHolder = undefined;
            S.payoutEffectController = undefined;
            S.scatterEffectController = undefined;
            S.slotViewIndex = 0;
            S.slotItemIndex = 0;
            S._blockType = undefined;
            S._isFastSpinSpine = false;
            S._normalFrameSpriteFrame = undefined;
            S._blurredFrameSpriteFrame = undefined;
            S._normalBgSpriteFrame = undefined;
            S._blurredBgSpriteFrame = undefined;
            return S;
          }
          __extends(q, W);
          Object.defineProperty(q.prototype, "visible", {
            get: function () {
              return this.contentHolder.active;
            },
            set: function (S) {
              this.contentHolder.active = S;
              this.bgContentHolder.active = S;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(q.prototype, "blockType", {
            get: function () {
              return this._blockType;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(q.prototype, "isFastSpinSpine", {
            get: function () {
              return this._isFastSpinSpine;
            },
            enumerable: false,
            configurable: true
          });
          q.prototype.init = function (S) {
            this.reset();
            this.content = S.sprite;
            var z = this.normalScale = S.normalScale === undefined ? 1 : S.normalScale;
            this.blurScale = S.blurScale === undefined ? z : S.blurScale;
            this.getSymbolZOrder = S.getSymbolZOrder;
            this.payoutEffectController.clear();
            var A = x.spineSymbolNameMaps[x.SlotSymbols.Wild];
            var M = L.slotImageHandler.spines[A];
            this.fakeSpine.skeletonData = M;
          };
          q.prototype.setup = function (S, z, A, M = false) {
            this.symbolIndex = S % 100;
            this._blockType = Math.floor(S / 100) * 100;
            this.normalSpriteFrame = z;
            this.blurSpriteFrame = A;
            this.zOrder = this.getSymbolZOrder ? this.getSymbolZOrder(S) : 0;
            this.setSpine();
            this.setZIndex();
            this._setupFrame();
            this._setupBackground();
            this.setBlur(M);
            if (this.symbolIndex === x.SlotSymbols.Wild) {
              this.payoutEffectController.showWildVfx(false);
            }
            var E = this.contentHolder;
            E.scale = 1;
            E.opacity = 255;
            var F = this.bgContentHolder;
            F.scale = 1;
            F.opacity = 255;
          };
          q.prototype.setSpine = function (S) {
            if (S !== undefined) {
              this.symbolIndex = S;
            }
            var z = x.spineSymbolNameMaps[this.symbolIndex];
            var A = L.slotImageHandler.spines[z];
            this.spine.skeletonData = A;
            this.resetSpine();
            this.spine.node.active = false;
          };
          q.prototype.setBlur = function (S) {
            var z = this.content;
            if (z) {
              z.spriteFrame = S ? this.blurSpriteFrame : this.normalSpriteFrame;
              z.node.scale = S ? this.blurScale : this.normalScale;
            }
            var A = this.frame;
            if (A) {
              A.spriteFrame = S ? this._blurredFrameSpriteFrame : this._normalFrameSpriteFrame;
              A.node.scale = S ? 2 : 1;
            }
          };
          q.prototype.setZIndex = function (S = 0) {
            if (this.node) {
              this.node.zIndex = this._generateZIndex();
            }
          };
          q.prototype.playSpineIdle = function (S = false) {
            if (this.symbolIndex === x.SlotSymbols.Wild || this.symbolIndex === x.SlotSymbols.Scatter) {
              this.resetSpine();
              var z = this.spine;
              z.node.active = true;
              this.content.enabled = false;
              z.setAnimation(0, "idle", true);
            }
          };
          q.prototype.playSpineSpawn = function (S) {
            var z = this;
            if (this.symbolIndex === x.SlotSymbols.Scatter) {
              this.scatterEffectController.playSmoke();
            }
            var A = this.spine;
            A.node.active = true;
            this.content.enabled = false;
            A.setCompleteListener(function () {
              z.resetSpine();
              A.node.active = false;
              z.content.enabled = true;
              z.playSpineIdle();
              if (S) {
                S();
              }
            });
            A.setAnimation(0, "spawn", false);
            this.playScatterIdle();
          };
          q.prototype.playFakeSpineSpawn = function () {
            if (this.symbolIndex === x.SlotSymbols.Scatter) {
              this.scatterEffectController.playSmoke();
            }
            var S = this.fakeSpine;
            S.node.active = true;
            S.setAnimation(0, "spawn", false);
          };
          q.prototype.hideFakeSpineSpawn = function (S) {
            var z = this.fakeSpine;
            z.clearTrack(0);
            z.setToSetupPose();
            z.setCompleteListener(undefined);
            z.node.active = false;
            if (S) {
              S();
            }
          };
          q.prototype.playSpineExit = function (S) {
            var z = this;
            if (this.symbolIndex === x.SlotSymbols.Scatter || this.symbolIndex === x.SlotSymbols.Wild) {
              var A = this.spine;
              A.node.active = true;
              this.content.enabled = false;
              A.setCompleteListener(function () {
                z.resetSpine();
                A.node.active = false;
                z.content.enabled = true;
                if (S) {
                  S();
                }
              });
              A.setAnimation(0, "exit", false);
            } else if (S) {
              S();
            }
          };
          q.prototype.playSpineWin = function (S) {
            var z = this;
            var A = this.spine;
            A.node.active = true;
            this.content.enabled = false;
            A.setCompleteListener(function () {
              if (z.symbolIndex === x.SlotSymbols.Wild) {
                A.setAnimation(0, "idle", true);
              } else {
                z.resetSpine();
              }
              if (S) {
                S();
              }
            });
            A.setAnimation(0, "win", false);
          };
          q.prototype.playScatterIdle = function (S = false) {
            if (this.symbolIndex === x.SlotSymbols.Scatter) {
              this.scatterEffectController.show(S);
              this.scatterEffectController.playShine();
            }
          };
          q.prototype.playScatterWinIdleSpine = function () {
            this.scatterEffectController.stopGlow();
            var S = this.spine;
            S.node.active = true;
            this.content.enabled = false;
            this.resetSpine();
            S.setAnimation(0, "win_idle", true);
          };
          q.prototype.playScatterHeartBeat = function () {
            var S = this;
            if (this.symbolIndex === x.SlotSymbols.Scatter) {
              var z = 0;
              var A = cc.sequence(cc.callFunc(function () {
                j.stopAudio(G.GENERAL_AUDIO.heartBeat.key);
                j.playAudio(G.GENERAL_AUDIO.heartBeat.key);
              }), cc.scaleTo(0.2, 1.2), cc.scaleTo(0.15, 0.95), cc.scaleTo(0.05, 1, 1), cc.delayTime(0.6), cc.callFunc(function () {
                if (++z == 3) {
                  S.scatterEffectController.stopGlow();
                }
              }));
              this.spine.node.runAction(A.repeat(3));
              this.scatterEffectController.playGlow();
            }
          };
          q.prototype.playScatterFastSpinBeat = function () {
            if (this.symbolIndex === x.SlotSymbols.Scatter) {
              var S = cc.sequence(cc.scaleTo(0.2, 1.2), cc.scaleTo(0.15, 0.95), cc.scaleTo(0.05, 1, 1), cc.delayTime(0.6));
              this.spine.node.runAction(S.repeatForever());
            }
          };
          q.prototype.stopScatterFastSpinBeat = function () {
            this.spine.node.stopAllActions();
          };
          q.prototype.playScatterFastSpinStart = function (S) {
            var z = this;
            this._isFastSpinSpine = true;
            var A = this.spine;
            A.node.active = true;
            this.content.enabled = false;
            A.setCompleteListener(function () {
              z.resetSpine();
              A.node.active = false;
              z.content.enabled = true;
              z.playScatterFastSpinIdle();
              if (S) {
                S();
              }
            });
            A.setAnimation(0, "fastspin_start", false);
          };
          q.prototype.playScatterFastSpinIdle = function () {
            this._isFastSpinSpine = true;
            var S = this.spine;
            S.node.active = true;
            this.content.enabled = false;
            this.resetSpine();
            S.setAnimation(0, "fastspin_idle", true);
          };
          q.prototype.playScatterFastSpinExit = function (S, z) {
            var A = this;
            if (S === undefined) {
              S = false;
            }
            this._isFastSpinSpine = false;
            var M = this.spine;
            function E() {
              A.playSpineIdle(true);
              if (z) {
                z();
              }
            }
            if (S) {
              E();
            } else {
              M.node.active = true;
              this.content.enabled = false;
              M.setCompleteListener(E);
              M.setAnimation(0, "fastspin_exit", false);
            }
          };
          q.prototype.playHighLight = function (S) {
            this.payoutEffectController.highlightSymbol();
            var z = this.contentHolder;
            z.stopAllActions();
            z.runAction(cc.scaleTo(0.3, 1.1));
            this.playSpineWin(S);
          };
          q.prototype.playPreBreak = function (S) {
            var z = this._blockType === x.BLOCK_TYPE.GOLD;
            this.playSymbolShake();
            this.payoutEffectController.breakSymbol(z, S);
          };
          q.prototype.playBreak = function (S) {
            var z = this;
            var A = this._blockType === x.BLOCK_TYPE.GOLD;
            C.sequenceCallback(function (M) {
              z.stopSymbolShake(M);
            }, function (M) {
              var E = z.contentHolder;
              var F = z.bgContentHolder;
              if (A) {
                var b = z.fakeContentHolder;
                b.stopAllActions();
                b.scale = 0;
                b.opacity = 0;
                b.runAction(cc.spawn(cc.scaleTo(0.2, 1).easing(cc.easeBackOut()), cc.fadeIn(0.15)));
                z.playFakeSpineSpawn();
                j.playAudio(G.GENERAL_AUDIO.symWild.key);
              } else {
                z.payoutEffectController.hideWildVfx(true);
              }
              F.stopAllActions();
              F.runAction(cc.fadeOut(0.45));
              E.stopAllActions();
              E.runAction(cc.sequence(cc.spawn(cc.scaleTo(0.5, 1.21), cc.fadeOut(0.45)), cc.callFunc(function () {
                if (A) {
                  z._transformToWild();
                  z.hideFakeSpineSpawn();
                  F.stopAllActions();
                  F.scale = 0;
                  F.opacity = 0;
                  E.stopAllActions();
                  E.scale = 1;
                  E.opacity = 255;
                }
              })));
              if (M) {
                M();
              }
            })(function () {
              if (S) {
                S();
              }
            });
          };
          q.prototype.resetHolderPosition = function () {
            this.scaleHolder.setPosition(cc.Vec2.ZERO);
          };
          q.prototype.reset = function () {
            this.scatterEffectController.reset();
            this.resetSpine();
            this.content.enabled = true;
            this.spine.node.active = false;
            this._blockType = undefined;
            this.slotViewIndex = 0;
            this.slotItemIndex = 0;
            this._isFastSpinSpine = false;
            this.payoutEffectController.clear();
          };
          q.prototype.resetSpine = function () {
            var S = this.spine;
            if (S) {
              S.clearTrack(0);
              S.setToSetupPose();
              S.setCompleteListener(undefined);
            }
          };
          q.prototype.playSymbolShake = function () {
            var S = (Math.floor(Math.random() * 100) + 30) * 0.001;
            this.contentHolder.runAction(cc.repeatForever(cc.sequence(cc.moveBy(S, cc.v2(-2.5, 0)), cc.moveBy(S, cc.v2(5, 1.5)), cc.moveBy(S, cc.v2(-1, -4)), cc.moveBy(S, cc.v2(-3, 4.5)), cc.moveBy(S, cc.v2(4, -2)), cc.moveBy(S, cc.v2(-4, -1.5)), cc.moveBy(S, cc.v2(-1, 2.5)), cc.moveBy(S, cc.v2(2.5, -1)))));
          };
          q.prototype.stopSymbolShake = function (S) {
            this.contentHolder.stopAllActions();
            this.contentHolder.setPosition(cc.v2(0, 0));
            if (S) {
              S();
            }
          };
          q.prototype._transformToWild = function () {
            var S = x.SlotSymbols.Wild;
            this.symbolIndex = S;
            this.setSpine();
            this.content.spriteFrame = L.slotImageHandler.symbolImages[S];
            this.zOrder = this.getSymbolZOrder ? this.getSymbolZOrder(S) : 0;
            this.setZIndex();
            this.reset();
            this._setupFrame();
            this._setupBackground();
            this.frame.spriteFrame = undefined;
            this.playSpineIdle();
            this.payoutEffectController.showWildVfx();
          };
          q.prototype._setupFrame = function () {
            var S = this._blockType;
            var z = undefined;
            var A = undefined;
            if (S === x.BLOCK_TYPE.GOLD) {
              z = L.slotImageHandler.frameImages[S];
              A = L.slotImageHandler.blurredFrameImages[S];
            }
            this._normalFrameSpriteFrame = z;
            this._blurredFrameSpriteFrame = A;
          };
          q.prototype._setupBackground = function () {
            var S = this.symbolIndex;
            var z = undefined;
            var A = undefined;
            if (S === x.SlotSymbols.Bandit) {
              z = L.slotImageHandler.backgroundImages[S];
              A = L.slotImageHandler.blurredBackgroundImages[S];
            }
            this._normalBgSpriteFrame = z;
            this._blurredBgSpriteFrame = A;
          };
          q.prototype._generateZIndex = function () {
            if (this.slotViewIndex === undefined) {
              return 0;
            }
            var S = this.zOrder * 10000;
            if (this.symbolIndex === x.SlotSymbols.Wild || this.symbolIndex === x.SlotSymbols.Scatter) {
              S = this.zOrder * 20000;
            }
            return S + -this.slotViewIndex * 1000 + -this.positionIndex;
          };
          __decorate([N(cc.Node)], q.prototype, "scaleHolder", undefined);
          __decorate([N(cc.Node)], q.prototype, "contentHolder", undefined);
          __decorate([N(cc.Node)], q.prototype, "bgContentHolder", undefined);
          __decorate([N(cc.Sprite)], q.prototype, "content", undefined);
          __decorate([N(cc.Sprite)], q.prototype, "frame", undefined);
          __decorate([N(sp.Skeleton)], q.prototype, "spine", undefined);
          __decorate([N(cc.Sprite)], q.prototype, "fakeContent", undefined);
          __decorate([N(sp.Skeleton)], q.prototype, "fakeSpine", undefined);
          __decorate([N(cc.Node)], q.prototype, "fakeContentHolder", undefined);
          __decorate([N(D.default)], q.prototype, "payoutEffectController", undefined);
          __decorate([N(k.default)], q.prototype, "scatterEffectController", undefined);
          return __decorate([Q], q);
        }(T.default);
        K.default = Y;
        cc._RF.pop();
      }
    }, {
      AudioConstant: "AudioConstant",
      AudioManager: "AudioManager",
      GameConstant: "GameConstant",
      PayoutEffectController: "PayoutEffectController",
      ScatterEffectController: "ScatterEffectController",
      SlotImageHandler: "SlotImageHandler",
      SlotItem: "SlotItem",
      Utils: "Utils"
    }],
    WBSSlotItemHandler: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "3168eVYZ8VEEpk3F9fRKIUL", "WBSSlotItemHandler")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("SlotItemHandler");
        var x = I("GameConstant");
        var L = function (D) {
          function k() {
            return D !== null && D.apply(this, arguments) || this;
          }
          __extends(k, D);
          k.prototype.setSlotItem = function (C, j, G = 0) {
            var V = x.NUMBER_OF_ROW_LIST[C];
            var Q = V - 1 - (j.positionIndex - G);
            if (j.symbolRow === 1 && j.symbolColumn === 1) {
              var N = x.COLUMN_START_INDEX[C] + Q;
              this.functionalSlotItems[N] = j;
            } else {
              var Y = Math.min(V - 1, Q);
              var W = Math.max(0, Q - j.symbolRow + 1);
              for (var q = C + j.symbolColumn - 1, S = C; S <= q; S++) {
                for (var z = W; z <= Y; z++) {
                  this.functionalSlotItems[S * V + z] = j;
                }
              }
            }
          };
          return k;
        }(T.default);
        K.default = L;
        cc._RF.pop();
      }
    }, {
      GameConstant: "GameConstant",
      SlotItemHandler: "SlotItemHandler"
    }],
    WBSSlotItemPool: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "b8868DBPEVIw59FVOxfxBZt", "WBSSlotItemPool")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("WBSSlotItemController");
        var x = I("SlotItemPool");
        var L = I("NodePoolHandler");
        var D = I("GameConstant");
        var k = function (C) {
          function u() {
            return C !== null && C.apply(this, arguments) || this;
          }
          __extends(u, C);
          u.prototype.init = function (c) {
            this.slotItemConstructor = c.slotItem;
            this.normalSpriteFrames = c.normalSpriteFrame;
            this.blurSpriteFrames = c.blurSpriteFrame ? c.blurSpriteFrame : c.normalSpriteFrame;
            this.normalScale = c.normalScale === undefined ? 1 : c.normalScale;
            this.blurScale = c.blurScale === undefined ? 1 : c.blurScale;
            this.getSymbolZOrder = c.getSymbolZOrder;
          };
          u.prototype.getSlotItem = function (p, j = false, G = 0, V = 0) {
            var Q = L.nodePoolHandler.dequeueReusableItem(D.NodePoolName.SlotItem).getComponent(T.default);
            var N = Q.content;
            var Y = {
              sprite: N,
              normalScale: this.normalScale,
              blurScale: this.blurScale,
              getSymbolZOrder: this.getSymbolZOrder
            };
            Q.init(Y);
            Q.slotViewIndex = G;
            Q.slotItemIndex = V;
            var W = p % 100;
            Q.setup(p, this.normalSpriteFrames[W], this.blurSpriteFrames[W], j);
            return Q;
          };
          u.prototype.getSlotItemCustom = function (p, j = false, G = 0, V = 0) {
            var Q = L.nodePoolHandler.dequeueReusableItem(D.NodePoolName.SlotItemCustom).getComponent(T.default);
            var N = Q.content;
            var Y = {
              sprite: N,
              normalScale: this.normalScale,
              blurScale: this.blurScale,
              getSymbolZOrder: this.getSymbolZOrder
            };
            Q.init(Y);
            Q.slotViewIndex = G;
            Q.slotItemIndex = V;
            var W = p % 100;
            Q.setup(p, this.normalSpriteFrames[W], this.blurSpriteFrames[W], j);
            return Q;
          };
          u.prototype.releaseSlotItem = function (c) {
            if (c.symbolIndex < 0) {
              c.node.destroy();
            } else {
              L.nodePoolHandler.enqueueReusableItem(c.node, D.NodePoolName.SlotItem);
            }
          };
          u.prototype.releaseSlotItemCustom = function (c) {
            if (c.symbolIndex < 0) {
              c.node.destroy();
            } else {
              L.nodePoolHandler.enqueueReusableItem(c.node, D.NodePoolName.SlotItemCustom);
            }
          };
          return u;
        }(x.default);
        K.default = k;
        cc._RF.pop();
      }
    }, {
      GameConstant: "GameConstant",
      NodePoolHandler: "NodePoolHandler",
      SlotItemPool: "SlotItemPool",
      WBSSlotItemController: "WBSSlotItemController"
    }],
    WBSSlotScrollerController: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "7368flklilIqbTH/SUVuGX/", "WBSSlotScrollerController")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("SlotScrollerController");
        var x = cc._decorator.ccclass;
        var L = function (D) {
          function k() {
            return D !== null && D.apply(this, arguments) || this;
          }
          __extends(k, D);
          k.prototype.onDisable = function () {
            var C;
            var u;
            try {
              for (var c = __values(this.scrollers), p = c.next(); !p.done; p = c.next()) {
                var j = p.value;
                if ((!j || !j.isEnded) && j !== undefined) {
                  j.end();
                }
              }
            } catch (G) {
              var l = {
                error: G
              };
              C = l;
            } finally {
              try {
                if (p && !p.done && (u = c.return)) {
                  u.call(c);
                }
              } finally {
                if (C) {
                  throw C.error;
                }
              }
            }
          };
          return __decorate([x], k);
        }(T.default);
        K.default = L;
        cc._RF.pop();
      }
    }, {
      SlotScrollerController: "SlotScrollerController"
    }],
    WBSSlotSystemModel: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "3de34mFRnZOH7/13+CbPeHj", "WBSSlotSystemModel")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("SlotSystemModel");
        var x = I("FeatureBuyHelper");
        var L = function (D) {
          function k() {
            var C = D !== null && D.apply(this, arguments) || this;
            C._featureBuy = undefined;
            return C;
          }
          __extends(k, D);
          k.prototype.updateGameInfo = function (C) {
            D.prototype.updateGameInfo.call(this, C);
            this._featureBuy = x.generateFeatureBuyModel(C);
          };
          Object.defineProperty(k.prototype, "featureBuy", {
            get: function () {
              return this._featureBuy;
            },
            enumerable: false,
            configurable: true
          });
          return k;
        }(T.default);
        K.default = L;
        cc._RF.pop();
      }
    }, {
      FeatureBuyHelper: "FeatureBuyHelper",
      SlotSystemModel: "SlotSystemModel"
    }],
    WBSSlotTransactionModel: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "e3bbdJAS9hF9YTk/ZsIn/Fq", "WBSSlotTransactionModel")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("SlotTransactionModel");
        var x = I("GameConstant");
        var L = I("WBSFreeSpinModel");
        var D = function (k) {
          function u() {
            var c = k !== null && k.apply(this, arguments) || this;
            c._reelNextSymbol = [[]];
            c._positionToBeRemove = [];
            c._nextGoldSymbol = [[]];
            c._winningGoldSymbol = [];
            c._previousScatterCount = undefined;
            return c;
          }
          var C = {
            get: function () {
              return this._previousScatterCount;
            },
            enumerable: false,
            configurable: true
          };
          __extends(u, k);
          Object.defineProperty(u.prototype, "previousScatterCount", C);
          Object.defineProperty(u.prototype, "freeSpin", {
            get: function () {
              return this._freeSpin;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(u.prototype, "reelNextSymbol", {
            get: function () {
              return this._reelNextSymbol;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(u.prototype, "positionToBeRemove", {
            get: function () {
              return this._positionToBeRemove;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(u.prototype, "symbolNumberWinWays", {
            get: function () {
              return this._symbolNumberWinWays;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(u.prototype, "gameMultiplier", {
            get: function () {
              return this._gameMultiplier;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(u.prototype, "nextGameMultiplier", {
            get: function () {
              return this._nextGameMultiplier;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(u.prototype, "scatterCount", {
            get: function () {
              return this._scatterCount;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(u.prototype, "originalTotalWin", {
            get: function () {
              return this._originalTotalWin;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(u.prototype, "singleSpinAccumulatedWin", {
            get: function () {
              return this._singleSpinAccumulatedWin;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(u.prototype, "winPositionList", {
            get: function () {
              return this._winPositionList;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(u.prototype, "goldSymbol", {
            get: function () {
              return this._goldSymbol;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(u.prototype, "goldSymbolBefore", {
            get: function () {
              return this._goldSymbolBefore;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(u.prototype, "nextGoldSymbols", {
            get: function () {
              return this._nextGoldSymbol;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(u.prototype, "winningGoldSymbol", {
            get: function () {
              return this._winningGoldSymbol;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(u.prototype, "totalWinBeforeMultiplier", {
            get: function () {
              return this._totalWinBeforeMultiplier;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(u.prototype, "featureBuy", {
            get: function () {
              return this._featureBuy;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(u.prototype, "isTransactionEnd", {
            get: function () {
              var c = this.stateTransitionTo;
              return c === x.TransitionState.NORMAL || c === x.TransitionState.FREE_SPIN;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(u.prototype, "isMaximumWin", {
            get: function () {
              return this._isMaximumWin;
            },
            enumerable: false,
            configurable: true
          });
          u.prototype.updateSlotGameTransactionInfo = function (j) {
            var G = j.rns;
            var V = j.prbr;
            var Q = j.fs;
            var N = j.twbm;
            var Y = j.snww;
            var W = j.gm;
            var q = j.otw;
            var z = j.ssaw;
            var A = j.sc;
            var M = j.wpl;
            var E = j.gs;
            var F = j.wgs;
            var b = j.gsb;
            var H = j.ngm;
            var w = j.ngs;
            var U = j.fb;
            var B = j.imw;
            this._previousScatterCount = G ? this._scatterCount : A;
            this._freeSpin = Q ? new L.default(Q) : undefined;
            this._totalWinBeforeMultiplier = N;
            this._symbolNumberWinWays = Y;
            this._reelNextSymbol = G;
            this._positionToBeRemove = V;
            this._gameMultiplier = W;
            this._originalTotalWin = q;
            this._scatterCount = A;
            this._singleSpinAccumulatedWin = z;
            this._scatterCount = A;
            this._winPositionList = M;
            this._goldSymbol = E;
            this._goldSymbolBefore = b;
            this._winningGoldSymbol = F || [];
            this._nextGameMultiplier = H;
            this._nextGoldSymbol = w;
            this._featureBuy = U;
            this._isMaximumWin = B;
          };
          return u;
        }(T.default);
        K.default = D;
        cc._RF.pop();
      }
    }, {
      GameConstant: "GameConstant",
      SlotTransactionModel: "SlotTransactionModel",
      WBSFreeSpinModel: "WBSFreeSpinModel"
    }],
    WBSSlotView: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "f475ch2f0lJopnD47jNyBtL", "WBSSlotView")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("SlotView");
        var x = I("GameConstant");
        var L = function (D) {
          function k() {
            var C = D !== null && D.apply(this, arguments) || this;
            C.slotViewIndex = 0;
            return C;
          }
          __extends(k, D);
          k.prototype.init = function (C) {
            var u = new cc.Node("slot_view");
            var c = x.SLOT_WIDTH;
            var p = x.SLOT_HEIGHT * x.NUMBER_OF_ROW_LIST[this.slotViewIndex];
            u.parent = this.holder;
            u.setPosition(cc.v2(this.offsetX, 0));
            u.setContentSize(c, p);
            this._slotViewNode = u;
            this.viewHeight = u.height;
            this.functionalRow = x.NUMBER_OF_ROW_LIST[this.slotViewIndex];
            this.symbolSize = C.symbolSize;
            this.getItem = C.getItem;
            this.releaseItem = C.releaseItem;
            this.sortBottomItemToFront = C.sortBottomItemToFront;
            this.reloadItemsToIndex(0);
          };
          Object.defineProperty(k.prototype, "slotViewNode", {
            get: function () {
              return this._slotViewNode;
            },
            enumerable: false,
            configurable: true
          });
          k.prototype.reloadItemsToIndex = function (C) {
            var u = this;
            var c = this.slotItems;
            var p = this.symbolSize;
            if (c.length) {
              c.forEach(function (V) {
                return u.releaseItem(u, V);
              });
              c.length = 0;
            }
            var j = c[0] = this.getItem(this, C);
            var l = j.positionIndex;
            var G = j.node;
            G.parent = this._slotViewNode;
            G.y = ((j.symbolRow - this.functionalRow) / 2 + l) * p.height;
            this.bottomIndex = l;
            this.topIndex = l + j.symbolRow - 1;
            this.accumulatedPositionY = -C * p.height;
            this.reviseVisibleItem();
          };
          k.prototype.addItemAtTop = function () {
            var C = this.symbolSize;
            var u = this.slotItems;
            var c = u[0];
            var p = this.topIndex + 1;
            var j = this.getItem(this, p);
            var l = j.node;
            l.parent = this._slotViewNode;
            l.y = c.node.y + (c.symbolRow + j.symbolRow) / 2 * C.height;
            u.unshift(j);
            j.positionIndex = p;
            this.topIndex += j.symbolRow;
            if (this.sortBottomItemToFront) {
              j.setZIndex(this.getBottomSlotIndex() - j.positionIndex);
            }
          };
          k.prototype.addItemAtBottom = function () {
            var C = this.symbolSize;
            var u = this.slotItems;
            var c = u[u.length - 1];
            var p = this.bottomIndex - 1;
            var j = this.getItem(this, p);
            var G = j.node;
            G.parent = this._slotViewNode;
            G.y = c.node.y - (c.symbolRow + j.symbolRow) / 2 * C.height;
            u.push(j);
            j.positionIndex = this.bottomIndex -= j.symbolRow;
            if (this.sortBottomItemToFront) {
              var V = this.getBottomSlotIndex();
              for (var Q = 0, N = u.length; Q < N; Q++) {
                u[Q].setZIndex(V - u[Q].positionIndex);
              }
            }
          };
          return k;
        }(T.default);
        K.default = L;
        cc._RF.pop();
      }
    }, {
      GameConstant: "GameConstant",
      SlotView: "SlotView"
    }],
    WBSSpinButtonController: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "ee8e805Cu5Pw6OR5FkTB7EG", "WBSSpinButtonController")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T;
        var x = I("AutomationDecorator");
        var L = I("SpinButtonController");
        var D = I("SettingMenuHelper");
        var k = I("AudioConstant");
        var C = I("AudioManager");
        var j = I("SpinButtonViewController.spec");
        var G = cc._decorator;
        var V = G.ccclass;
        var Q = G.property;
        (function (Y) {
          Y[Y.NORMAL = 0] = "NORMAL";
          Y[Y.BLUR = 1] = "BLUR";
          Y[Y.GREY = 2] = "GREY";
          Y[Y.GREY_BLUR = 3] = "GREY_BLUR";
        })(T ||= {});
        var N = function (Y) {
          function W() {
            var q = Y !== null && Y.apply(this, arguments) || this;
            q.spinButton = undefined;
            q.spinAnim = undefined;
            q.spinButtonHolder = undefined;
            q.arrowHolder = undefined;
            q.arrowSprite = undefined;
            q.autoSpinHolder = undefined;
            q.autoSpinNumber = undefined;
            q.arrowSpriteFrameList = [];
            q.hoverNormalSpinHolder = undefined;
            q.hoverAutoSpinHolder = undefined;
            q.hoverAnimation = undefined;
            q.hoverSprite = undefined;
            q._numberDisplayController = undefined;
            return q;
          }
          __extends(W, Y);
          Object.defineProperty(W.prototype, "numberDisplayController", {
            get: function () {
              this._numberDisplayController ||= this.autoSpinNumber.getComponent("NumberDisplayController");
              return this._numberDisplayController;
            },
            enumerable: false,
            configurable: true
          });
          W.prototype._isTouchArea = function (q) {
            if (this.mode === L.SpinButtonMode.AUTOSPIN) {
              return true;
            }
            var S = q.touch ? q.touch.getLocation() : q.getLocation();
            var z = this.node.convertToNodeSpaceAR(S);
            var f = this.node.width / 2;
            return Math.sqrt(Math.pow(z.x, 2) + Math.pow(z.y, 2)) <= f;
          };
          W.prototype._clickSpinButton = function (q) {
            if (this._isTouchArea(q) && this._isInteractable) {
              this.clickSpinButton();
            }
          };
          W.prototype._mouseMove = function (q) {
            if (this._isInteractable) {
              if (this._isTouchArea(q)) {
                if (!this.isHovered) {
                  Y.prototype.mouseHovered.call(this, q);
                }
              } else if (this.isHovered) {
                Y.prototype.mouseLeave.call(this, q);
              }
            }
          };
          W.prototype._subscribeSpinButtonEvent = function () {
            this.node.on(cc.Node.EventType.TOUCH_END, this._clickSpinButton, this);
            this.node.on(cc.Node.EventType.MOUSE_MOVE, this._mouseMove, this);
          };
          W.prototype.isHidden = function () {
            return !this.node.active;
          };
          W.prototype.mouseHovered = function (q) {
            if (this._isInteractable && this.mode !== L.SpinButtonMode.DISABLED) {
              if (!this.isHovered) {
                Y.prototype.mouseHovered.call(this, q);
              }
            }
          };
          W.prototype.mouseLeave = function (q) {
            if (this.isHovered) {
              Y.prototype.mouseLeave.call(this, q);
            }
          };
          W.prototype.onStopAllAnimations = function () {
            this.arrowHolder.stopAllActions();
            this.arrowSprite.spriteFrame = this.arrowSpriteFrameList[T.GREY];
          };
          W.prototype.onInit = function () {
            this.onDisableButton();
            this._subscribeSpinButtonEvent();
            this._initSpinButtonNodes({
              spinButton: this.node
            });
          };
          W.prototype.onShowIdleAnimation = function () {
            this.arrowHolder.stopAllActions();
            this.arrowHolder.runAction(cc.repeatForever(cc.rotateBy(4, 360)));
          };
          W.prototype.onShowSpinAnimation = function (q = true) {
            if (q) {
              this._playSpinButtonFx();
              C.playAudio(k.GENERAL_AUDIO.spinBtn.key);
            }
            this.onHideMouseOverEffect();
            this.arrowHolder.stopAllActions();
            var S = cc.rotateBy(0.25, 360).repeatForever();
            this.arrowHolder.runAction(S);
          };
          W.prototype.onReplaceSpinClearSpriteFrame = function () {
            if (this.mode === L.SpinButtonMode.ENABLED) {
              this.arrowSprite.spriteFrame = this.arrowSpriteFrameList[T.NORMAL];
            } else {
              this.arrowSprite.spriteFrame = this.arrowSpriteFrameList[T.GREY];
            }
          };
          W.prototype.onReplaceSpinBlurredSpriteFrame = function () {
            if (this.mode === L.SpinButtonMode.ENABLED) {
              this.arrowSprite.spriteFrame = this.arrowSpriteFrameList[T.BLUR];
            } else {
              this.arrowSprite.spriteFrame = this.arrowSpriteFrameList[T.GREY_BLUR];
            }
          };
          W.prototype.onShowStopSpinningAnimation = function () {
            this.arrowHolder.stopAllActions();
          };
          W.prototype.onEnableButton = function () {
            this._setSpinButtonInteractive(true);
            if (this.animationState === L.SpinButtonAnimationState.SPINNING) {
              this.onReplaceSpinBlurredSpriteFrame();
            } else {
              this.onReplaceSpinClearSpriteFrame();
            }
            this.onShowIdleAnimation();
          };
          W.prototype.onDisableButton = function () {
            this._setSpinButtonInteractive(false);
            if (this.animationState === L.SpinButtonAnimationState.SPINNING) {
              this.onReplaceSpinBlurredSpriteFrame();
            } else {
              this.onShowStopSpinningAnimation();
              this.onReplaceSpinClearSpriteFrame();
            }
          };
          W.prototype.showAutoSpinLook = function (q) {
            var S = this;
            this.spinButtonHolder.active = false;
            this.arrowHolder.active = false;
            this.autoSpinHolder.active = true;
            this.autoSpinHolder.opacity = 0;
            this.autoSpinHolder.stopAllActions();
            this.autoSpinHolder.runAction(cc.sequence(cc.fadeIn(0.3), cc.callFunc(function () {
              if (S.mode === L.SpinButtonMode.AUTOSPIN) {
                Y.prototype.showAutoSpinLook.call(S, q);
              }
            })));
            this.onUpdateAutoSpinCount(q);
          };
          W.prototype.onUpdateAutoSpinCount = function (q) {
            if (this.mode === L.SpinButtonMode.AUTOSPIN) {
              this.numberDisplayController.clear();
              this.numberDisplayController.displayNumber(q, true);
            }
          };
          W.prototype.onExitAutoSpinMode = function () {
            this.arrowHolder.active = true;
            this.spinButtonHolder.active = true;
            this.numberDisplayController.clear();
            this._inactiveAutoSpinHolder();
            if (D.settingMenuHelper.stopSpinOptionButtonAnim) {
              D.settingMenuHelper.stopSpinOptionButtonAnim();
            }
          };
          W.prototype.onResumeIdle = function () {
            this.onReplaceSpinClearSpriteFrame();
            this.arrowHolder.runAction(cc.repeatForever(cc.rotateBy(4, 360)));
          };
          W.prototype.onResumeSpin = function () {
            this.onShowSpinAnimation(false);
            this.onReplaceSpinBlurredSpriteFrame();
          };
          W.prototype.onResumeStop = function () {
            this.onShowStopSpinningAnimation();
            this.onReplaceSpinClearSpriteFrame();
          };
          W.prototype.onPlayMouseOverEffect = function () {
            this.hoverSprite.spriteFrame = undefined;
            this.hoverAnimation.stop();
            this.hoverAnimation.setCurrentTime(0);
            this.hoverAnimation.node.active = true;
            if (this.animationState === L.SpinButtonAnimationState.IDLE || this.mode === L.SpinButtonMode.AUTOSPIN) {
              if (this.mode !== L.SpinButtonMode.AUTOSPIN) {
                this.hoverAnimation.node.parent = this.hoverNormalSpinHolder;
                this.hoverAnimation.playAdditive("anim_normal_spin_hover");
              } else {
                this.hoverAnimation.node.parent = this.hoverAutoSpinHolder;
                this.hoverAnimation.playAdditive("anim_auto_spin_hover");
              }
            }
          };
          W.prototype.onHideMouseOverEffect = function () {
            this.hoverAnimation.stop();
            this.hoverAnimation.setCurrentTime(0);
            this.hoverAnimation.node.active = false;
            this.hoverSprite.spriteFrame = undefined;
          };
          W.prototype._inactiveAutoSpinHolder = function () {
            var q = this;
            this.autoSpinHolder.stopAllActions();
            this.autoSpinHolder.runAction(cc.sequence(cc.fadeOut(0.3), cc.callFunc(function () {
              q.autoSpinHolder.active = false;
            })));
          };
          W.prototype._playSpinButtonFx = function () {
            this.spinAnim.play();
          };
          W.prototype._initSpinButtonNodes = function () {};
          W.prototype._setSpinButtonInteractive = function (q) {
            this._isInteractable = q;
          };
          __decorate([Q({
            tooltip: false,
            type: cc.Button
          })], W.prototype, "spinButton", undefined);
          __decorate([Q({
            tooltip: false,
            type: cc.Animation
          })], W.prototype, "spinAnim", undefined);
          __decorate([Q({
            tooltip: false,
            type: cc.Node
          })], W.prototype, "spinButtonHolder", undefined);
          __decorate([Q({
            tooltip: false,
            type: cc.Node
          })], W.prototype, "arrowHolder", undefined);
          __decorate([Q({
            tooltip: false,
            type: cc.Sprite
          })], W.prototype, "arrowSprite", undefined);
          __decorate([Q({
            tooltip: false,
            type: cc.Node
          })], W.prototype, "autoSpinHolder", undefined);
          __decorate([Q({
            tooltip: false,
            type: cc.Node
          })], W.prototype, "autoSpinNumber", undefined);
          __decorate([Q({
            tooltip: false,
            type: [cc.SpriteFrame]
          })], W.prototype, "arrowSpriteFrameList", undefined);
          __decorate([Q(cc.Node)], W.prototype, "hoverNormalSpinHolder", undefined);
          __decorate([Q(cc.Node)], W.prototype, "hoverAutoSpinHolder", undefined);
          __decorate([Q(cc.Animation)], W.prototype, "hoverAnimation", undefined);
          __decorate([Q(cc.Sprite)], W.prototype, "hoverSprite", undefined);
          __decorate([x.automationDec({
            func: j.initSpinButtonNode
          })], W.prototype, "_initSpinButtonNodes", null);
          __decorate([x.automationDec({
            func: j.setSpinButtonInteractivity
          })], W.prototype, "_setSpinButtonInteractive", null);
          return __decorate([V], W);
        }(L.default);
        K.default = N;
        cc._RF.pop();
      }
    }, {
      AudioConstant: "AudioConstant",
      AudioManager: "AudioManager",
      AutomationDecorator: "AutomationDecorator",
      SettingMenuHelper: "SettingMenuHelper",
      SpinButtonController: "SpinButtonController",
      "SpinButtonViewController.spec": "SpinButtonViewController.spec"
    }],
    WBSTotalWinController: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "bc046jX3T9LMaj5wK6TjB7G", "WBSTotalWinController")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("Utils");
        var x = I("AutomationDecorator");
        var L = I("NumberDisplayController");
        var D = I("TotalWinController");
        var k = I("AudioConstant");
        var C = I("AudioManager");
        var j = I("TotalWinController.spec");
        var G = I("BGMHandler");
        var V = cc._decorator;
        var Q = V.ccclass;
        var N = V.property;
        var Y = function (W) {
          function q() {
            var S = W !== null && W.apply(this, arguments) || this;
            S.freeSpinNumberDisplayController = undefined;
            S.freeSpinTextSprite = undefined;
            S.winTextSprite = undefined;
            S.collectTextSprite = undefined;
            S.hoverAnim = undefined;
            S.holder = undefined;
            S.twBgA = undefined;
            S.shineNode = undefined;
            S.bulletEffectsNode = undefined;
            S.blVfxVAddParticle = undefined;
            S.coinParticle = undefined;
            S.buttonLightEffect = undefined;
            S._disposeBulletEffect = undefined;
            return S;
          }
          __extends(q, W);
          q.prototype.onInit = function (S) {
            this._initTotalWinNodes({
              collectButtonNode: this.collectButton.node,
              skipButtonNode: this.skipNode
            });
            this.winTextSprite.spriteFrame = S.totalWinSF;
            this.collectTextSprite.spriteFrame = S.collectSF;
            this.freeSpinTextSprite.spriteFrame = S.freeSpinSF;
            this._resetUI();
          };
          q.prototype.onPlay = function (S) {
            var z = S.freeSpinCount;
            this.freeSpinNumberDisplayController.clear();
            this.freeSpinNumberDisplayController.displayNumber(z, false);
            G.bgmHandler.fadeOutBgm(0.435);
            this._showHolder();
            this._showBackground();
            this._playBulletEffect();
            this._playLightParticle();
            this._playCoinParticle();
            this._playShine();
            this._playWinTextEffect();
            this._playWinAmountEffect();
          };
          q.prototype.onWinRollStart = function () {
            if (C.GeneralAudioPool.bgm_totalwin_main) {
              C.GeneralAudioPool.bgm_totalwin_main.play();
            }
          };
          q.prototype.onWinRollComplete = function (S) {
            this.collectButton.node.active = true;
            this._enableMouseHover();
            this._collectButtonShown();
            this._playShine();
            this._playWinTextEffect(true);
            this._playWinAmountEffect(true);
            if (C.GeneralAudioPool.bgm_totalwin_main) {
              C.GeneralAudioPool.bgm_totalwin_main.stop();
            }
            if (C.GeneralAudioPool.bgm_totalwin_end) {
              C.GeneralAudioPool.bgm_totalwin_end.play();
            }
            S();
          };
          q.prototype.onCollect = function (S) {
            this._disableMouseHover();
            this._hideMouseOverEffect();
            this.buttonLightEffect.runAction(cc.sequence(cc.fadeIn(0.1), cc.delayTime(0.1), cc.fadeOut(0.1)));
            if (C.GeneralAudioPool.bgm_totalwin_main) {
              C.GeneralAudioPool.bgm_totalwin_main.stop();
            }
            if (C.GeneralAudioPool.bgm_totalwin_end) {
              C.GeneralAudioPool.bgm_totalwin_end.stop();
            }
            C.playAudio(k.GENERAL_AUDIO.uiCollect.key);
            S();
          };
          q.prototype.onDismiss = function () {};
          q.prototype.onReset = function () {
            this.collectButton.node.stopAllActions();
            this.collectButton.node.active = false;
            this.freeSpinNumberDisplayController.clear();
            this._resetUI();
          };
          q.prototype._enableMouseHover = function () {
            this.collectButton.node.on("mouseenter", this._playMouseOverEffect, this);
            this.collectButton.node.on("mouseleave", this._hideMouseOverEffect, this);
          };
          q.prototype._disableMouseHover = function () {
            this.collectButton.node.off("mouseenter", this._playMouseOverEffect, this);
            this.collectButton.node.off("mouseleave", this._hideMouseOverEffect, this);
          };
          q.prototype._playMouseOverEffect = function () {
            this.hoverAnim.node.active = true;
            this.hoverAnim.setCurrentTime(0);
            this.hoverAnim.play();
          };
          q.prototype._hideMouseOverEffect = function () {
            this.hoverAnim.stop();
            this.hoverAnim.node.active = false;
          };
          q.prototype._showHolder = function () {
            this.holder.runAction(cc.fadeIn(0.2));
          };
          q.prototype._showBackground = function () {
            this.twBgA.runAction(cc.spawn(cc.fadeIn(0.2), cc.sequence(cc.scaleTo(0.2, 1), cc.scaleTo(24, 1.2))));
          };
          q.prototype._resetBackground = function () {
            this.twBgA.stopAllActions();
            this.twBgA.opacity = 0;
            this.twBgA.setScale(0.8);
          };
          q.prototype._playWinTextEffect = function (S = false) {
            if (S) {
              this.winTextSprite.node.setScale(0.715);
              this.winTextSprite.node.runAction(cc.scaleTo(0.3, 1.43).easing(cc.easeBackOut()));
            } else {
              this.winTextSprite.node.setScale(0);
              this.winTextSprite.node.runAction(cc.scaleTo(0.5, 1.43).easing(cc.easeBackInOut()));
            }
          };
          q.prototype._playWinAmountEffect = function (S = false) {
            if (S) {
              this.winAmountNode.parent.setScale(0.5);
              this.winAmountNode.parent.runAction(cc.scaleTo(0.3, 1).easing(cc.easeBackOut()));
            } else {
              this.winAmountNode.parent.setScale(0);
              this.winAmountNode.parent.runAction(cc.scaleTo(0.5, 1).easing(cc.easeBackInOut()));
            }
          };
          q.prototype._playBulletEffect = function () {
            var S = this;
            var z = [];
            this.bulletEffectsNode.children.forEach(function (A) {
              z.push(function (E) {
                var F = T.randomInt(1, 3);
                A.setScale(F);
                A.opacity = 255;
                var b = A.getComponent(cc.Animation);
                b.setCurrentTime(0);
                b.play();
                E();
              });
              var M = T.randomInt(0, 3) * 0.1;
              z.push(T.delayCallback(M));
            });
            this._disposeBulletEffect = T.sequenceCallback(z)(function () {
              if (S._disposeBulletEffect) {
                S._disposeBulletEffect = undefined;
                S._playBulletEffect();
              }
            });
          };
          q.prototype._resetBulletEffect = function () {
            var S = this._disposeBulletEffect;
            this._disposeBulletEffect = undefined;
            if (S) {
              S();
            }
            this.bulletEffectsNode.children.forEach(function (z) {
              var A = z.getComponent(cc.Animation);
              A.stop();
              A.setCurrentTime(0);
              z.opacity = 0;
            });
          };
          q.prototype._playShine = function () {
            this._resetShine();
            this.shineNode.runAction(cc.spawn(cc.fadeOut(0.7), cc.scaleTo(0.3, 6)));
          };
          q.prototype._resetShine = function () {
            this.shineNode.stopAllActions();
            this.shineNode.setScale(0);
            this.shineNode.opacity = 255;
          };
          q.prototype._playLightParticle = function () {
            var S = this;
            T.delayCallback(0.3)(function () {
              S.blVfxVAddParticle.node.active = true;
              S.blVfxVAddParticle.resetSystem();
            });
          };
          q.prototype._resetLightPartile = function () {
            this.blVfxVAddParticle.stopSystem();
            this.blVfxVAddParticle.node.active = false;
          };
          q.prototype._playCoinParticle = function () {
            this.coinParticle.active = true;
            this.coinParticle.getComponent("AnimParticleSystem").resetSystem();
          };
          q.prototype._resetCoinParticle = function () {
            this.coinParticle.getComponent("AnimParticleSystem").stopSystem();
            this.coinParticle.active = false;
          };
          q.prototype._resetUI = function () {
            this.holder.stopAllActions();
            this.holder.opacity = 0;
            this._resetBackground();
            this._resetBulletEffect();
            this._resetLightPartile();
            this._resetCoinParticle();
            this._resetShine();
            this.buttonLightEffect.stopAllActions();
            this.buttonLightEffect.opacity = 0;
            this.hoverAnim.stop();
            this.hoverAnim.node.active = false;
          };
          q.prototype._initTotalWinNodes = function () {};
          q.prototype._collectButtonShown = function () {};
          __decorate([N({
            tooltip: false,
            type: L.default
          })], q.prototype, "freeSpinNumberDisplayController", undefined);
          __decorate([N({
            tooltip: false,
            type: cc.Sprite
          })], q.prototype, "freeSpinTextSprite", undefined);
          __decorate([N({
            tooltip: false,
            type: cc.Sprite
          })], q.prototype, "winTextSprite", undefined);
          __decorate([N({
            tooltip: false,
            type: cc.Sprite
          })], q.prototype, "collectTextSprite", undefined);
          __decorate([N({
            tooltip: false,
            type: cc.Animation
          })], q.prototype, "hoverAnim", undefined);
          __decorate([N(cc.Node)], q.prototype, "holder", undefined);
          __decorate([N(cc.Node)], q.prototype, "twBgA", undefined);
          __decorate([N(cc.Node)], q.prototype, "shineNode", undefined);
          __decorate([N(cc.Node)], q.prototype, "bulletEffectsNode", undefined);
          __decorate([N(cc.ParticleSystem)], q.prototype, "blVfxVAddParticle", undefined);
          __decorate([N(cc.Node)], q.prototype, "coinParticle", undefined);
          __decorate([N(cc.Node)], q.prototype, "buttonLightEffect", undefined);
          __decorate([x.automationDec({
            func: j.initTotalWinNodes
          })], q.prototype, "_initTotalWinNodes", null);
          __decorate([x.automationDec({
            func: j.collectTotalWinButtonShownEvent
          })], q.prototype, "_collectButtonShown", null);
          return __decorate([Q], q);
        }(D.default);
        K.default = Y;
        cc._RF.pop();
      }
    }, {
      AudioConstant: "AudioConstant",
      AudioManager: "AudioManager",
      AutomationDecorator: "AutomationDecorator",
      BGMHandler: "BGMHandler",
      NumberDisplayController: "NumberDisplayController",
      TotalWinController: "TotalWinController",
      "TotalWinController.spec": "TotalWinController.spec",
      Utils: "Utils"
    }],
    WBSTweaksConfig: [function (R, K, g) {
      'use strict';

      if (!cc._RF.push(K, "5ddf3OMGrtDFqA/tV2X5qtp", "WBSTweaksConfig")) {
        Object.defineProperty(g, "__esModule", {
          value: true
        });
        g.testRegionConfigModes = g.configStore = g.testApisModes = undefined;
        R("TweaksConfig");
        R("CreatorTweaks");
        var x = R("TweaksData");
        var L = {
          enumerable: true,
          get: function () {
            return x.testApisModes;
          }
        };
        Object.defineProperty(g, "testApisModes", L);
        Object.defineProperty(g, "configStore", {
          enumerable: true,
          get: function () {
            return x.configStore;
          }
        });
        Object.defineProperty(g, "testRegionConfigModes", {
          enumerable: true,
          get: function () {
            return x.testRegionConfigModes;
          }
        });
        R("GameConstant");
        cc._RF.pop();
      }
    }, {
      CreatorTweaks: "CreatorTweaks",
      GameConstant: "GameConstant",
      TweaksConfig: "TweaksConfig",
      TweaksData: "TweaksData"
    }],
    WBSUIState: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "1bc2eg5KINEwJLVziaqQk74", "WBSUIState")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("TransactionStateMachineHandler");
        var x = I("UIState");
        var L = I("AudioConstant");
        var D = I("AudioManager");
        var k = I("GameConstant");
        var C = function (u) {
          function c(p, j, G) {
            var V = u.call(this, p, j, G) || this;
            V.name = "UI State";
            return V;
          }
          __extends(c, u);
          c.prototype.onReady = function () {};
          c.prototype.onRun = function () {
            this._decreaseRemainingFreeSpin();
            this.exit();
          };
          c.prototype.onForceExit = function (p) {
            p();
          };
          c.prototype.onExit = function (p) {
            if (this.dataSource.transactionModel.stateTransitionTo === k.TransitionState.FREE_SPIN) {
              this._runBonusIdleState(p);
            } else {
              p();
            }
          };
          c.prototype.onDestroy = function (p) {
            this.controllerPool.generalControllers.slotController.setOnClickCallback(undefined);
            this._clearAvailableActions();
            p();
          };
          c.prototype._decreaseRemainingFreeSpin = function (p) {
            if (this.dataSource.transactionModel.stateTransitionTo === k.TransitionState.FREE_SPIN && this.controllerPool) {
              D.playAudio(L.GENERAL_AUDIO.fsSpin.key);
              this.controllerPool.bonusControllers.remainingFreeSpinController.decrementFreeSpinCount(p);
            }
          };
          c.prototype._clearAvailableActions = function () {
            this.controllerPool.generalControllers.spinButtonController.clearOnClickCallback();
          };
          c.prototype._runBonusIdleState = function (p) {
            var j = this;
            T.goToStateCallback("action", true, {
              noBet: true
            })(function () {
              if (j.dataSource) {
                var V = j.dataSource.transactionModel.stateTransitionTo;
                if (V === k.TransitionState.FREE_SPIN || V === k.TransitionState.FREE_SPIN_RESPIN) {
                  T.transitionCompleteCallback("action")(p);
                }
              }
            });
          };
          return c;
        }(x.default);
        K.default = C;
        cc._RF.pop();
      }
    }, {
      AudioConstant: "AudioConstant",
      AudioManager: "AudioManager",
      GameConstant: "GameConstant",
      TransactionStateMachineHandler: "TransactionStateMachineHandler",
      UIState: "UIState"
    }],
    WalletHandlers: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "16fa48YcbZClp+85Xk1WOH4", "WalletHandlers")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        K.setupWallets = undefined;
        K.setupWallets = function (T) {
          var x = T.dataSource;
          var L = T.settingMenuHelper;
          var D = T.walletHelper;
          var k = T.callback;
          var C = x.playerModel.currencySymbol;
          D.setup({
            openWalletMenuFunc: L.openWalletMenu.bind(L),
            setFreeGameModeFunc: L.setFreeGameMode.bind(L),
            currencySymbol: C,
            footerController: T.settingWalletPanelController
          });
          D.setupWallet(x.lastTransactionRawData);
          if (k) {
            k();
          }
        };
        cc._RF.pop();
      }
    }, {}],
    WalletHelper: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "1ca2eEH71NDaahNBchOvZgw", "WalletHelper")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        K.walletHelper = undefined;
        var T;
        var x = I("SettingInfoFooterController");
        var L = I("Utils");
        var D = I("BVFramework");
        (function (u) {
          u[u.INACTIVE = 0] = "INACTIVE";
          u[u.ACTIVE = 1] = "ACTIVE";
          u[u.EXPIRED = 2] = "EXPIRED";
          u[u.CONVERTED = 3] = "CONVERTED";
          u[u.COMPLETED = 4] = "COMPLETED";
          u[u.NEW = 5] = "NEW";
          u[u.DISCARDED = 6] = "DISCARDED";
          u[u.LOCKED = 7] = "LOCKED";
        })(T ||= {});
        var k = cc._decorator.ccclass;
        var C = new (function (u) {
          function c() {
            var p = u !== null && u.apply(this, arguments) || this;
            p._hasNewWallet = false;
            p._pendingCheck = false;
            return p;
          }
          __extends(c, u);
          c.prototype.init = function (p) {
            var j = this;
            this._getGameInfo = p.getGameInfo;
            var G = D.getGameContext();
            G.on("Game.TransactionInfoUpdated", function (V) {
              j._lastSpinInfo = V.payload;
              if (j._pendingCheck) {
                var Q = j._lastSpinInfo;
                if (j.isFreeGameMode()) {
                  j._setFreeGameCounter(Q.wfg.gc);
                } else if (j.isBonusGameMode()) {
                  j._setRollOverBalance(Q.wbn.bra);
                }
                j._pendingCheck = false;
              }
            });
            G.on("Game.HasNewWallet", function () {
              j._settingMenuFooter.activateWalletNotify(true);
            });
          };
          c.prototype.processInitGameInfo = function (p, j) {
            var G = this;
            var V = p.dt.ls.si;
            this._hasNewWallet = p.dt.inwe;
            function Q(N) {
              if (N) {
                switch (N.s) {
                  case T.EXPIRED:
                  case T.DISCARDED:
                  case T.INACTIVE:
                    if (!G._getGameInfo) {
                      throw Error("Wallethelper :: processInitGameInfo : getGameInfo callback not found!");
                    }
                    G._getGameInfo("0_C", function () {
                      if (j) {
                        j();
                      }
                    });
                    return;
                }
              }
              if (j) {
                j();
              }
            }
            switch (V.wt) {
              case "B":
                Q(V.wbn);
                break;
              case "G":
                Q(V.wfg);
                break;
              default:
                if (j) {
                  j();
                }
            }
          };
          c.prototype.setup = function (p) {
            this._settingMenuSetFreeGameModeFunc = p.setFreeGameModeFunc;
            this._settingMenuFooter = p.footerController;
            this._settingMenuFooter.activateWalletNotify(this._hasNewWallet);
          };
          c.prototype.setupWallet = function (p) {
            var j = this._settingMenuFooter;
            var G = this._settingMenuSetFreeGameModeFunc;
            var V = p.wfg;
            var Q = p.wbn;
            if (Q) {
              var N = Q.bra !== Q.ibra;
              if (G) {
                G(false);
              }
              j.showCustomInfoFooter();
              this._setRollOverBalance(Q.bra, N);
              j.setWalletNavigateIcon(x.WALLET_FOOTER_TYPE.BONUS);
            } else if (V) {
              N = V.gc !== V.tg;
              if (G) {
                G(true);
              }
              j.showCustomInfoFooter();
              this._setFreeGameCounter(V.gc, N);
              j.setWalletNavigateIcon(x.WALLET_FOOTER_TYPE.FREE_GAME);
            } else {
              if (G) {
                G(false);
              }
              j.hideCustomInfoFooter();
              j.setWalletNavigateIcon(x.WALLET_FOOTER_TYPE.CASH);
            }
            this._lastSpinInfo = p;
          };
          c.prototype.hasFreeGame = function () {
            return this.isFreeGameMode() && this._lastSpinInfo.wfg.gc > 0;
          };
          c.prototype.spin = function (p) {
            if (this.isFreeGameMode()) {
              var j = this._lastSpinInfo.wfg.gc;
              this._setFreeGameCounter(j - 1);
              this._pendingCheck = true;
            } else if (this.isBonusGameMode()) {
              var G = this._lastSpinInfo.wbn.bra;
              var V = p > G ? 0 : G - p;
              this._setRollOverBalance(V);
              this._pendingCheck = true;
            }
          };
          c.prototype.isFreeGameMode = function () {
            return this._lastSpinInfo && this._lastSpinInfo.wfg;
          };
          c.prototype.isBonusGameMode = function () {
            return this._lastSpinInfo && this._lastSpinInfo.wbn;
          };
          c.prototype.isWalletCompleted = function () {
            var p = this._lastSpinInfo;
            var j = p.wfg;
            var G = p.wbn;
            if (j || G) {
              switch (j ? j.s : G.s) {
                case T.CONVERTED:
                case T.COMPLETED:
                  return true;
              }
            }
            return false;
          };
          c.prototype.cleanUp = function () {
            this._settingMenuFooter = undefined;
          };
          c.prototype._setFreeGameCounter = function (p, j = true) {
            this._settingMenuFooter.setCustomMiddleInfoFooter(p, j);
          };
          c.prototype._setRollOverBalance = function (p, j = true) {
            this._settingMenuFooter.setCustomMiddleInfoFooter(L.formatCurrency(p), j);
          };
          return __decorate([k("WalletHelper")], c);
        }(cc.Object))();
        K.walletHelper = C;
        cc._RF.pop();
      }
    }, {
      BVFramework: "BVFramework",
      SettingInfoFooterController: "SettingInfoFooterController",
      Utils: "Utils"
    }],
    WaysController: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "e01efU7BqFHHoZdNAD0tc2j", "WaysController")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = cc._decorator;
        var x = T.ccclass;
        var L = T.property;
        var D = function (k) {
          function C() {
            var u = k !== null && k.apply(this, arguments) || this;
            u.waysTextSprite = undefined;
            return u;
          }
          __extends(C, k);
          C.prototype.setWaysText = function (u) {
            this.waysTextSprite.spriteFrame = u;
          };
          C.prototype.destroy = function () {
            this.waysTextSprite.spriteFrame = undefined;
            this.node.destroy();
            return k.prototype.destroy.call(this);
          };
          __decorate([L(cc.Sprite)], C.prototype, "waysTextSprite", undefined);
          return __decorate([x], C);
        }(cc.Component);
        K.default = D;
        cc._RF.pop();
      }
    }, {}],
    WebSocketHandler: [function (Z, I) {
      'use strict';

      if (!cc._RF.push(I, "d571cdfj6pHMqHdyAI82QnG", "WebSocketHandler")) {
        var R = System.get("bvframework").WebSocketHandler;
        for (var K in R) {
          if (R.hasOwnProperty(K)) {
            I.exports[K] = R[K];
          }
        }
        I.exports.__esModule = true;
        cc._RF.pop();
      }
    }, {}],
    "WinHighlight.spec": [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "533c8G1+IJDRZ3wLKm0hm2E", "WinHighlight.spec")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        K.showWinHighlight = undefined;
        K.showWinHighlight = function () {
          var T = System.get("automation") && System.get("automation").GameData;
          if (T) {
            T.emit("WinHighlightShown");
          }
        };
        cc._RF.pop();
      }
    }, {}],
    WinLinesModel: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "24a5eWztK9Pkb2VKy4b0JAV", "WinLinesModel")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        K.WinLinesModel = undefined;
        var T = function () {
          function x(L) {
            if (L) {
              this._rawData = JSON.parse(JSON.stringify(L));
              this._winLinePositions = Object.keys(this._rawData);
            }
          }
          x.prototype.getWinLinesByPosition = function (L) {
            return this._rawData[L];
          };
          Object.defineProperty(x.prototype, "winPositions", {
            get: function () {
              return this._winLinePositions;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(x.prototype, "rawData", {
            get: function () {
              return JSON.parse(JSON.stringify(this._rawData));
            },
            enumerable: false,
            configurable: true
          });
          return x;
        }();
        K.WinLinesModel = T;
        cc._RF.pop();
      }
    }, {}],
    WinRollBaseController: [function (R, K, g) {
      'use strict';

      if (!cc._RF.push(K, "adab7txcZBOsJ6NClaGwrmO", "WinRollBaseController")) {
        Object.defineProperty(g, "__esModule", {
          value: true
        });
        var x = {
          playing: -1,
          stop: -1
        };
        var L = R("NumberDisplayInterface");
        var D = cc.Enum(x);
        var k = cc._decorator;
        var C = k.ccclass;
        var u = k.property;
        var c = function (p) {
          function _j() {
            var G = p !== null && p.apply(this, arguments) || this;
            G._bigWinDuration = 2;
            G._megaWinDuration = 2;
            G._superMegaWinDuration = 2;
            G._hasSetThreshold = false;
            G._hasSetDuration = false;
            G._accumulatedDt = 0;
            G._velocityDt = 0;
            G._maxValue = 0;
            G._speed = 0;
            G._currentState = D.stop;
            G._numberCallbackList = [];
            G._onNumReachedCallback = undefined;
            G._getVelocity = undefined;
            G.defaultVelocityStallDuration = 8;
            G.displayController = undefined;
            return G;
          }
          __extends(_j, p);
          _j.prototype.setNumbersCallback = function (G) {
            this._numberCallbackList = G;
          };
          _j.prototype.setWinThresholds = function (G, V, Q) {
            this._bigWinThreshold = G;
            this._megaWinThreshold = V;
            this._superMegaWinThreshold = Q;
            this._hasSetThreshold = true;
          };
          _j.prototype._defaultGetVelocity = function (G, V, Q) {
            if (Q < this.defaultVelocityStallDuration) {
              return V;
            } else {
              return G + Math.pow(2, Q - this.defaultVelocityStallDuration);
            }
          };
          _j.prototype.setWinDurations = function (G, V) {
            this._bigWinDuration = G;
            this._megaWinDuration = V;
            this._hasSetDuration = true;
          };
          _j.prototype.setVelocityCalculation = function (G) {
            this._getVelocity = G;
          };
          _j.prototype.play = function (G, V) {
            if (this._parametersSanityCheck()) {
              this._currentState = D.playing;
              this._onNumReachedCallback = V;
              this.displayController.clear();
              this._accumulatedDt = 0;
              this._currentCount = 0;
              this._velocityDt = 0;
              this._maxValue = G;
              var Q = this._megaWinThreshold;
              this._initialStageSpeed = this._speed = Q / this._bigWinDuration;
            }
          };
          _j.prototype.skip = function () {
            var G = this;
            if (this._currentState === D.playing) {
              this.stop(false);
              this.displayController.displayNumber(this._maxValue, true, function () {
                G._onNumberReachedAtPoint(G._maxValue);
                G._onNumReachedCallback = null;
              });
            }
          };
          _j.prototype._parametersSanityCheck = function () {
            this._hasSetDuration;
            if (this._numberCallbackList) {
              this._numberCallbackList.length;
            }
            this._getVelocity ||= this._defaultGetVelocity;
            return !!this._hasSetThreshold;
          };
          _j.prototype.stop = function (G = true) {
            if (G) {
              this.displayController.clear();
              this._onNumReachedCallback = null;
            }
            this._accumulatedDt = 0;
            this._currentState = D.stop;
          };
          _j.prototype.update = function (G) {
            if (this._currentState === D.playing) {
              if (this._currentCount >= this._superMegaWinThreshold) {
                this._accumulatedDt += G;
                this._speed = this._getVelocity(this._initialStageSpeed, this._speed, this._accumulatedDt, G);
                this._currentCount = this._currentCount + this._speed * G * (0.9 + Math.random() * 0.2);
              } else {
                this._currentCount = this._currentCount + this._speed * G * (0.9 + Math.random() * 0.2);
              }
              this._updateNumber();
            }
          };
          _j.prototype._onNumberReachedAtPoint = function (G) {
            var V = this._megaWinDuration;
            var Q = this._superMegaWinThreshold;
            var N = this._megaWinThreshold;
            if (G === N) {
              var Y = Q - N;
              this._initialStageSpeed = this._speed = Y / V;
            }
            if (G === Q) {
              this._initialStageSpeed = this._speed = (Q - N) / V;
            }
            if (this._onNumReachedCallback) {
              this._onNumReachedCallback(G);
            }
          };
          _j.prototype._updateNumber = function () {
            var G = this;
            var V = this._currentCount;
            var Q = this._numberCallbackList;
            var N = this._maxValue;
            if (N <= V) {
              this.stop(false);
              this.displayController.displayNumber(N, true, function () {
                G._onNumberReachedAtPoint(N);
                G._onNumReachedCallback = null;
              });
              return;
            }
            if (Q !== undefined && Q.length && Q[0] <= V) {
              var Y = Q.shift();
              this.displayController.displayNumber(V, false, function () {
                G._onNumberReachedAtPoint(Y);
              });
            } else {
              this.displayController.displayNumber(V, false);
            }
          };
          __decorate([u(cc.Float)], _j.prototype, "defaultVelocityStallDuration", undefined);
          __decorate([u({
            type: L.default,
            override: true
          })], _j.prototype, "displayController", undefined);
          return __decorate([C], _j);
        }(cc.Component);
        g.default = c;
        cc._RF.pop();
      }
    }, {
      NumberDisplayInterface: "NumberDisplayInterface"
    }],
    WinRollController: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "00616+xbv9I/qAMwXqWbdkY", "WinRollController")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("NumberDisplayController");
        var x = I("WinRollBaseController");
        var L = cc._decorator;
        var D = L.ccclass;
        var k = L.property;
        var C = function (u) {
          function c() {
            return u !== null && u.apply(this, arguments) || this;
          }
          var p = {
            type: T.default,
            override: true
          };
          __extends(c, u);
          __decorate([k(p)], c.prototype, "displayController", undefined);
          return __decorate([D], c);
        }(x.default);
        K.default = C;
        cc._RF.pop();
      }
    }, {
      NumberDisplayController: "NumberDisplayController",
      WinRollBaseController: "WinRollBaseController"
    }],
    WinRollCurveController: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "a210c4WXCdAmKbdwKdx5P30", "WinRollCurveController")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("NumberCurvedController");
        var x = I("WinRollBaseController");
        var L = cc._decorator;
        var D = L.ccclass;
        var k = L.property;
        var C = function (u) {
          function c() {
            return u !== null && u.apply(this, arguments) || this;
          }
          var p = {
            type: T.default,
            override: true
          };
          __extends(c, u);
          __decorate([k(p)], c.prototype, "displayController", undefined);
          return __decorate([D], c);
        }(x.default);
        K.default = C;
        cc._RF.pop();
      }
    }, {
      NumberCurvedController: "NumberCurvedController",
      WinRollBaseController: "WinRollBaseController"
    }],
    WinRollLabelController: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "f7e1diBGQ5A8KF1oMrYEMNU", "WinRollLabelController")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        var T = I("NumberLabelController");
        var x = I("WinRollBaseController");
        var L = cc._decorator;
        var D = L.ccclass;
        var k = L.property;
        var C = function (u) {
          function c() {
            return u !== null && u.apply(this, arguments) || this;
          }
          var p = {
            type: T.default,
            override: true
          };
          __extends(c, u);
          __decorate([k(p)], c.prototype, "displayController", undefined);
          return __decorate([D], c);
        }(x.default);
        K.default = C;
        cc._RF.pop();
      }
    }, {
      NumberLabelController: "NumberLabelController",
      WinRollBaseController: "WinRollBaseController"
    }],
    WinTemplateConstant: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "9c6d2sdvbpNab7sycJbS7X0", "WinTemplateConstant")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        K.BigWinRollState = K.REPLAY_WIN_HOLD_DURATION = K.NORMAL_WIN_HOLD_DURATION = K.WinState = undefined;
        (function (T) {
          T[T.INITIAL = 1] = "INITIAL";
          T[T.PLAYING = 2] = "PLAYING";
          T[T.WAITING = 3] = "WAITING";
          T[T.DISMISING = 4] = "DISMISING";
        })(K.WinState ||= {});
        K.NORMAL_WIN_HOLD_DURATION = 6;
        K.REPLAY_WIN_HOLD_DURATION = 1;
        (function (T) {
          T[T.BIG_WIN = 0] = "BIG_WIN";
          T[T.MEGA_WIN = 1] = "MEGA_WIN";
          T[T.SUPER_MEGA_WIN = 2] = "SUPER_MEGA_WIN";
        })(K.BigWinRollState ||= {});
        cc._RF.pop();
      }
    }, {}],
    WinTemplate: [function (Z, I) {
      'use strict';

      if (!cc._RF.push(I, "20cddl5+7tKNYXQwoEpdx6z", "WinTemplate")) {
        cc._RF.pop();
      }
    }, {}],
    WinThresholdsModel: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "43fa7kpruFLXK4fYDhrIgSc", "WinThresholdsModel")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        K.WinThresholdsModel = undefined;
        var T = I("Utils");
        var x = function () {
          function L(D) {
            if (D) {
              this._rawData = JSON.parse(JSON.stringify(D));
              this._mediumWin = D.mw;
              this._bigWin = D.bw;
              this._megaWin = D.mgw;
              this._superMegaWin = D.smgw;
            }
          }
          L.prototype.getAllThresholds = function (D, k, C) {
            var u = D * k * C;
            return {
              mediumWinThreshold: T.toDecimalWithExp(u * this._mediumWin, 2),
              bigWinThreshold: T.toDecimalWithExp(u * this._bigWin, 2),
              megaWinThreshold: T.toDecimalWithExp(u * this._megaWin, 2),
              superMegaWinThreshold: T.toDecimalWithExp(u * this._superMegaWin, 2)
            };
          };
          Object.defineProperty(L.prototype, "rawData", {
            get: function () {
              return this._rawData;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(L.prototype, "mediumWin", {
            get: function () {
              return this._mediumWin;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(L.prototype, "bigWin", {
            get: function () {
              return this._bigWin;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(L.prototype, "megaWin", {
            get: function () {
              return this._megaWin;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(L.prototype, "superMegaWin", {
            get: function () {
              return this._superMegaWin;
            },
            enumerable: false,
            configurable: true
          });
          return L;
        }();
        K.WinThresholdsModel = x;
        cc._RF.pop();
      }
    }, {
      Utils: "Utils"
    }],
    WinValuesModel: [function (I, R, K) {
      'use strict';

      if (!cc._RF.push(R, "501f6RTfh9LVInQJ/Y+n54G", "WinValuesModel")) {
        Object.defineProperty(K, "__esModule", {
          value: true
        });
        K.WinValuesModel = undefined;
        var T = function () {
          function x(L) {
            if (L) {
              this._rawData = JSON.parse(JSON.stringify(L));
              this._winValuePositions = Object.keys(this._rawData);
            }
          }
          x.prototype.getWinValueByPosition = function (L) {
            return this._rawData[L];
          };
          Object.defineProperty(x.prototype, "winValuePositions", {
            get: function () {
              return this._winValuePositions;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(x.prototype, "rawData", {
            get: function () {
              return JSON.parse(JSON.stringify(this._rawData));
            },
            enumerable: false,
            configurable: true
          });
          return x;
        }();
        K.WinValuesModel = T;
        cc._RF.pop();
      }
    }, {}],
    XHRFactory: [function (Z, I) {
      'use strict';

      if (!cc._RF.push(I, "f3dd4hmiBJHSqrMVzx2qXWg", "XHRFactory")) {
        var R = System.get("common").XHR;
        I.exports.XHRFactory = R;
        I.exports.__esModule = true;
        cc._RF.pop();
      }
    }, {}],
    XHRHandler: [function (Z, I) {
      'use strict';

      if (!cc._RF.push(I, "77926JsF5hDL5NbzKF89qZh", "XHRHandler")) {
        var R = System.get("bvframework").XHRHandler;
        for (var K in R) {
          I.exports[K] = R[K];
        }
        I.exports.__esModule = true;
        cc._RF.pop();
      }
    }, {}],
    XHRHelper: [function (Z, I) {
      'use strict';

      if (!cc._RF.push(I, "d29eaTApqFCCLK6u/sH0xO/", "XHRHelper")) {
        var R = System.get("bvframework").XHRHelper;
        for (var K in R) {
          I.exports[K] = R[K];
        }
        I.exports.__esModule = true;
        cc._RF.pop();
      }
    }, {}]
  }, {}, ["AutomationDecorator", "AnimParticleSystem", "AnimParticleSystemPoolHandler", "AnimParticleSystemUtils", "Appearance", "ButtonTheme", "LabelTheme", "AdapterEventEmitter", "AudioAdapter", "AudioAdapterConstant", "AudioFactory", "NoSoundAdapter", "ButtonHitTest", "APIClient", "AnalyticsHelper", "BVFramework", "BVFrameworkEnum", "DataSource", "ErrorHandler", "GameEventHandler", "GameHeaderHelper", "GameInitializationHandler", "GameMaintenanceHandler", "GameMaintenanceModel", "GamePluginModel", "GameTitle", "GameUtils", "LaunchConfig", "NotifyHelper", "OperatorJurisdictionModel", "PlayerModel", "Printer", "QuitGame", "QuitGameWithEvent", "RegionUtils", "RequestHandler", "ResourceQualifierHelper", "RetryHandler", "SystemModel", "TransactionModel", "TransactionStateMachineHandler", "WebSocketHandler", "XHRHandler", "XHRHelper", "ClickEffectController", "CanvasResizeBroadcaster", "CommonDummy", "Deserializer", "FPSTracker", "JSONSerializer", "MultiResHandler", "Preference", "ResRC", "Serializer", "Utils", "XHRFactory", "CreatorTweaks", "TweaksData", "FeatureBuyHelper", "GeneralSlotTemplate", "GameAudioAdapter", "SpinButtonController", "TweaksConfig", "SlotAnalyticsEnum", "SlotGameConstants", "AutoSpinHandler", "SettingMenuHandlers", "SpinConfigHandler", "SystemFeatureHandler", "WalletHandlers", "SlotAnalyticsHelper", "SlotDependencyManager", "BetRepository", "SlotSystemModel", "SlotTransactionModel", "WinLinesModel", "WinThresholdsModel", "WinValuesModel", "GeneralSlotController", "SlotGameTools", "SlotStateMachine", "AppState", "AppStateMachine", "IdleState", "PrizeState", "RequestApiState", "ResultState", "UIState", "UIStateMachine", "HitPassThrough", "InfoboardMessageController", "InfoboardMessageController.spec", "NumberCurvedController", "NumberDisplayController", "NumberDisplayInterface", "NumberLabelController", "NumberRollBaseController", "NumberRollController", "NumberRollCurveController", "NumberRollLabelController", "TimedWinRollBaseController", "TimedWinRollController", "TimedWinRollCurveController", "TimedWinRollLabelController", "WinRollBaseController", "WinRollController", "WinRollCurveController", "WinRollLabelController", "GenericLoadingScreenController", "RefreshWorldHandler", "ResourceLoader", "BetModifierButton", "GenericSettingButton", "MoreMenuButton", "SettingMenuController", "SettingSlider", "SettingSliderNum", "SettingSliderSingle", "SettingSliderSingleNum", "SettingTurboSpinButton", "SoundButton", "SpinOptionsButton", "SubControllerConfig", "TurboButtonEffect", "NumberLabelControllerLite", "SettingInfoFooterController", "LandscapeSettingInfoFooterController", "ButtonBackground", "LandscapeSettingMenuController", "LandscapeSoundButton", "MaxBetButton", "SettingMenuButtonHelper", "SettingMenuHelper", "ButtonController", "PopOutItem", "PopOutItemHandler", "PopOutTintController", "SinglePayoutModel", "SymbolPayoutController", "SymbolPayoutPanelGenerator", "SlotScrollerController.spec", "SlotDataHandler", "SlotHelper", "SlotItemHandler", "SlotSymbol", "BaseScroller", "DefaultStartScroller", "DefaultStopScroller", "SlotScrollerController", "SlotGenerator", "SlotItem", "SlotItemPool", "SlotView", "SpaceBarInterrupter", "BACKUP_DATA", "UIAppearanceHelper", "BaseListViewCell", "BookView", "Button", "DrawLine", "GridView", "LabelLocalized", "ListView", "ListViewCellUpdateAnim", "ListViewEnum", "NavigationBar", "NavigationController", "NavigationDefaultTransition", "PageControl", "PageControlButton", "ScrollViewEx", "SliderEx", "TabBar", "TabBarController", "TabBarItem", "TransitionContext", "TransitionEnum", "UIKit", "UIKitUtils", "ViewController", "ViewControllerTransition", "WalletHelper", "BigWinController", "TotalWinController", "WinTemplate", "WinTemplateConstant", "BackgroundController", "BonusLoadingController", "EffectItemRegisterHandler", "FastSpinController", "ForegroundController", "FreeSpinWonController", "GameConstant", "InfoBoardController", "Main", "MultiplierController", "MultiplierItemController", "MultiplierShiftHandler", "PayoutEffectBackController", "PayoutEffectController", "PayoutEffectFrontController", "RemainingFreeSpinController", "ScatterEffectController", "SimpleAnimationController", "SlowDropEffectController", "SlowDropTopItemController", "WBSBigWinController", "WBSGameUtils", "WBSSpinButtonController", "WBSTotalWinController", "WaysController", "AudioConstant", "AudioManager", "BigWinController.spec", "SlotController.spec", "SpinButtonViewController.spec", "TotalWinController.spec", "WBSApiClient.spec", "WinHighlight.spec", "WBSApiClient", "WBSDataSource", "WBSFreeSpinModel", "WBSSlotSystemModel", "WBSSlotTransactionModel", "WBSTweaksConfig", "GameLayout", "GamePreference", "RtConfig", "FeatureBuyButtonController", "FeatureBuyController", "BGMHandler", "NodePoolHandler", "UISetupHandler", "WBSRefreshWorldHandler", "AudioAssetConfig", "BaseLoadingController", "BonusAssetConfig", "GeneralAssetConfig", "LateAssetConfig", "LoadingController", "SettingMenuAssetConfig", "WBSPopOutItem", "SlotTintController", "WBSSlotController", "WBSSlotItemController", "WBSSlotScrollerController", "WBSSlotView", "BonuceBackStopScroller", "ShiftSlotHandler", "SlotHandler", "SlotImageHandler", "WBSSlotDataHandler", "WBSSlotItemHandler", "WBSSlotHelper", "WBSSlotItemPool", "WBSFreeSpinGameState", "WBSIdleState", "WBSNormalGameState", "WBSPrizeState", "WBSRequestApiState", "WBSRespinState", "WBSResultState", "WBSUIState"]);
})(); //# sourceMappingURL=index.js.map